import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:math' as math;

// --- Constants for Option Page ---
const Duration _kBgAnimationDuration = Duration(seconds: 30);
const Duration _kOptionAnimationBaseDuration = Duration(milliseconds: 700);
const Duration _kOptionAnimationStagger = Duration(milliseconds: 150);
const Duration _kOptionEntryDelay = Duration(milliseconds: 400);
const int _kNumBackgroundStars = 40;
const double _kStarBaseRadius = 250.0;
const double _kStarRadiusIncrement = 25.0;

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      systemNavigationBarColor: Colors.transparent,
    ),
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Attack Simulation App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.red,
        scaffoldBackgroundColor: Colors.black,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Roboto',
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(35),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 45, vertical: 18),
          ),
        ),
        textTheme: const TextTheme(
          headlineLarge: TextStyle(
            fontSize: 36,
            fontWeight: FontWeight.bold,
            color: Colors.white,
            letterSpacing: 3.0,
          ),
          bodyMedium: TextStyle(color: Colors.grey, fontSize: 15, height: 1.5),
        ),
      ),
      home: const SplashScreen(),
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with TickerProviderStateMixin {
  late AnimationController _logoController;
  late AnimationController _textController;
  late AnimationController _buttonController;
  late AnimationController _backgroundController;

  late Animation<double> _logoAnimation;
  late Animation<double> _textAnimation;
  late Animation<double> _buttonAnimation;
  late Animation<double> _backgroundAnimation;
  late Animation<double> _rotationAnimation;

  @override
  void initState() {
    super.initState();

    // Initialize animation controllers
    _logoController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    _textController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _buttonController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _backgroundController = AnimationController(
      duration: const Duration(seconds: 4),
      vsync: this,
    );

    // Initialize animations
    _logoAnimation = CurvedAnimation(
      parent: _logoController,
      curve: Curves.elasticOut,
    );
    _textAnimation = CurvedAnimation(
      parent: _textController,
      curve: Curves.easeOutBack,
    );
    _buttonAnimation = CurvedAnimation(
      parent: _buttonController,
      curve: Curves.bounceOut,
    );
    _backgroundAnimation = CurvedAnimation(
      parent: _backgroundController,
      curve: Curves.linear,
    );
    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(_backgroundController);

    _startAnimationSequence();
  }

  void _startAnimationSequence() {
    // Start background animation immediately
    _backgroundController.repeat();

    // Logo animation
    Timer(const Duration(milliseconds: 500), () {
      _logoController.forward();
    });

    // Text animation
    Timer(const Duration(milliseconds: 2000), () {
      _textController.forward();
    });

    // Button animation
    Timer(const Duration(milliseconds: 3000), () {
      _buttonController.forward();
    });
  }

  @override
  void dispose() {
    _logoController.dispose();
    _textController.dispose();
    _buttonController.dispose();
    _backgroundController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_backgroundAnimation, _rotationAnimation]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5 + _backgroundAnimation.value * 0.5,
                colors: [
                  Colors.red.withOpacity(0.15),
                  Colors.grey[900]!.withOpacity(0.8),
                  Colors.black,
                ],
              ),
            ),
            child: Stack(
              children: [
                // Animated background particles
                ...List.generate(20, (index) {
                  final angle =
                      (index * 18.0) +
                      (_rotationAnimation.value * 180 / math.pi);
                  final radius = 150.0 + (index * 15);
                  return Positioned(
                    left:
                        MediaQuery.of(context).size.width / 2 +
                        (radius * 0.5) * math.cos(angle * math.pi / 180) -
                        2,
                    top:
                        MediaQuery.of(context).size.height / 2 +
                        (radius * 0.3) * math.sin(angle * math.pi / 180) -
                        2,
                    child: Container(
                      width: 4,
                      height: 4,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.redAccent.withOpacity(
                          0.3 - (index * 0.01),
                        ),
                      ),
                    ),
                  );
                }),
                // Main content
                Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      // Animated Logo with glow effect
                      ScaleTransition(
                        scale: _logoAnimation,
                        child: Container(
                          padding: const EdgeInsets.all(30),
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.redAccent.withOpacity(0.6),
                              width: 3,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.4),
                                blurRadius: 30,
                                spreadRadius: 8,
                              ),
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.2),
                                blurRadius: 60,
                                spreadRadius: 15,
                              ),
                            ],
                          ),
                          child: AnimatedBuilder(
                            animation: _rotationAnimation,
                            builder: (context, child) {
                              return Transform.rotate(
                                angle: _rotationAnimation.value * 0.1,
                                child: const Icon(
                                  Icons.shield,
                                  size: 90,
                                  color: Colors.redAccent,
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      // Animated Welcome Text
                      SlideTransition(
                        position: Tween<Offset>(
                          begin: const Offset(0, 1),
                          end: Offset.zero,
                        ).animate(_textAnimation),
                        child: FadeTransition(
                          opacity: _textAnimation,
                          child: Column(
                            children: [
                              Text(
                                'Welcome',
                                style: Theme.of(context).textTheme.headlineLarge
                                    ?.copyWith(
                                      shadows: [
                                        Shadow(
                                          color: Colors.redAccent.withOpacity(
                                            0.5,
                                          ),
                                          blurRadius: 10,
                                          offset: const Offset(0, 0),
                                        ),
                                      ],
                                    ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'to the Simulation',
                                style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.grey[400],
                                  letterSpacing: 1.5,
                                  fontWeight: FontWeight.w300,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 60),
                      // Animated Button with hover effect
                      ScaleTransition(
                        scale: _buttonAnimation,
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(35),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.3),
                                blurRadius: 20,
                                spreadRadius: 5,
                              ),
                            ],
                          ),
                          child: ElevatedButton(
                            onPressed: () {
                              HapticFeedback.heavyImpact();
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      const SimulationSelectionPage(),
                                ),
                              );
                            },
                            style: Theme.of(context).elevatedButtonTheme.style
                                ?.copyWith(
                                  backgroundColor: WidgetStateProperty.all(
                                    Colors.redAccent,
                                  ),
                                  foregroundColor: WidgetStateProperty.all(
                                    Colors.white,
                                  ),
                                ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                const Icon(Icons.play_arrow, size: 28),
                                const SizedBox(width: 12),
                                Text(
                                  'Simulate Attack',
                                  style: Theme.of(context).textTheme.bodyMedium
                                      ?.copyWith(
                                        fontSize: 18,
                                        fontWeight: FontWeight.w600,
                                        letterSpacing: 0.5,
                                        color: Colors.white,
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      // Animated subtitle
                      FadeTransition(
                        opacity: _buttonAnimation,
                        child: Text(
                          'Experience advanced cybersecurity scenarios',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[500],
                            letterSpacing: 1.0,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

class SimulationSelectionPage extends StatefulWidget {
  const SimulationSelectionPage({super.key});

  @override
  _SimulationSelectionPageState createState() =>
      _SimulationSelectionPageState();
}

class _SimulationSelectionPageState extends State<SimulationSelectionPage>
    with TickerProviderStateMixin {
  late List<AnimationController> _optionControllers;
  late List<Animation<double>> _optionScaleAnimations;
  late List<Animation<double>> _optionFadeAnimations;

  late AnimationController _bgController;
  late Animation<double> _rotationAnimation;

  late List<AnimationController> _starPulseControllers;
  late List<Animation<double>> _starPulseAnimations;
  final math.Random _random = math.Random();

  int? _selectedIndex;
  bool _showDetails = false;

  final List<SimulationOption> _options = [
    SimulationOption(
      title: "Phishing Simulation",
      icon: Icons.phishing_rounded,
      description:
          "Simulate sophisticated email phishing attacks and user awareness.",
      color: Colors.lightBlueAccent.shade400,
      details: """
      This simulation will test your ability to identify phishing attempts in emails. 
      You'll receive simulated emails that may contain suspicious links, attachments, 
      or requests for sensitive information. Your goal is to identify which emails 
      are legitimate and which are phishing attempts.
      """,
    ),
    SimulationOption(
      title: "Ransomware Attack",
      icon: Icons.lock_rounded,
      description:
          "Simulate ransomware attacks that encrypt files and demand payment.",
      color: Colors.redAccent.shade400,
      details: """
      In this simulation, you'll face a scenario where ransomware infects your system, 
      encrypting critical files and demanding a ransom for decryption. You'll need to 
      identify warning signs, respond to the attack, and learn strategies to prevent 
      data loss and mitigate damage.
      """,
    ),
    SimulationOption(
      title: "Data Exfiltration",
      icon: Icons.security_rounded,
      description:
          "Simulate sensitive data extraction and endpoint compromise.",
      color: Colors.purpleAccent.shade400,
      details: """
      This scenario simulates attempts to steal sensitive data from your device. 
      You'll encounter situations where malware or unauthorized processes try to 
      access and transmit your files. Your task is to detect and prevent these 
      data exfiltration attempts.
      """,
    ),
  ];

  @override
  void initState() {
    super.initState();

    _bgController = AnimationController(
      duration: _kBgAnimationDuration,
      vsync: this,
    )..repeat();

    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(CurvedAnimation(parent: _bgController, curve: Curves.linear));

    _optionControllers = List.generate(
      _options.length,
      (index) => AnimationController(
        duration:
            _kOptionAnimationBaseDuration + (_kOptionAnimationStagger * index),
        vsync: this,
      ),
    );

    _optionScaleAnimations = _optionControllers
        .map<Animation<double>>(
          (controller) =>
              CurvedAnimation(parent: controller, curve: Curves.elasticOut),
        )
        .toList();

    _optionFadeAnimations = _optionControllers
        .map<Animation<double>>(
          (controller) => Tween<double>(
            begin: 0.0,
            end: 1.0,
          ).animate(CurvedAnimation(parent: controller, curve: Curves.easeOut)),
        )
        .toList();

    // Background Star Pulse Animations
    _starPulseControllers = List.generate(_kNumBackgroundStars, (index) {
      return AnimationController(
        duration: Duration(milliseconds: 1500 + _random.nextInt(1000)),
        vsync: this,
      )..repeat(reverse: true);
    });

    _starPulseAnimations = _starPulseControllers.map<Animation<double>>((
      controller,
    ) {
      return Tween<double>(
        begin: 0.4,
        end: 1.0,
      ).animate(CurvedAnimation(parent: controller, curve: Curves.easeInOut));
    }).toList();

    Future.delayed(_kOptionEntryDelay, () {
      _optionControllers.forEach((controller) => controller.forward());
    });
  }

  @override
  void dispose() {
    _bgController.dispose();
    _optionControllers.forEach((controller) => controller.dispose());
    _starPulseControllers.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _handleSelection(int index) {
    HapticFeedback.mediumImpact();
    setState(() {
      if (_selectedIndex == index) {
        // Toggle details if same option is clicked again
        _showDetails = !_showDetails;
      } else {
        _selectedIndex = index;
        _showDetails = true;
      }
    });
  }

  void _closeDetails() {
    setState(() {
      _showDetails = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.sizeOf(context);
    final isLargeScreen = screenSize.width > 700;

    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_bgController, ..._starPulseControllers]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5,
                colors: [
                  Colors.deepPurple.shade900.withOpacity(0.2),
                  Colors.black87,
                  Colors.black,
                ],
                stops: [0.0, 0.6, 1.0],
              ),
            ),
            child: Stack(
              children: [
                // Animated background stars
                ...List.generate(_kNumBackgroundStars, (index) {
                  final angle =
                      (index * (360.0 / _kNumBackgroundStars)) +
                      (_rotationAnimation.value * 180 / math.pi * 0.5);
                  final distanceFactor = 0.8 + (_random.nextDouble() * 0.4);
                  final radius =
                      (_kStarBaseRadius +
                          (index % 10 * _kStarRadiusIncrement)) *
                      distanceFactor;
                  final starSize = 1.5 + _random.nextDouble() * 2.5;

                  return Positioned(
                    left:
                        screenSize.width / 2 +
                        (radius * 0.7) * math.cos(angle * math.pi / 180) -
                        starSize / 2,
                    top:
                        screenSize.height / 2 +
                        (radius * 0.5) * math.sin(angle * math.pi / 180) -
                        starSize / 2,
                    child: FadeTransition(
                      opacity: _starPulseAnimations[index],
                      child: Container(
                        width: starSize,
                        height: starSize,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.redAccent.withOpacity(
                            0.3 + _random.nextDouble() * 0.3,
                          ),
                        ),
                      ),
                    ),
                  );
                }),
                // Content
                SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 10,
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        AppBar(
                          leading: IconButton(
                            icon: const Icon(
                              Icons.arrow_back_ios_new,
                              color: Colors.white70,
                            ),
                            onPressed: () => Navigator.pop(context),
                          ),
                          title: Text(
                            'Select Simulation Scenario',
                            style: TextStyle(
                              color: Colors.white.withOpacity(0.85),
                              fontWeight: FontWeight.w300,
                              letterSpacing: 0.5,
                            ),
                          ),
                          backgroundColor: Colors.transparent,
                          elevation: 0,
                          centerTitle: true,
                        ),
                        if (_showDetails && _selectedIndex != null) ...[
                          _buildDetailsPanel(
                            context,
                            _options[_selectedIndex!],
                          ),
                          const SizedBox(height: 20),
                        ],
                        Expanded(
                          child: Center(
                            child: SingleChildScrollView(
                              padding: const EdgeInsets.symmetric(vertical: 20),
                              child: Wrap(
                                alignment: WrapAlignment.center,
                                crossAxisAlignment: WrapCrossAlignment.center,
                                spacing: 30,
                                runSpacing: 30,
                                children: List.generate(_options.length, (
                                  index,
                                ) {
                                  final isSelected = _selectedIndex == index;
                                  return FadeTransition(
                                    opacity: _optionFadeAnimations[index],
                                    child: ScaleTransition(
                                      scale: _optionScaleAnimations[index],
                                      child: SimulationCard(
                                        option: _options[index],
                                        isSelected: isSelected,
                                        onTap: () => _handleSelection(index),
                                      ),
                                    ),
                                  );
                                }),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildDetailsPanel(BuildContext context, SimulationOption option) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      margin: const EdgeInsets.symmetric(horizontal: 20),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.8),
        borderRadius: BorderRadius.circular(15),
        border: Border.all(color: option.color.withOpacity(0.5), width: 1.5),
        boxShadow: [
          BoxShadow(
            color: option.color.withOpacity(0.2),
            blurRadius: 20,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                option.title,
                style: const TextStyle(
                  fontSize: 22,
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              IconButton(
                icon: const Icon(Icons.close, color: Colors.white70),
                onPressed: _closeDetails,
              ),
            ],
          ),
          const SizedBox(height: 10),
          Divider(color: option.color.withOpacity(0.5)),
          const SizedBox(height: 15),
          Text(
            option.details,
            style: TextStyle(
              color: Colors.grey[300],
              fontSize: 16,
              height: 1.6,
            ),
          ),
          const SizedBox(height: 20),
          Center(
            child: ElevatedButton(
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Starting ${option.title}...'),
                    backgroundColor: option.color,
                  ),
                );
              },
              style: Theme.of(context).elevatedButtonTheme.style?.copyWith(
                backgroundColor: WidgetStateProperty.all(
                  option.color.withOpacity(0.2),
                ),
                foregroundColor: WidgetStateProperty.all(option.color),
                side: WidgetStateProperty.all(
                  BorderSide(color: option.color.withOpacity(0.8)),
                ),
              ),
              child: Text(
                'Start Simulation',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: option.color,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class SimulationCard extends StatefulWidget {
  final SimulationOption option;
  final bool isSelected;
  final VoidCallback onTap;

  const SimulationCard({
    super.key,
    required this.option,
    required this.isSelected,
    required this.onTap,
  });

  @override
  _SimulationCardState createState() => _SimulationCardState();
}

class _SimulationCardState extends State<SimulationCard> {
  bool _isHovered = false;

  @override
  Widget build(BuildContext context) {
    final option = widget.option;
    final isSelected = widget.isSelected;
    final cardWidth = MediaQuery.sizeOf(context).width > 700 ? 320.0 : 280.0;

    return MouseRegion(
      onEnter: (_) => setState(() => _isHovered = true),
      onExit: (_) => setState(() => _isHovered = false),
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: widget.onTap,
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
          width: cardWidth,
          padding: const EdgeInsets.all(25),
          decoration: BoxDecoration(
            color: _isHovered || isSelected
                ? Colors.grey[850]!.withOpacity(0.8)
                : Colors.grey[900]!.withOpacity(0.7),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: option.color.withOpacity(
                _isHovered || isSelected ? 0.7 : 0.4,
              ),
              width: _isHovered || isSelected ? 2.5 : 2,
            ),
            boxShadow: [
              BoxShadow(
                color: option.color.withOpacity(
                  _isHovered || isSelected ? 0.4 : 0.25,
                ),
                blurRadius: _isHovered || isSelected ? 25 : 15,
                spreadRadius: _isHovered || isSelected ? 4 : 2,
              ),
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 10,
                offset: const Offset(0, 5),
              ),
            ],
            gradient: (_isHovered || isSelected)
                ? LinearGradient(
                    colors: [
                      option.color.withOpacity(0.1),
                      Colors.grey[850]!.withOpacity(0.1),
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  )
                : null,
          ),
          transform: (_isHovered || isSelected)
              ? (Matrix4.identity()..scale(1.03))
              : Matrix4.identity(),
          transformAlignment: Alignment.center,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(
                option.icon,
                size: 50,
                color: option.color.withOpacity(
                  _isHovered || isSelected ? 1.0 : 0.8,
                ),
              ),
              const SizedBox(height: 20),
              Text(
                option.title,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 22,
                  color: Colors.white.withOpacity(0.95),
                  fontWeight: FontWeight.w600,
                  letterSpacing: 0.8,
                ),
              ),
              const SizedBox(height: 15),
              Text(
                option.description,
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.bodyMedium,
              ),
              const SizedBox(height: 25),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 10,
                ),
                decoration: BoxDecoration(
                  color: option.color.withOpacity(
                    _isHovered || isSelected ? 0.25 : 0.15,
                  ),
                  borderRadius: BorderRadius.circular(30),
                  border: Border.all(color: option.color.withOpacity(0.5)),
                ),
                child: Text(
                  "Start Simulation",
                  style: TextStyle(
                    color: option.color,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class SimulationOption {
  final String title;
  final IconData icon;
  final String description;
  final String details;
  final Color color;

  SimulationOption({
    required this.title,
    required this.icon,
    required this.description,
    required this.color,
    required this.details,
  });
}

extension on double {
  double cos() => math.cos(this);
  double sin() => math.sin(this);
}
