
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:math' as math; // Used by base app, ransomware, and QR sim parts
// import 'dart:math'; // Used by QR sim (can be merged with the alias above) - MERGED
// For Phishing Sim (from code 2, now aliased)
// No, Phishing Sim uses its own Random, keep it separate if no conflict, or alias.
// Code 2 used 'dart:math' as 'Random'. Let's use math.Random for consistency if possible,
// or ensure there's no naming clash.
// The Phishing sim from code 2 used `final Random _random = Random();`
// I will change this to `final math.Random _random = math.Random();` for consistency.

// Imports from Ransomware Simulation (already in base_app.dart)
import 'package:lottie/lottie.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:assets_audio_player/assets_audio_player.dart';
import 'package:vibration/vibration.dart';
import 'package:confetti/confetti.dart';

// --- Constants for Option Page (from base_app.dart) ---
const Duration _kBgAnimationDuration = Duration(seconds: 30);
const Duration _kOptionAnimationBaseDuration = Duration(milliseconds: 700);
const Duration _kOptionAnimationStagger = Duration(milliseconds: 150);
const Duration _kOptionEntryDelay = Duration(milliseconds: 400);
const int _kNumBackgroundStars = 40;
const double _kStarBaseRadius = 250.0;
const double _kStarRadiusIncrement = 25.0;

// IMPORTANT: Add these dependencies to your pubspec.yaml:
// dependencies:
//   flutter:
//     sdk: flutter
//   lottie: ^3.1.0 # Check for latest version
//   animated_text_kit: ^4.2.2 # Check for latest version
//   assets_audio_player: ^3.1.1 # Check for latest version
//   vibration: ^1.8.4 # Check for latest version
//   confetti: ^0.7.0 # Check for latest version
//
//   # Phishing simulation does not add new package dependencies beyond Flutter SDK.
//   # QR Code Phishing simulation uses assets_audio_player, already listed.

// IMPORTANT: Ensure you have the following assets in your `assets/` folder
// and declare them in `pubspec.yaml`:
// assets:
//   - assets/alert.mp3
//   - assets/glitch.json
//   - assets/data_breach.json
//   - assets/lock.json
//   - assets/skull.json
//   - assets/bitcoin.json
//   - assets/success.json
//   - assets/beep.mp3    # <<< ADD THIS FOR QR SIMULATION
//   - assets/error.mp3   # <<< ADD THIS FOR QR SIMULATION
//   # Add any other assets used by other simulations

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      systemNavigationBarColor: Colors.transparent,
    ),
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Attack Simulation App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.red, // This defines colorScheme.primary etc.
        scaffoldBackgroundColor: Colors.black,
        cardColor: const Color(
          0xFF1E1E1E,
        ), // Added for QR sim theming consistency
        colorScheme: ColorScheme.dark(
          primary: Colors.redAccent.shade400, // Main interactive elements
          secondary: Colors
              .amberAccent
              .shade400, // Floating action buttons, some highlights
          surface: Colors.grey[850]!, // Card backgrounds, surfaces
          background: Colors.black, // Overall background
          error: Colors.red.shade300, // Error indicators
          onPrimary: Colors.white,
          onSecondary: Colors.black,
          onSurface: Colors.white,
          onBackground: Colors.white,
          onError: Colors.black,
          brightness: Brightness.dark,
        ),
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Roboto', // Default font // Phishing sim used 'SF Pro Display' - consider if app-wide change or local
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(35),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 45, vertical: 18),
            backgroundColor: Colors.redAccent.shade400, // Default button color
            foregroundColor: Colors.white, // Default button text color
          ),
        ),
        outlinedButtonTheme: OutlinedButtonThemeData(
          style: OutlinedButton.styleFrom(
            foregroundColor: Colors.white,
            side: const BorderSide(color: Colors.greenAccent, width: 2),
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
        ),
        textTheme: const TextTheme(
          headlineLarge: TextStyle(
            fontSize: 36,
            fontWeight: FontWeight.bold,
            color: Colors.white,
            letterSpacing: 3.0,
          ),
          headlineMedium: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ), // For QR Sim titles
          bodyMedium: TextStyle(color: Colors.grey, fontSize: 15, height: 1.5),
          labelMedium: TextStyle(
            fontSize: 12,
            color: Colors.grey,
          ), // For QR Sim labels
        ),
        dialogTheme: DialogThemeData(
          // Ensure dialogs match dark theme
          backgroundColor: Colors.grey[850],
          titleTextStyle: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: Colors.white.withOpacity(0.9),
          ),
          contentTextStyle: TextStyle(
            fontSize: 16,
            color: Colors.white.withOpacity(0.8),
          ),
        ),
        // Add any other theme customizations here
        cardTheme: CardThemeData( // From Phishing Sim's MaterialApp theme
          elevation: 2,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
      ),
      home: const SplashScreen(),
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with TickerProviderStateMixin {
  late AnimationController _logoController;
  late AnimationController _textController;
  late AnimationController _buttonController;
  late AnimationController _backgroundController;

  late Animation<double> _logoAnimation;
  late Animation<double> _textAnimation;
  late Animation<double> _buttonAnimation;
  late Animation<double> _backgroundAnimation;
  late Animation<double> _rotationAnimation;

  @override
  void initState() {
    super.initState();

    _logoController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    _textController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _buttonController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _backgroundController = AnimationController(
      duration: const Duration(seconds: 4),
      vsync: this,
    );

    _logoAnimation = CurvedAnimation(
      parent: _logoController,
      curve: Curves.elasticOut,
    );
    _textAnimation = CurvedAnimation(
      parent: _textController,
      curve: Curves.easeOutBack,
    );
    _buttonAnimation = CurvedAnimation(
      parent: _buttonController,
      curve: Curves.bounceOut,
    );
    _backgroundAnimation = CurvedAnimation(
      parent: _backgroundController,
      curve: Curves.linear,
    );
    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(_backgroundController);

    _startAnimationSequence();
  }

  void _startAnimationSequence() {
    _backgroundController.repeat();

    Timer(const Duration(milliseconds: 500), () {
      if (mounted) _logoController.forward();
    });

    Timer(const Duration(milliseconds: 2000), () {
      if (mounted) _textController.forward();
    });

    Timer(const Duration(milliseconds: 3000), () {
      if (mounted) _buttonController.forward();
    });
  }

  @override
  void dispose() {
    _logoController.dispose();
    _textController.dispose();
    _buttonController.dispose();
    _backgroundController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_backgroundAnimation, _rotationAnimation]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5 + _backgroundAnimation.value * 0.5,
                colors: [
                  Colors.red.withOpacity(0.15),
                  Colors.grey[900]!.withOpacity(0.8),
                  Colors.black,
                ],
              ),
            ),
            child: Stack(
              children: [
                ...List.generate(20, (index) {
                  final angle =
                      (index * 18.0) +
                      (_rotationAnimation.value * 180 / math.pi);
                  final radius = 150.0 + (index * 15);
                  return Positioned(
                    left:
                        MediaQuery.of(context).size.width / 2 +
                        (radius * 0.5) * math.cos(angle * math.pi / 180) -
                        2,
                    top:
                        MediaQuery.of(context).size.height / 2 +
                        (radius * 0.3) * math.sin(angle * math.pi / 180) -
                        2,
                    child: Container(
                      width: 4,
                      height: 4,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.redAccent.withOpacity(
                          0.3 - (index * 0.01),
                        ),
                      ),
                    ),
                  );
                }),
                Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      ScaleTransition(
                        scale: _logoAnimation,
                        child: Container(
                          padding: const EdgeInsets.all(30),
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.redAccent.withOpacity(0.6),
                              width: 3,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.4),
                                blurRadius: 30,
                                spreadRadius: 8,
                              ),
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.2),
                                blurRadius: 60,
                                spreadRadius: 15,
                              ),
                            ],
                          ),
                          child: AnimatedBuilder(
                            animation: _rotationAnimation,
                            builder: (context, child) {
                              return Transform.rotate(
                                angle: _rotationAnimation.value * 0.1,
                                child: const Icon(
                                  Icons.shield,
                                  size: 90,
                                  color: Colors.redAccent,
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      SlideTransition(
                        position: Tween<Offset>(
                          begin: const Offset(0, 1),
                          end: Offset.zero,
                        ).animate(_textAnimation),
                        child: FadeTransition(
                          opacity: _textAnimation,
                          child: Column(
                            children: [
                              Text(
                                'ThreatTwin',
                                style: Theme.of(context).textTheme.headlineLarge
                                    ?.copyWith(
                                      shadows: [
                                        Shadow(
                                          color: Colors.redAccent.withOpacity(
                                            0.5,
                                          ),
                                          blurRadius: 10,
                                          offset: const Offset(0, 0),
                                        ),
                                      ],
                                    ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'Welcome to the Simulation',
                                style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.grey[400],
                                  letterSpacing: 1.5,
                                  fontWeight: FontWeight.w300,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 60),
                      ScaleTransition(
                        scale: _buttonAnimation,
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(35),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.3),
                                blurRadius: 20,
                                spreadRadius: 5,
                              ),
                            ],
                          ),
                          child: ElevatedButton(
                            onPressed: () {
                              HapticFeedback.heavyImpact();
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      const SimulationSelectionPage(),
                                  settings: const RouteSettings(
                                    name: '/simulation_selection',
                                  ), // Added for popUntil
                                ),
                              );
                            },
                            // Style will be inherited from ElevatedButtonThemeData in MyApp
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                const Icon(Icons.play_arrow, size: 28),
                                const SizedBox(width: 12),
                                Text(
                                  'Simulate Attack',
                                  style: Theme.of(context).textTheme.bodyMedium
                                      ?.copyWith(
                                        fontSize: 18,
                                        fontWeight: FontWeight.w600,
                                        letterSpacing: 0.5,
                                        color: Colors
                                            .white, // Ensure text is white on red button
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      FadeTransition(
                        opacity: _buttonAnimation,
                        child: Text(
                          'Experience advanced cybersecurity scenarios',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[500],
                            letterSpacing: 1.0,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

class SimulationSelectionPage extends StatefulWidget {
  const SimulationSelectionPage({super.key});

  @override
  _SimulationSelectionPageState createState() =>
      _SimulationSelectionPageState();
}

class _SimulationSelectionPageState extends State<SimulationSelectionPage>
    with TickerProviderStateMixin {
  late List<AnimationController> _optionControllers;
  late List<Animation<double>> _optionScaleAnimations;
  late List<Animation<double>> _optionFadeAnimations;

  late AnimationController _bgController;
  late Animation<double> _rotationAnimation;

  late List<AnimationController> _starPulseControllers;
  late List<Animation<double>> _starPulseAnimations;
  final math.Random _random = math.Random();

  int? _selectedIndex;
  bool _showDetails = false;

  final List<SimulationOption> _options = [
    SimulationOption(
      title: "Phishing Simulation",
      icon: Icons.email_outlined,
      description:
          "Test your ability to spot malicious emails and avoid phishing traps in a corporate environment.", // Updated description
      color: Colors.orangeAccent.shade400,
      details: """
      This simulation immerses you in a realistic corporate email inbox. 
      Your task is to identify and avoid interacting with phishing emails. 
      Clicking malicious links or attachments, or providing credentials on fake pages will trigger a simulated compromise.
      Learn to recognize red flags, understand different phishing attack vectors, and test your knowledge with a quiz.
      """,
    ),
    SimulationOption(
      title: "Ransomware Attack",
      icon: Icons.lock_rounded,
      description:
          "Simulate ransomware attacks that encrypt files and demand payment.",
      color: Colors.redAccent.shade400,
      details: """
      In this simulation, you'll face a scenario where ransomware infects your system, 
      encrypting critical files and demanding a ransom for decryption. You'll need to 
      identify warning signs, respond to the attack, and learn strategies to prevent 
      data loss and mitigate damage. This simulation launches a fake app environment.
      """,
    ),
    SimulationOption(
      title: "Data Exfiltration",
      icon: Icons.upload_file_rounded, // Changed icon for clarity
      description:
          "Simulate sensitive data extraction and endpoint compromise.",
      color: Colors.purpleAccent.shade400,
      details: """
      This scenario simulates attempts to steal sensitive data from your device. 
      You'll encounter situations where malware or unauthorized processes try to 
      access and transmit your files. Your task is to detect and prevent these 
      data exfiltration attempts by observing a simulated attack log.
      """,
    ),
    SimulationOption(
      // Updated for the new simulation
      title: "Digital Heist (QR + GPS)",
      icon: Icons.qr_code_scanner_outlined,
      description:
          "Advanced QR phishing with GPS spoofing and forensic analysis.",
      color: Colors.cyanAccent.shade700,
      details: """
      Experience an advanced attack simulation involving:
      - Malicious QR codes at a public location.
      - Deep linking to a compromised banking app.
      - GPS spoofing to bypass security measures.
      - Unauthorized fund transfers.
      Observe the attack timeline, analyze forensic evidence, and learn crucial prevention strategies.
      This simulation demonstrates vulnerabilities in mobile banking and location services.
      """,
    ),
  ];

  @override
  void initState() {
    super.initState();

    _bgController = AnimationController(
      duration: _kBgAnimationDuration,
      vsync: this,
    )..repeat();

    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(CurvedAnimation(parent: _bgController, curve: Curves.linear));

    _optionControllers = List.generate(
      _options.length,
      (index) => AnimationController(
        duration:
            _kOptionAnimationBaseDuration + (_kOptionAnimationStagger * index),
        vsync: this,
      ),
    );

    _optionScaleAnimations = _optionControllers
        .map<Animation<double>>(
          (controller) =>
              CurvedAnimation(parent: controller, curve: Curves.elasticOut),
        )
        .toList();

    _optionFadeAnimations = _optionControllers
        .map<Animation<double>>(
          (controller) => Tween<double>(
            begin: 0.0,
            end: 1.0,
          ).animate(CurvedAnimation(parent: controller, curve: Curves.easeOut)),
        )
        .toList();

    _starPulseControllers = List.generate(_kNumBackgroundStars, (index) {
      return AnimationController(
        duration: Duration(milliseconds: 1500 + _random.nextInt(1000)),
        vsync: this,
      )..repeat(reverse: true);
    });

    _starPulseAnimations = _starPulseControllers.map<Animation<double>>((
      controller,
    ) {
      return Tween<double>(
        begin: 0.4,
        end: 1.0,
      ).animate(CurvedAnimation(parent: controller, curve: Curves.easeInOut));
    }).toList();

    Future.delayed(_kOptionEntryDelay, () {
      for (var controller in _optionControllers) {
        if (mounted) controller.forward();
      }
    });
  }

  @override
  void dispose() {
    _bgController.dispose();
    for (var controller in _optionControllers) {
      controller.dispose();
    }
    for (var controller in _starPulseControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  void _handleSelection(int index) {
    HapticFeedback.mediumImpact();
    setState(() {
      if (_selectedIndex == index) {
        _showDetails = !_showDetails;
      } else {
        _selectedIndex = index;
        _showDetails = true;
      }
    });
  }

  void _closeDetails() {
    setState(() {
      _showDetails = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.sizeOf(context);

    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_bgController, ..._starPulseControllers]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5,
                colors: [
                  Colors.deepPurple.shade900.withOpacity(0.2),
                  Colors.black87,
                  Colors.black,
                ],
                stops: const [0.0, 0.6, 1.0],
              ),
            ),
            child: Stack(
              children: [
                ...List.generate(_kNumBackgroundStars, (index) {
                  final angle =
                      (index * (360.0 / _kNumBackgroundStars)) +
                      (_rotationAnimation.value * 180 / math.pi * 0.5);
                  final distanceFactor = 0.8 + (_random.nextDouble() * 0.4);
                  final radius =
                      (_kStarBaseRadius +
                          (index % 10 * _kStarRadiusIncrement)) *
                      distanceFactor;
                  final starSize = 1.5 + _random.nextDouble() * 2.5;

                  return Positioned(
                    left:
                        screenSize.width / 2 +
                        (radius * 0.7) * math.cos(angle * math.pi / 180) -
                        starSize / 2,
                    top:
                        screenSize.height / 2 +
                        (radius * 0.5) * math.sin(angle * math.pi / 180) -
                        starSize / 2,
                    child: FadeTransition(
                      opacity: _starPulseAnimations[index],
                      child: Container(
                        width: starSize,
                        height: starSize,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.redAccent.withOpacity(
                            0.3 + _random.nextDouble() * 0.3,
                          ),
                        ),
                      ),
                    ),
                  );
                }),
                SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 10,
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        AppBar(
                          leading: IconButton(
                            icon: const Icon(
                              Icons.arrow_back_ios_new,
                              color: Colors.white70,
                            ),
                            onPressed: () => Navigator.pop(context),
                          ),
                          title: Text(
                            'Select Simulation Scenario',
                            style: TextStyle(
                              color: Colors.white.withOpacity(0.85),
                              fontWeight: FontWeight.w300,
                              letterSpacing: 0.5,
                            ),
                          ),
                          backgroundColor: Colors.transparent,
                          elevation: 0,
                          centerTitle: true,
                        ),
                        if (_showDetails && _selectedIndex != null) ...[
                          _buildDetailsPanel(
                            context,
                            _options[_selectedIndex!],
                          ),
                          const SizedBox(height: 20),
                        ],
                        Expanded(
                          child: Center(
                            child: SingleChildScrollView(
                              padding: const EdgeInsets.symmetric(vertical: 20),
                              child: Wrap(
                                alignment: WrapAlignment.center,
                                crossAxisAlignment: WrapCrossAlignment.center,
                                spacing: 30,
                                runSpacing: 30,
                                children: List.generate(_options.length, (
                                  index,
                                ) {
                                  final isSelected = _selectedIndex == index;
                                  return FadeTransition(
                                    opacity: _optionFadeAnimations[index],
                                    child: ScaleTransition(
                                      scale: _optionScaleAnimations[index],
                                      child: SimulationCard(
                                        option: _options[index],
                                        isSelected: isSelected,
                                        onTap: () => _handleSelection(index),
                                      ),
                                    ),
                                  );
                                }),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildDetailsPanel(BuildContext context, SimulationOption option) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      margin: const EdgeInsets.symmetric(horizontal: 20),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.8),
        borderRadius: BorderRadius.circular(15),
        border: Border.all(color: option.color.withOpacity(0.5), width: 1.5),
        boxShadow: [
          BoxShadow(
            color: option.color.withOpacity(0.2),
            blurRadius: 20,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  option.title,
                  style: const TextStyle(
                    fontSize: 22,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              IconButton(
                icon: const Icon(Icons.close, color: Colors.white70),
                onPressed: _closeDetails,
              ),
            ],
          ),
          const SizedBox(height: 10),
          Divider(color: option.color.withOpacity(0.5)),
          const SizedBox(height: 15),
          Text(
            option.details,
            style: TextStyle(
              color: Colors.grey[300],
              fontSize: 16,
              height: 1.6,
            ),
          ),
          const SizedBox(height: 20),
          Center(
            child: ElevatedButton(
              onPressed: () {
                if (option.title == "Data Exfiltration") {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const SimulationHomePage(),
                    ),
                  );
                } else if (option.title == "Ransomware Attack") {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const FakeAppLauncher(),
                    ),
                  );
                } else if (option.title == "Phishing Simulation") {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const EmailInboxScreen(), // New EmailInboxScreen
                    ),
                  );
                } else if (option.title == "Digital Heist (QR + GPS)") {
                  // Navigation for new sim
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const SecuritySimulatorDashboard(),
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Starting ${option.title}...'),
                      backgroundColor: option.color,
                    ),
                  );
                }
              },
              style: Theme.of(context).elevatedButtonTheme.style?.copyWith(
                backgroundColor: WidgetStateProperty.all(
                  option.color.withOpacity(0.2),
                ),
                foregroundColor: WidgetStateProperty.all(option.color),
                side: WidgetStateProperty.all(
                  BorderSide(color: option.color.withOpacity(0.8)),
                ),
                shape: WidgetStateProperty.all(
                  RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                padding: WidgetStateProperty.all(
                  const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                ),
              ),
              child: Text(
                'Start Simulation',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: option.color,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class SimulationCard extends StatefulWidget {
  final SimulationOption option;
  final bool isSelected;
  final VoidCallback onTap;

  const SimulationCard({
    super.key,
    required this.option,
    required this.isSelected,
    required this.onTap,
  });

  @override
  _SimulationCardState createState() => _SimulationCardState();
}

class _SimulationCardState extends State<SimulationCard> {
  bool _isHovered = false;

  @override
  Widget build(BuildContext context) {
    final option = widget.option;
    final isSelected = widget.isSelected;
    final cardWidth = MediaQuery.sizeOf(context).width > 700 ? 320.0 : 280.0;

    return MouseRegion(
      onEnter: (_) => setState(() => _isHovered = true),
      onExit: (_) => setState(() => _isHovered = false),
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: widget.onTap,
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
          width: cardWidth,
          padding: const EdgeInsets.all(25),
          decoration: BoxDecoration(
            color: _isHovered || isSelected
                ? Colors.grey[850]!.withOpacity(0.8)
                : Colors.grey[900]!.withOpacity(0.7),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: option.color.withOpacity(
                _isHovered || isSelected ? 0.7 : 0.4,
              ),
              width: _isHovered || isSelected ? 2.5 : 2,
            ),
            boxShadow: [
              BoxShadow(
                color: option.color.withOpacity(
                  _isHovered || isSelected ? 0.4 : 0.25,
                ),
                blurRadius: _isHovered || isSelected ? 25 : 15,
                spreadRadius: _isHovered || isSelected ? 4 : 2,
              ),
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 10,
                offset: const Offset(0, 5),
              ),
            ],
            gradient: (_isHovered || isSelected)
                ? LinearGradient(
                    colors: [
                      option.color.withOpacity(0.1),
                      Colors.grey[850]!.withOpacity(0.1),
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  )
                : null,
          ),
          transform: (_isHovered || isSelected)
              ? (Matrix4.identity()..scale(1.03))
              : Matrix4.identity(),
          transformAlignment: Alignment.center,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(
                option.icon,
                size: 50,
                color: option.color.withOpacity(
                  _isHovered || isSelected ? 1.0 : 0.8,
                ),
              ),
              const SizedBox(height: 20),
              Text(
                option.title,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 22,
                  color: Colors.white.withOpacity(0.95),
                  fontWeight: FontWeight.w600,
                  letterSpacing: 0.8,
                ),
              ),
              const SizedBox(height: 15),
              Text(
                option.description,
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.bodyMedium,
              ),
              const SizedBox(height: 25),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 10,
                ),
                decoration: BoxDecoration(
                  color: option.color.withOpacity(
                    _isHovered || isSelected ? 0.25 : 0.15,
                  ),
                  borderRadius: BorderRadius.circular(30),
                  border: Border.all(color: option.color.withOpacity(0.5)),
                ),
                child: Text(
                  "Details & Start",
                  style: TextStyle(
                    color: option.color,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class SimulationOption {
  final String title;
  final IconData icon;
  final String description;
  final String details;
  final Color color;

  SimulationOption({
    required this.title,
    required this.icon,
    required this.description,
    required this.color,
    required this.details,
  });
}

// --- Data Exfiltration Simulation ---
enum LogType { action, info, alert, network, file, mitigation, discovery }

class AttackStep {
  final String displayText;
  final String? mitreId;
  final String? mitreName;
  final bool isCriticalAlert;
  final Duration delayAfter;
  final LogType logType;
  final String? details;

  AttackStep({
    required this.displayText,
    this.mitreId,
    this.mitreName,
    this.isCriticalAlert = false,
    this.delayAfter = const Duration(milliseconds: 600),
    this.logType = LogType.info,
    this.details,
  });
}

class SimulationHomePage extends StatefulWidget {
  const SimulationHomePage({super.key});

  @override
  _SimulationHomePageState createState() => _SimulationHomePageState();
}

class _SimulationHomePageState extends State<SimulationHomePage>
    with TickerProviderStateMixin {
  bool _simulationStarted = false;
  bool _showEndButton = false;
  bool _simulationComplete = false;
  List<AttackStep> _simulationOutputSteps = [];
  int _currentStepIndex = 0;
  Timer? _timer;

  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;

  final List<AttackStep> _scenarioAttackSteps = [
    AttackStep(
      displayText:
          '[INITIATION] Connecting to compromised endpoint: WORKSTATION-7834...',
      logType: LogType.network,
    ),
    AttackStep(
      displayText:
          '[PERSISTENCE] Establishing persistence via registry modification...',
      mitreId: 'T1547.001',
      mitreName: 'Boot or Logon Autostart Execution: Registry Run Keys',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Attempting to bypass Windows Defender real-time protection...',
      mitreId: 'T1562.001',
      mitreName: 'Impair Defenses: Disable or Modify Tools',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Defender bypass successful. Real-time monitoring temporarily disabled.',
      logType: LogType.info,
    ),
    AttackStep(
      displayText:
          '[EXECUTION] Injecting stealth payload into explorer.exe process (PID: 1788)...',
      mitreId: 'T1055',
      mitreName: 'Process Injection',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[PRIVILEGE ESCALATION] Escalating privileges using UAC bypass technique (SilentCleanup task)...',
      mitreId: 'T1548.002',
      mitreName:
          'Abuse Elevation Control Mechanism: Bypass User Account Control',
      logType: LogType.action,
    ),
    AttackStep(
      displayText: '[PRIVILEGE ESCALATION] Achieved SYSTEM level privileges.',
      logType: LogType.info,
    ),
    AttackStep(
      displayText:
          '[DISCOVERY] Enumerating network shares and mapped drives (Net Share, Net Use)...',
      mitreId: 'T1135',
      mitreName: 'Network Share Discovery',
      logType: LogType.discovery,
    ),
    AttackStep(
      displayText:
          '[DISCOVERY] Scanning C:\\Users\\%USERNAME%\\Documents for sensitive files (keywords: confidential, private, report)...',
      mitreId: 'T1083',
      mitreName: 'File and Directory Discovery',
      logType: LogType.discovery,
    ),
    AttackStep(
      displayText: '[COLLECTION] Located: customer_database.xlsx (2.1 MB)',
      logType: LogType.file,
      details: "Contains PII and financial data.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Located: financial_records_q4_2024.pdf (854 KB)',
      logType: LogType.file,
      details: "Quarterly financial statements.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Located: employee_ssn_list_encrypted.csv.aes (234 KB)',
      logType: LogType.file,
      details: "AES encrypted, requires key.",
    ),
    AttackStep(
      displayText: '[COLLECTION] Located: credit_card_data_archive.zip (67 KB)',
      logType: LogType.file,
      details: "Protected with weak password 'password123'.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Located: project_phoenix_contracts.zip (1.8 MB)',
      logType: LogType.file,
      details: "Sensitive R&D contracts.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Attempting to decrypt employee_ssn_list_encrypted.csv.aes using common keys... Failed.',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Brute-forcing credit_card_data_archive.zip password... Success! Password: password123',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMMAND & CONTROL] Staging selected files for exfiltration in C:\\Windows\\Temp\\stage\\...',
      mitreId: 'T1074',
      mitreName: 'Data Staged',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          r'[COMMAND & CONTROL] Compressing staged files using 7zip with AES-256 encryption (password: ComplexP@$$w0rd!)...',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMMAND & CONTROL] Compressed archive: exfil_data.7z (3.9 MB)',
      logType: LogType.file,
    ),
    AttackStep(
      displayText:
          '[EXFILTRATION] Splitting archive into 8x 512KB chunks to evade DLP detection...',
      mitreId: 'T1030',
      mitreName: 'Data Transfer Size Limits',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMMAND & CONTROL] Establishing encrypted tunnel to C&C server 185.220.101.47:443 (HTTPS)...',
      mitreId: 'T1573.002',
      mitreName: 'Encrypted Channel: Asymmetric Cryptography',
      logType: LogType.network,
    ),
    AttackStep(
      displayText:
          '[EXFILTRATION] Using HTTPS traffic to blend with normal web activity (User-Agent: Chrome/99.0.4844.84)...',
      mitreId: 'T1071.001',
      mitreName: 'Application Layer Protocol: Web Protocols',
      logType: LogType.network,
    ),
    ...List.generate(
      8,
      (i) => AttackStep(
        displayText:
            '[EXFILTRATION] Uploading chunk ${i + 1}/8... [${"█".padRight(i + 1, "█")}${" ".padRight(8 - (i + 1), " ")}] ${((i + 1) / 8 * 100).toStringAsFixed(0)}%',
        logType: LogType.network,
        delayAfter: const Duration(milliseconds: 300),
      ),
    ),
    AttackStep(
      displayText: '[EXFILTRATION] All chunks uploaded successfully.',
      logType: LogType.network,
    ),
    AttackStep(
      displayText: '[IMPACT] Total data exfiltrated: 3.9 MB over 52 seconds.',
      logType: LogType.info,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Clearing event logs (System, Security, Application)...',
      mitreId: 'T1070.001',
      mitreName: 'Indicator Removal: Clear Windows Event Logs',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Removing temporary files and staging directory (C:\\Windows\\Temp\\stage\\)...',
      mitreId: 'T1070.004',
      mitreName: 'Indicator Removal: File Deletion',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Restoring Windows Defender settings and terminating malicious processes...',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMPLETION] Exfiltration complete. Connection to C&C server closed. Footprints minimized.',
      logType: LogType.info,
      delayAfter: const Duration(milliseconds: 1500),
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText:
          '🔴🔴🔴 SECURITY OPERATIONS CENTER (SOC) ALERT TRIGGERED 🔴🔴🔴',
      isCriticalAlert: true,
      logType: LogType.alert,
      delayAfter: const Duration(milliseconds: 1000),
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText: 'INCIDENT ID: INC-2024-0715-003',
      logType: LogType.alert,
    ),
    AttackStep(displayText: 'SEVERITY: CRITICAL', logType: LogType.alert),
    AttackStep(
      displayText:
          'CLASSIFICATION: Confirmed Data Breach | Active Exfiltration',
      logType: LogType.alert,
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText: 'Anomalous Activity Detected:',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Unusual outbound HTTPS traffic volume to untrusted IP (185.220.101.47)',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Multiple sensitive file accesses from non-standard process (explorer.exe child)',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Process injection detected: explorer.exe -> [random_name].exe',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Registry modifications in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText: '  • Windows Event Logs cleared or tampered.',
      logType: LogType.alert,
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText:
          '[MITIGATION] RECOMMENDATION: Activate Level 1 Incident Response Protocol IMMEDIATELY.',
      logType: LogType.mitigation,
    ),
    AttackStep(
      displayText:
          '[MITIGATION] NEXT STEPS: Isolate WORKSTATION-7834, preserve forensic evidence, block C&C IP.',
      logType: LogType.mitigation,
    ),
  ];

  final List<Map<String, String>> _realWorldExamples = [
    {
      'company': 'Equifax (2017)',
      'impact': '147 million records compromised',
      'method': 'Web application vulnerability (Apache Struts)',
      'data': 'SSNs, birth dates, addresses, credit card numbers',
      'cost': '\$1.4 billion+ in total costs',
      'lesson': 'Importance of timely patching and vulnerability management.',
    },
    {
      'company': 'Capital One (2019)',
      'impact': '100 million+ customers affected',
      'method': 'Misconfigured AWS S3 bucket (SSRF to WAF)',
      'data': 'Credit applications, SSNs, bank account numbers',
      'cost': '\$270 million in fines and costs',
      'lesson':
          'Cloud security misconfigurations are a major risk. Proper IAM and WAF tuning is crucial.',
    },
    {
      'company': 'SolarWinds (SUNBURST - 2020)',
      'impact': '18,000+ organizations compromised (incl. US Gov)',
      'method': 'Supply chain attack via trojanized software update',
      'data': 'Varied government and corporate sensitive data',
      'cost': 'Estimated \$100+ billion global impact',
      'lesson':
          'Supply chain attacks are sophisticated and hard to detect. Trust but verify software updates.',
    },
    {
      'company': 'Colonial Pipeline (2021)',
      'impact': 'US fuel supply disrupted for days',
      'method':
          'Ransomware (DarkSide) via compromised VPN (single-factor auth)',
      'data': 'Operational systems and business data',
      'cost': '\$4.4 million ransom paid + significant operational losses',
      'lesson':
          'Critical infrastructure is a target. Multi-Factor Authentication (MFA) is essential everywhere.',
    },
  ];

  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);

    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.05).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _timer?.cancel();
    _pulseController.dispose();
    super.dispose();
  }

  void _startSimulation() async {
    if (mounted) {
      setState(() {
        _simulationStarted = true;
        _simulationOutputSteps = [];
        _currentStepIndex = 0;
        _simulationComplete = false;
        _showEndButton = false;
      });
    }

    _timer = Timer.periodic(const Duration(milliseconds: 500), (timer) {
      if (!mounted) {
        timer.cancel();
        return;
      }
      if (_currentStepIndex < _scenarioAttackSteps.length) {
        final currentStep = _scenarioAttackSteps[_currentStepIndex];
        if (mounted) {
          setState(() {
            _simulationOutputSteps.add(currentStep);
            _currentStepIndex++;
          });
        }

        if (currentStep.isCriticalAlert) {
          HapticFeedback.heavyImpact();
        }
      } else {
        timer.cancel();
        if (mounted) {
          setState(() {
            _showEndButton = true;
          });
        }
      }
    });
  }

  void _endSimulation() {
    _timer?.cancel();
    if (mounted) {
      setState(() {
        _simulationStarted = false;
        _showEndButton = false;
        _simulationComplete = true;
      });
    }
  }

  void _resetSimulation() {
    _timer?.cancel();
    if (mounted) {
      setState(() {
        _simulationStarted = false;
        _showEndButton = false;
        _simulationComplete = false;
        _simulationOutputSteps = [];
        _currentStepIndex = 0;
      });
    }
  }

  Widget _buildRealWorldExample(Map<String, String> example) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(
                  Icons.warning_amber_rounded,
                  color: Colors.orangeAccent,
                  size: 24,
                ),
                const SizedBox(width: 10),
                Text(
                  example['company']!,
                  style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                    fontSize: 18,
                    color: Colors.orangeAccent,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            _buildDetailRow(
              'Impact:',
              example['impact']!,
              Colors.redAccent.shade100,
            ),
            _buildDetailRow(
              'Attack Method:',
              example['method']!,
              Colors.blueAccent.shade100,
            ),
            _buildDetailRow(
              'Data Compromised:',
              example['data']!,
              Colors.purpleAccent.shade100,
            ),
            _buildDetailRow(
              'Financial Cost:',
              example['cost']!,
              Colors.red.shade300,
            ),
            if (example['lesson'] != null && example['lesson']!.isNotEmpty)
              _buildDetailRow(
                'Key Lesson:',
                example['lesson']!,
                Colors.greenAccent.shade100,
                isLesson: true,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(
    String label,
    String value,
    Color labelColor, {
    bool isLesson = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: isLesson ? 90 : 130,
            child: Text(
              label,
              style: TextStyle(
                color: labelColor,
                fontWeight: FontWeight.w600,
                fontSize: 13.5,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: Colors.grey[300],
                fontSize: 13.5,
                height: 1.4,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getLogColor(LogType logType) {
    switch (logType) {
      case LogType.action:
        return Colors.cyanAccent.shade400;
      case LogType.info:
        return Colors.grey.shade400;
      case LogType.alert:
        return Colors.redAccent.shade400;
      case LogType.network:
        return Colors.lightBlueAccent.shade200;
      case LogType.file:
        return Colors.amberAccent.shade400;
      case LogType.discovery:
        return Colors.limeAccent.shade400;
      case LogType.mitigation:
        return Colors.greenAccent.shade400;
      default:
        return Colors.white;
    }
  }

  Widget _buildSimulationOutput() {
    ScrollController scrollController = ScrollController();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (scrollController.hasClients &&
          scrollController.position.hasContentDimensions) {
        scrollController.animateTo(
          scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeOut,
        );
      }
    });

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0C10),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[850]!),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.3 * 255).round()),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      child: ListView.builder(
        controller: scrollController,
        itemCount: _simulationOutputSteps.length,
        itemBuilder: (context, index) {
          final step = _simulationOutputSteps[index];
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  step.displayText,
                  style: TextStyle(
                    fontFamily: 'monospace',
                    fontSize: 13,
                    color: step.isCriticalAlert
                        ? Colors.red.shade400
                        : _getLogColor(step.logType),
                    fontWeight: step.isCriticalAlert
                        ? FontWeight.bold
                        : FontWeight.normal,
                    height: 1.4,
                  ),
                ),
                if (step.mitreId != null && step.mitreName != null)
                  Padding(
                    padding: const EdgeInsets.only(
                      left: 15.0,
                      top: 1.0,
                      bottom: 2.0,
                    ),
                    child: Text(
                      '└── MITRE: ${step.mitreId} - ${step.mitreName}',
                      style: TextStyle(
                        fontFamily: 'monospace',
                        fontSize: 11.5,
                        color: Colors.tealAccent.shade400.withAlpha(
                          (0.8 * 255).round(),
                        ),
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ),
                if (step.details != null)
                  Padding(
                    padding: const EdgeInsets.only(
                      left: 15.0,
                      top: 1.0,
                      bottom: 2.0,
                    ),
                    child: Text(
                      '    └── Details: ${step.details}',
                      style: TextStyle(
                        fontFamily: 'monospace',
                        fontSize: 11.5,
                        color: Colors.grey.shade500,
                      ),
                    ),
                  ),
              ],
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, color: Colors.white70),
          onPressed: () => Navigator.pop(context),
        ),
        title: Row(
          children: [
            AnimatedBuilder(
              animation: _pulseAnimation,
              builder: (context, child) {
                return Transform.scale(
                  scale: _simulationStarted ? _pulseAnimation.value : 1.0,
                  child: const Icon(
                    Icons.upload_file_rounded, // Changed to match option
                    size: 28,
                  ),
                );
              },
            ),
            const SizedBox(width: 10),
            const Text('Data Exfiltration Sim'),
          ],
        ),
        actions: [
          if (_simulationStarted || _simulationComplete)
            IconButton(
              icon: const Icon(Icons.refresh_rounded),
              onPressed: _resetSimulation,
              tooltip: 'Reset Simulation & Start Over',
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            if (!_simulationStarted && !_simulationComplete) ...[
              Expanded(
                child: Center(
                  child: SingleChildScrollView(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        AnimatedBuilder(
                          animation: _pulseAnimation,
                          builder: (context, child) {
                            return Transform.scale(
                              scale: _pulseAnimation.value,
                              child: Icon(
                                Icons.gpp_maybe_outlined,
                                size: 90,
                                color: Colors
                                    .purpleAccent
                                    .shade400, // Match option color
                              ),
                            );
                          },
                        ),
                        const SizedBox(height: 24),
                        Text(
                          'Data Exfiltration Attack',
                          style: Theme.of(context).textTheme.headlineLarge
                              ?.copyWith(fontSize: 26, color: Colors.white),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Witness a simulated cyber attack sequence leading to data theft. For educational purposes only.',
                          style: Theme.of(context).textTheme.bodyMedium
                              ?.copyWith(fontSize: 16, color: Colors.grey[400]),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 40),
                        ElevatedButton.icon(
                          onPressed: _startSimulation,
                          icon: const Icon(Icons.play_circle_fill_rounded),
                          label: const Text('Launch Simulation'),
                          style: Theme.of(context).elevatedButtonTheme.style
                              ?.copyWith(
                                backgroundColor: WidgetStateProperty.all(
                                  Colors
                                      .purpleAccent
                                      .shade400, // Match option color
                                ),
                              ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
            if (_simulationStarted) Expanded(child: _buildSimulationOutput()),
            if (_simulationComplete)
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Card(
                        elevation: 3,
                        margin: const EdgeInsets.only(bottom: 24),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(
                            color: Colors.blueAccent.withAlpha(
                              (0.5 * 255).round(),
                            ),
                            width: 1.5,
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(20.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                children: [
                                  const Icon(
                                    Icons.task_alt_rounded,
                                    color: Colors.blueAccent,
                                    size: 28,
                                  ),
                                  const SizedBox(width: 12),
                                  Text(
                                    'Simulation Complete: Post-Incident Analysis',
                                    style: Theme.of(context)
                                        .textTheme
                                        .headlineLarge
                                        ?.copyWith(
                                          fontSize: 20,
                                          color: Colors.blueAccent,
                                        ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 16),
                              Text(
                                'The preceding simulation demonstrated a multi-stage cyber attack leading to data exfiltration. Key phases included initial access, persistence, privilege escalation, discovery, collection, command & control, exfiltration, and defense evasion.',
                                style: Theme.of(context).textTheme.bodyMedium
                                    ?.copyWith(
                                      height: 1.6,
                                      color: Colors.grey[300],
                                    ),
                              ),
                              const SizedBox(height: 12),
                              Text(
                                'Detection & Prevention Opportunities:',
                                style: Theme.of(context).textTheme.headlineLarge
                                    ?.copyWith(
                                      color: Colors.white,
                                      fontSize: 16,
                                    ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                '• Endpoint Detection & Response (EDR) for process injection and anomalous behavior.\n'
                                '• Network monitoring/IDS/IPS for C&C traffic and large data outflows.\n'
                                '• Strong multi-factor authentication (MFA) to prevent initial access.\n'
                                '• Regular patching of vulnerabilities.\n'
                                '• User Account Control (UAC) hardening and principle of least privilege.\n'
                                '• Log monitoring and SIEM for early detection of suspicious activities.',
                                style: Theme.of(context).textTheme.bodyMedium
                                    ?.copyWith(
                                      height: 1.5,
                                      fontSize: 13.5,
                                      color: Colors.grey[400],
                                    ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      Text(
                        'Notable Real-World Data Breaches',
                        style: Theme.of(context).textTheme.headlineLarge
                            ?.copyWith(fontSize: 22, color: Colors.white),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Learn from major security incidents that have impacted millions worldwide:',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          fontSize: 14.5,
                          color: Colors.grey[400],
                        ),
                      ),
                      const SizedBox(height: 16),
                      ..._realWorldExamples.map(
                        (example) => _buildRealWorldExample(example),
                      ),
                      const SizedBox(height: 20),
                      Center(
                        child: ElevatedButton.icon(
                          icon: const Icon(Icons.refresh_rounded),
                          label: const Text('Run Simulation Again'),
                          onPressed: _resetSimulation,
                          style: Theme.of(context).elevatedButtonTheme.style
                              ?.copyWith(
                                backgroundColor: WidgetStateProperty.all(
                                  Colors.teal,
                                ),
                              ),
                        ),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            if (_showEndButton && !_simulationComplete)
              Center(
                child: Padding(
                  padding: const EdgeInsets.only(top: 20, bottom: 10),
                  child: AnimatedBuilder(
                    animation: _pulseController,
                    builder: (context, child) {
                      return Transform.scale(
                        scale: _pulseController.value * 0.05 + 0.975,
                        child: ElevatedButton.icon(
                          onPressed: _endSimulation,
                          icon: const Icon(Icons.assessment_rounded),
                          label: const Text('View Post-Incident Analysis'),
                          style: Theme.of(context).elevatedButtonTheme.style
                              ?.copyWith(
                                backgroundColor: WidgetStateProperty.all(
                                  Colors.orange.shade700,
                                ),
                                textStyle: WidgetStateProperty.all(
                                  const TextStyle(
                                    fontSize: 17,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                        ),
                      );
                    },
                  ),
                ),
              ),
          ],
        ),
      ),
      floatingActionButton:
          _simulationStarted && !_showEndButton && !_simulationComplete
          ? FloatingActionButton.extended(
              onPressed: () {
                _timer?.cancel();
                if (mounted) {
                  setState(() {
                    _showEndButton = true;
                  });
                }
              },
              backgroundColor: Colors.red.shade700,
              icon: const Icon(Icons.stop_circle_outlined, color: Colors.white),
              label: const Text(
                'Skip to End',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              tooltip: 'Emergency Stop & View Analysis',
            )
          : null,
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }
}

// --- Ransomware Simulation Code ---
class DeviceState {
  final List<String> vulnerabilities;
  final List<String> protections;
  final double securityScore;
  final Map<String, dynamic> systemInfo;
  final DateTime timestamp;

  DeviceState({
    required this.vulnerabilities,
    required this.protections,
    required this.securityScore,
    required this.systemInfo,
    required this.timestamp,
  });
}

class FakeAppLauncher extends StatelessWidget {
  const FakeAppLauncher({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Secure Calculator Pro",
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white70),
        ),
        backgroundColor: Colors.black87,
        elevation: 4,
        centerTitle: true,
        iconTheme: const IconThemeData(color: Colors.white70),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.black, Color(0xFF212121), Color(0xFF424242)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                padding: const EdgeInsets.all(32),
                decoration: BoxDecoration(
                  color: Colors.grey[900]?.withOpacity(0.8),
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.redAccent.withOpacity(0.3),
                      blurRadius: 20,
                      spreadRadius: 5,
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    const Icon(
                      Icons.calculate_outlined,
                      size: 80,
                      color: Colors.blueAccent,
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      "Advanced Calculator",
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 10),
                    const Text(
                      "Perform complex calculations securely",
                      style: TextStyle(fontSize: 14, color: Colors.grey),
                    ),
                    const SizedBox(height: 30),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.launch, size: 24),
                      label: const Text(
                        "Launch Calculator",
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blueAccent,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 32,
                          vertical: 16,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(15),
                        ),
                      ),
                      onPressed: () => Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const RansomwareSimulation(),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class RansomwareSimulation extends StatefulWidget {
  const RansomwareSimulation({super.key});

  @override
  _RansomwareSimulationState createState() => _RansomwareSimulationState();
}

class _RansomwareSimulationState extends State<RansomwareSimulation>
    with TickerProviderStateMixin {
  final AssetsAudioPlayer _audioPlayer = AssetsAudioPlayer();
  late AnimationController _glitchController;
  late AnimationController _pulseController;
  late ConfettiController _confettiController;
  late PageController _pageController;
  late Animation<double> _progressAnimation;
  late Animation<double> _pulseAnimation;
  late MatrixPainter _matrixPainter;
  final math.Random _random = math.Random();

  int _currentPage = 0;
  double _bitcoinAmount = 0.0543;
  bool _simulationActive = true;
  Timer? _countdownTimer;
  int _remainingTime = 86400;

  late DeviceState _beforeAttackState;
  late DeviceState _afterAttackState;

  @override
  void initState() {
    super.initState();
    _initializeControllers();
    _initializeDeviceStates();
    _startSimulation();
  }

  void _initializeControllers() {
    _glitchController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    )..repeat(reverse: true);

    _pulseController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    )..repeat(reverse: true);

    _confettiController = ConfettiController(
      duration: const Duration(seconds: 3),
    );
    _pageController = PageController(initialPage: 0);

    _progressAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(parent: _glitchController, curve: Curves.linear));

    _pulseAnimation = Tween<double>(begin: 0.7, end: 1.0).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );

    _matrixPainter = MatrixPainter(
      animation: _glitchController,
      random: _random,
    );
  }

  void _initializeDeviceStates() {
    _beforeAttackState = DeviceState(
      vulnerabilities: [
        'Outdated operating system',
        'Missing security patches',
        'Weak firewall configuration',
        'No real-time protection',
        'Disabled automatic updates',
        'Unencrypted sensitive data',
        'Admin privileges for standard users',
      ],
      protections: [
        'Basic antivirus (outdated)',
        'Windows Defender (disabled)',
        'Manual backup (last: 30 days ago)',
      ],
      securityScore: 3.2,
      systemInfo: {
        'OS': 'Windows 10 (Build 19041)',
        'Last Update': '45 days ago',
        'Firewall': 'Disabled',
        'Real-time Protection': 'Off',
        'Backup Status': 'Outdated',
        'Network': 'Public WiFi',
      },
      timestamp: DateTime.now().subtract(const Duration(minutes: 5)),
    );

    _afterAttackState = DeviceState(
      vulnerabilities: [
        'System compromised by ransomware',
        'Files encrypted with AES-256',
        'Registry modifications detected',
        'Network communication with C&C server',
        'Shadow copies deleted',
        'System restore points removed',
        'Boot sector potentially modified',
      ],
      protections: [
        'Antivirus bypassed',
        'Firewall rules modified',
        'Windows Defender quarantined',
      ],
      securityScore: 0.5,
      systemInfo: {
        'Encryption Status': '4,382 files encrypted',
        'Affected File Types': '.doc, .pdf, .jpg, .mp4, .xlsx',
        'Ransom Note': 'README_DECRYPT.txt',
        'Payment Address': '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2',
        'Time Remaining': '23:59:59',
        'Network Activity': 'Tor connections detected',
      },
      timestamp: DateTime.now(),
    );
  }

  void _startSimulation() {
    _playSound();
    _startVibration();
    _startCountdown();
  }

  void _startCountdown() {
    _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_remainingTime > 0 && _simulationActive && mounted) {
        setState(() => _remainingTime--);
      } else if (_remainingTime <= 0 && mounted) {
        _endSimulation();
        timer.cancel();
      }
    });
  }

  void _playSound() async {
    try {
      await _audioPlayer.open(
        Audio("assets/alert.mp3"),
        loopMode: LoopMode.single,
        volume: 0.6,
      );
    } catch (e) {
      debugPrint("Audio error: $e");
    }
  }

  void _startVibration() async {
    try {
      bool? hasVibrator = await Vibration.hasVibrator();
      if (hasVibrator ?? false) {
        Vibration.vibrate(pattern: [0, 500, 200, 500], repeat: 2);
      }
    } catch (e) {
      debugPrint("Vibration error: $e");
    }
  }

  void _triggerEffect() {
    if (!_simulationActive) return;

    if (_currentPage < 5) {
      if (mounted) {
        setState(() {
          _currentPage++;
          if (_currentPage == 3) _bitcoinAmount = 0.5;
        });
        _pageController.animateToPage(
          _currentPage,
          duration: const Duration(milliseconds: 500),
          curve: Curves.easeInOut,
        );
      }
    } else if (_currentPage == 5) {
      _endSimulation();
    }
  }

  void _endSimulation() {
    if (mounted) {
      setState(() {
        _simulationActive = false;
        _currentPage = 6;
      });
      _confettiController.play();
      _pageController.animateToPage(
        6,
        duration: const Duration(milliseconds: 500),
        curve: Curves.easeInOut,
      );
      _countdownTimer?.cancel();
    }
  }

  String _formatTime(int seconds) {
    int hours = seconds ~/ 3600;
    int minutes = (seconds % 3600) ~/ 60;
    int secs = seconds % 60;
    return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${secs.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: !_simulationActive || _currentPage >= 6,
      onPopInvoked: (didPop) {
        if (didPop) return;
        if (!_simulationActive || _currentPage >= 6) {
          if (Navigator.canPop(context)) Navigator.of(context).pop();
        }
      },
      child: Scaffold(
        backgroundColor: Colors.black,
        body: Stack(
          children: [
            PageView(
              physics: const NeverScrollableScrollPhysics(),
              controller: _pageController,
              onPageChanged: (page) {
                if (mounted) setState(() => _currentPage = page);
              },
              children: [
                _buildFakeCrashScreen(),
                _buildMatrixEffect(),
                _buildEncryptionScreen(),
                _buildRansomNote(),
                _buildPaymentScreen(),
                _buildFinalThreatScreen(),
                _buildResolutionScreen(),
              ],
            ),
            if (_simulationActive && _currentPage < 6)
              Positioned(
                top: 50,
                right: 20,
                child: ScaleTransition(
                  scale: _pulseAnimation,
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.9),
                      borderRadius: BorderRadius.circular(25),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.red.withOpacity(0.5),
                          blurRadius: 10,
                          spreadRadius: 2,
                        ),
                      ],
                    ),
                    child: IconButton(
                      icon: const Icon(
                        Icons.emergency,
                        color: Colors.white,
                        size: 28,
                      ),
                      onPressed: _endSimulation,
                      tooltip: 'End Simulation & View Analysis',
                    ),
                  ),
                ),
              ),
            if (_currentPage >= 6)
              Align(
                alignment: Alignment.topCenter,
                child: ConfettiWidget(
                  confettiController: _confettiController,
                  blastDirectionality: BlastDirectionality.explosive,
                  particleDrag: 0.05,
                  emissionFrequency: 0.05,
                  numberOfParticles: 100,
                  gravity: 0.2,
                  shouldLoop: false,
                  colors: const [
                    Colors.green,
                    Colors.blue,
                    Colors.pink,
                    Colors.orange,
                    Colors.purple,
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildFakeCrashScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        color: Colors.black,
        child: Stack(
          fit: StackFit.expand,
          children: [
            FadeTransition(
              opacity: _glitchController,
              child: Lottie.asset(
                'assets/glitch.json',
                repeat: true,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) => Container(
                  color: Colors.red.withOpacity(0.1),
                  child: const Center(
                    child: Icon(Icons.warning, color: Colors.red, size: 100),
                  ),
                ),
              ),
            ),
            Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  AnimatedTextKit(
                    animatedTexts: [
                      TyperAnimatedText(
                        '⚠ CRITICAL SYSTEM ERROR ⚠\n\nYOUR DEVICE IS COMPROMISED!\n\nUNAUTHORIZED ACCESS DETECTED',
                        textAlign: TextAlign.center,
                        textStyle: const TextStyle(
                          fontSize: 28,
                          color: Colors.redAccent,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(color: Colors.red, blurRadius: 15),
                            Shadow(color: Colors.white, blurRadius: 5),
                          ],
                        ),
                        speed: const Duration(milliseconds: 60),
                      ),
                    ],
                    totalRepeatCount: 1,
                    onTap: _triggerEffect,
                  ),
                  const SizedBox(height: 40),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 10,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: const Text(
                      'TAP TO CONTINUE',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMatrixEffect() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        color: Colors.black,
        child: Stack(
          fit: StackFit.expand,
          children: [
            CustomPaint(
              painter: _matrixPainter,
              size: Size.infinite,
              child: Container(),
            ),
            Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Lottie.asset(
                    'assets/data_breach.json',
                    width: 300,
                    repeat: true,
                    errorBuilder: (context, error, stackTrace) => const Icon(
                      Icons.security,
                      color: Colors.green,
                      size: 100,
                    ),
                  ),
                  const SizedBox(height: 30),
                  AnimatedTextKit(
                    animatedTexts: [
                      WavyAnimatedText(
                        'SCANNING SYSTEM FILES...',
                        textStyle: const TextStyle(
                          color: Colors.greenAccent,
                          fontSize: 24,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      WavyAnimatedText(
                        '4,382 FILES FOUND',
                        textStyle: const TextStyle(
                          color: Colors.yellowAccent,
                          fontSize: 28,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      WavyAnimatedText(
                        'INITIATING ENCRYPTION...',
                        textStyle: const TextStyle(
                          color: Colors.redAccent,
                          fontSize: 24,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                    repeatForever: true,
                    onTap: _triggerEffect,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEncryptionScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.black, Color(0xFFB71C1C), Colors.black],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Lottie.asset(
                'assets/lock.json',
                width: 250,
                repeat: true,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.lock, color: Colors.red, size: 100),
              ),
              const SizedBox(height: 30),
              AnimatedTextKit(
                animatedTexts: [
                  TyperAnimatedText(
                    'ENCRYPTING YOUR FILES...',
                    textStyle: const TextStyle(
                      color: Colors.white,
                      fontSize: 28,
                      fontFamily: 'Courier',
                      fontWeight: FontWeight.bold,
                      shadows: [Shadow(color: Colors.red, blurRadius: 10)],
                    ),
                    speed: const Duration(milliseconds: 100),
                  ),
                ],
                totalRepeatCount: 1,
              ),
              const SizedBox(height: 30),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 40),
                child: Column(
                  children: [
                    AnimatedBuilder(
                      animation: _progressAnimation,
                      builder: (context, child) {
                        return LinearProgressIndicator(
                          value: _progressAnimation.value,
                          backgroundColor: Colors.grey[800],
                          valueColor: const AlwaysStoppedAnimation<Color>(
                            Colors.redAccent,
                          ),
                          minHeight: 8,
                        );
                      },
                    ),
                    const SizedBox(height: 20),
                    AnimatedBuilder(
                      animation: _progressAnimation,
                      builder: (context, child) {
                        return Text(
                          '${(_progressAnimation.value * 100).toInt()}% Complete',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontFamily: 'Courier',
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 40),
              const Text(
                'Documents • Photos • Videos • Music\nSpreadsheets • Presentations • Archives',
                textAlign: TextAlign.center,
                style: TextStyle(
                  color: Colors.redAccent,
                  fontSize: 16,
                  fontFamily: 'Courier',
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildRansomNote() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        color: Colors.black87,
        padding: const EdgeInsets.all(20),
        child: Center(
          child: SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Lottie.asset(
                  'assets/skull.json',
                  width: 200,
                  repeat: true,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.warning, color: Colors.red, size: 100),
                ),
                const SizedBox(height: 20),
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.red.withOpacity(0.1),
                    border: Border.all(color: Colors.red, width: 2),
                    borderRadius: BorderRadius.circular(15),
                  ),
                  child: AnimatedTextKit(
                    animatedTexts: [
                      TyperAnimatedText(
                        '💀 YOUR FILES ARE ENCRYPTED! 💀\n\n'
                        '🔒 4,382 files have been locked with military-grade encryption\n\n'
                        '💰 Pay ${_bitcoinAmount.toStringAsFixed(4)} BTC to recover your data\n\n'
                        '⏰ You have ${_formatTime(_remainingTime)} remaining\n\n'
                        '📧 BTC Address:\n1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2\n\n'
                        '⚠ Do not restart your computer\n'
                        '⚠ Do not run antivirus software\n'
                        '⚠ Do not attempt file recovery\n\n'
                        'Failure to pay will result in permanent data loss!',
                        textAlign: TextAlign.center,
                        textStyle: const TextStyle(
                          color: Colors.redAccent,
                          fontSize: 16,
                          fontFamily: 'Courier',
                          height: 1.4,
                          fontWeight: FontWeight.bold,
                        ),
                        speed: const Duration(milliseconds: 30),
                      ),
                    ],
                    totalRepeatCount: 1,
                    onTap: _triggerEffect,
                  ),
                ),
                const SizedBox(height: 30),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      icon: const Icon(Icons.payment, size: 20),
                      label: const Text('PAY NOW'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[700],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 25,
                          vertical: 15,
                        ),
                      ),
                      onPressed: _triggerEffect,
                    ),
                    OutlinedButton.icon(
                      icon: const Icon(Icons.help_outline, size: 20),
                      label: const Text('HELP'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.orange,
                        side: const BorderSide(color: Colors.orange),
                      ),
                      onPressed: _triggerEffect,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildPaymentScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.black, Color(0xFFBF360C), Colors.black],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Lottie.asset(
                  'assets/bitcoin.json',
                  width: 280,
                  repeat: true,
                  errorBuilder: (context, error, stackTrace) => const Icon(
                    Icons.currency_bitcoin,
                    color: Colors.orange,
                    size: 100,
                  ),
                ),
                const SizedBox(height: 30),
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(15),
                    border: Border.all(color: Colors.orange, width: 2),
                  ),
                  child: Column(
                    children: [
                      const Text(
                        '🔄 PROCESSING PAYMENT',
                        style: TextStyle(
                          color: Colors.greenAccent,
                          fontSize: 24,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 20),
                      TweenAnimationBuilder<double>(
                        tween: Tween<double>(begin: 0.0, end: _bitcoinAmount),
                        duration: const Duration(seconds: 4),
                        builder: (context, double value, _) => Text(
                          '₿ ${value.toStringAsFixed(4)}',
                          style: const TextStyle(
                            fontSize: 42,
                            color: Colors.orangeAccent,
                            fontFamily: 'Courier',
                            fontWeight: FontWeight.bold,
                            shadows: [
                              Shadow(color: Colors.orange, blurRadius: 15),
                              Shadow(color: Colors.white, blurRadius: 5),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 20),
                      const Text(
                        'Transaction ID: 7f9a8b2c1e4d5f6g8h9i0j',
                        style: TextStyle(
                          color: Colors.grey,
                          fontSize: 14,
                          fontFamily: 'Courier',
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 30),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 40),
                  child: Column(
                    children: [
                      AnimatedBuilder(
                        animation: _progressAnimation,
                        builder: (context, child) {
                          return LinearProgressIndicator(
                            value: _progressAnimation.value,
                            backgroundColor: Colors.grey[800],
                            valueColor: const AlwaysStoppedAnimation<Color>(
                              Colors.orangeAccent,
                            ),
                            minHeight: 10,
                          );
                        },
                      ),
                      const SizedBox(height: 15),
                      const Text(
                        'Confirming blockchain transaction...\nPlease wait while we verify your payment',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Color(0xFFB0BEC5),
                          fontSize: 16,
                          fontFamily: 'Courier',
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 30),
                ElevatedButton.icon(
                  icon: const Icon(Icons.verified, size: 20),
                  label: const Text('VERIFY PAYMENT'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green[700],
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 30,
                      vertical: 15,
                    ),
                  ),
                  onPressed: _triggerEffect,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildFinalThreatScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF4A0E0E), Colors.black, Color(0xFF4A0E0E)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ScaleTransition(
                  scale: _pulseAnimation,
                  child: Container(
                    padding: const EdgeInsets.all(30),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.2),
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.red.withOpacity(0.5),
                          blurRadius: 30,
                          spreadRadius: 10,
                        ),
                      ],
                    ),
                    child: const Icon(
                      Icons.warning,
                      color: Colors.red,
                      size: 80,
                    ),
                  ),
                ),
                const SizedBox(height: 30),
                AnimatedTextKit(
                  animatedTexts: [
                    TyperAnimatedText(
                      '⚠ FINAL WARNING ⚠\n\n'
                      'PAYMENT VERIFICATION FAILED!\n\n'
                      'Your data will be PERMANENTLY DELETED in:\n'
                      '${_formatTime(_remainingTime)}\n\n'
                      'This is your LAST CHANCE to save your files!\n\n'
                      '🔥 Photos of your family\n'
                      '💼 Important work documents\n'
                      '🎓 School projects and memories\n'
                      '💰 Financial records\n\n'
                      'All will be GONE FOREVER!',
                      textAlign: TextAlign.center,
                      textStyle: const TextStyle(
                        color: Colors.redAccent,
                        fontSize: 20,
                        fontFamily: 'Courier',
                        fontWeight: FontWeight.bold,
                        height: 1.4,
                      ),
                      speed: const Duration(milliseconds: 50),
                    ),
                  ],
                  totalRepeatCount: 1,
                  onTap: _triggerEffect,
                ),
                const SizedBox(height: 40),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      icon: const Icon(Icons.payment, size: 20),
                      label: const Text('RETRY PAYMENT'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[800],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 15,
                        ),
                      ),
                      onPressed: _triggerEffect,
                    ),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.delete_forever, size: 20),
                      label: const Text('ACCEPT LOSS'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey[800],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 15,
                        ),
                      ),
                      onPressed: _triggerEffect,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildResolutionScreen() {
    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.black, Color(0xFF1B5E20), Colors.black],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        ),
      ),
      child: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Lottie.asset(
                'assets/success.json',
                width: 300,
                repeat: false,
                errorBuilder: (context, error, stackTrace) => const Icon(
                  Icons.check_circle,
                  color: Colors.green,
                  size: 100,
                ),
              ),
              const SizedBox(height: 30),
              AnimatedTextKit(
                animatedTexts: [
                  ScaleAnimatedText(
                    '🎉 SIMULATION COMPLETE! 🎉',
                    textStyle: const TextStyle(
                      color: Colors.greenAccent,
                      fontSize: 32,
                      fontFamily: 'Courier',
                      fontWeight: FontWeight.bold,
                    ),
                    duration: const Duration(milliseconds: 2000),
                  ),
                ],
                totalRepeatCount: 1,
              ),
              const SizedBox(height: 20),
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(15),
                  border: Border.all(color: Colors.green, width: 2),
                ),
                child: const Text(
                  '✅ This was a controlled simulation\n'
                  '✅ Your device and files are completely safe\n'
                  '✅ No actual malware was installed\n'
                  '✅ Educational purpose demonstration',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontFamily: 'Courier',
                    height: 1.5,
                  ),
                ),
              ),
              const SizedBox(height: 40),
              Wrap(
                alignment: WrapAlignment.center,
                spacing: 15,
                runSpacing: 15,
                children: [
                  ElevatedButton.icon(
                    icon: const Icon(Icons.analytics, size: 20),
                    label: const Text('BEFORE ATTACK'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue[700],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 15,
                      ),
                    ),
                    onPressed: () => _showAnalysis(context, true),
                  ),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.security, size: 20),
                    label: const Text('AFTER ATTACK'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange[700],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 15,
                      ),
                    ),
                    onPressed: () => _showAnalysis(context, false),
                  ),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.shield, size: 20),
                    label: const Text('PREVENTION'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple[700],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 15,
                      ),
                    ),
                    onPressed: () => _showPreventiveMeasures(context),
                  ),
                ],
              ),
              const SizedBox(height: 30),
              OutlinedButton.icon(
                icon: const Icon(Icons.exit_to_app, size: 24),
                label: const Text(
                  'EXIT SIMULATION',
                  style: TextStyle(fontSize: 18),
                ),
                // Inherits from OutlinedButtonTheme in MyApp
                onPressed: () {
                  if (Navigator.canPop(context)) {
                    Navigator.pop(context);
                  }
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showAnalysis(BuildContext context, bool beforeAttack) {
    final state = beforeAttack ? _beforeAttackState : _afterAttackState;
    final title = beforeAttack
        ? 'Device State: Before Attack'
        : 'Device State: After Attack';
    final color = beforeAttack ? Colors.blue : Colors.orange;

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.8,
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor, // Use main theme card color
          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          border: Border.all(color: color, width: 2),
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: color.withOpacity(0.2),
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(18),
                ),
              ),
              child: Row(
                children: [
                  Icon(
                    beforeAttack ? Icons.analytics : Icons.security,
                    color: color,
                    size: 30,
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: Text(
                      title,
                      style: TextStyle(
                        color: color,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  IconButton(
                    icon: Icon(
                      Icons.close,
                      color: Theme.of(context).colorScheme.onSurface,
                    ),
                    onPressed: () => Navigator.pop(context),
                  ),
                ],
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildAnalysisSection(
                      'Security Score',
                      '${state.securityScore}/10',
                      state.securityScore > 5 ? Colors.green : Colors.red,
                      Icons.score,
                    ),
                    const SizedBox(height: 20),
                    _buildAnalysisSection(
                      'System Information',
                      '',
                      Colors.blue,
                      Icons.computer,
                    ),
                    ...state.systemInfo.entries
                        .map(
                          (entry) => Padding(
                            padding: const EdgeInsets.only(left: 20, bottom: 8),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.arrow_right,
                                  color: Theme.of(
                                    context,
                                  ).textTheme.bodyMedium?.color,
                                  size: 16,
                                ),
                                const SizedBox(width: 10),
                                Expanded(
                                  child: Text(
                                    '${entry.key}: ${entry.value}',
                                    style: TextStyle(
                                      color: Theme.of(
                                        context,
                                      ).colorScheme.onSurface,
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                        .toList(),
                    const SizedBox(height: 20),
                    _buildAnalysisSection(
                      'Vulnerabilities Found',
                      '${state.vulnerabilities.length} issues',
                      Colors.red,
                      Icons.warning,
                    ),
                    ...state.vulnerabilities
                        .map(
                          (vuln) => Padding(
                            padding: const EdgeInsets.only(left: 20, bottom: 8),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error,
                                  color: Colors.red,
                                  size: 16,
                                ),
                                const SizedBox(width: 10),
                                Expanded(
                                  child: Text(
                                    vuln,
                                    style: TextStyle(
                                      color: Theme.of(
                                        context,
                                      ).colorScheme.onSurface,
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                        .toList(),
                    const SizedBox(height: 20),
                    _buildAnalysisSection(
                      'Active Protections',
                      '${state.protections.length} enabled',
                      state.protections.length > 2
                          ? Colors.green
                          : Colors.orange,
                      Icons.shield,
                    ),
                    ...state.protections
                        .map(
                          (protection) => Padding(
                            padding: const EdgeInsets.only(left: 20, bottom: 8),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.check_circle,
                                  color: Colors.green,
                                  size: 16,
                                ),
                                const SizedBox(width: 10),
                                Expanded(
                                  child: Text(
                                    protection,
                                    style: TextStyle(
                                      color: Theme.of(
                                        context,
                                      ).colorScheme.onSurface,
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                        .toList(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnalysisSection(
    String title,
    String subtitle,
    Color color,
    IconData icon,
  ) {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(width: 15),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    color: color,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                if (subtitle.isNotEmpty)
                  Text(
                    subtitle,
                    style: TextStyle(
                      color: Theme.of(context).textTheme.bodyMedium?.color,
                      fontSize: 14,
                    ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _showPreventiveMeasures(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.9,
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          border: Border.all(color: Colors.purple, width: 2),
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.purple.withOpacity(0.2),
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(18),
                ),
              ),
              child: Row(
                children: [
                  const Icon(Icons.shield, color: Colors.purple, size: 30),
                  const SizedBox(width: 15),
                  Expanded(
                    child: Text(
                      'Ransomware Prevention Guide',
                      style: TextStyle(
                        color: Colors.purple,
                        fontSize:
                            Theme.of(
                              context,
                            ).textTheme.headlineMedium?.fontSize ??
                            24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  IconButton(
                    icon: Icon(
                      Icons.close,
                      color: Theme.of(context).colorScheme.onSurface,
                    ),
                    onPressed: () => Navigator.pop(context),
                  ),
                ],
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildPreventionCategory(
                      'Essential Security Measures',
                      [
                        'Keep your operating system and software updated',
                        'Use reputable antivirus software with real-time protection',
                        'Enable automatic security updates',
                        'Use a firewall and keep it enabled',
                        'Regularly scan your system for malware',
                      ],
                      Colors.green,
                      Icons.security,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Backup Strategies',
                      [
                        'Follow the 3-2-1 backup rule (3 copies, 2 different media, 1 offsite)',
                        'Use automated backup solutions',
                        'Test your backups regularly',
                        'Keep offline backups disconnected from your network',
                        'Use cloud storage with versioning capabilities',
                      ],
                      Colors.blue,
                      Icons.backup,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Safe Computing Practices',
                      [
                        'Be cautious with email attachments and links',
                        'Download software only from official sources',
                        'Use strong, unique passwords for all accounts',
                        'Enable two-factor authentication where available',
                        'Avoid using admin accounts for daily activities',
                      ],
                      Colors.orange,
                      Icons.person_pin_circle,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Network Security',
                      [
                        'Use secure, encrypted WiFi networks',
                        'Avoid public WiFi for sensitive activities',
                        'Keep your router firmware updated',
                        'Use a VPN when connecting to public networks',
                        'Disable unnecessary network services',
                      ],
                      Colors.cyan,
                      Icons.wifi_lock,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Advanced Protection',
                      [
                        'Implement application whitelisting',
                        'Use endpoint detection and response (EDR) solutions',
                        'Enable controlled folder access',
                        'Regularly audit user permissions',
                        'Consider using isolated environments for risky activities',
                      ],
                      Colors.red,
                      Icons.admin_panel_settings,
                    ),
                    const SizedBox(height: 30),
                    Container(
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        color: Colors.yellow.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(15),
                        border: Border.all(color: Colors.yellow, width: 2),
                      ),
                      child: Column(
                        children: [
                          const Icon(
                            Icons.lightbulb,
                            color: Colors.yellow,
                            size: 30,
                          ),
                          const SizedBox(height: 10),
                          Text(
                            'Remember: Prevention is Always Better Than Recovery',
                            style: TextStyle(
                              color: Colors.yellow,
                              fontSize:
                                  Theme.of(
                                    context,
                                  ).textTheme.headlineMedium?.fontSize ??
                                  18,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 10),
                          Text(
                            'Implementing these measures significantly reduces your risk of falling victim to ransomware attacks.',
                            style: TextStyle(
                              color: Theme.of(context).colorScheme.onSurface,
                              fontSize: 14,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPreventionCategory(
    String title,
    List<String> items,
    Color color,
    IconData icon,
  ) {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(15),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: color, size: 24),
              const SizedBox(width: 15),
              Expanded(
                child: Text(
                  title,
                  style: TextStyle(
                    color: color,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 15),
          ...items
              .map(
                (item) => Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(Icons.check_circle, color: color, size: 16),
                      const SizedBox(width: 10),
                      Expanded(
                        child: Text(
                          item,
                          style: TextStyle(
                            color: Theme.of(context).colorScheme.onSurface,
                            fontSize: 14,
                            height: 1.3,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              )
              .toList(),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    _glitchController.dispose();
    _pulseController.dispose();
    _confettiController.dispose();
    _pageController.dispose();
    _countdownTimer?.cancel();
    super.dispose();
  }
}

class MatrixPainter extends CustomPainter {
  final Animation<double> animation;
  final math.Random random;
  final List<double> _yPositions = [];
  final List<double> _speeds = [];
  final List<List<String>> _characters;

  static const int _numColumns = 30;
  static const int _charsPerColumn = 35;

  MatrixPainter({required this.animation, required this.random})
    : _characters = List.generate(
        _numColumns,
        (i) => List.generate(
          _charsPerColumn,
          (j) => String.fromCharCode(0x30A0 + random.nextInt(96)),
        ),
      ),
      super(repaint: animation) {
    for (int i = 0; i < _numColumns; i++) {
      _yPositions.add(
        random.nextDouble() * -500.0 - (_charsPerColumn * 16.0 * 0.2),
      );
      _speeds.add(random.nextDouble() * 3.0 + 2.0);
    }
  }

  @override
  void paint(Canvas canvas, Size size) {
    const double charSize = 16.0;
    final double columnWidth = size.width / _numColumns;

    for (int i = 0; i < _numColumns; i++) {
      for (int j = 0; j < _charsPerColumn; j++) {
        final char = _characters[i][j];
        final opacity = (1.0 - (j / _charsPerColumn)).clamp(0.3, 1.0);
        final color = j == 0
            ? Colors.white
            : Colors.greenAccent.withOpacity(opacity);

        final textStyle = TextStyle(
          color: color,
          fontSize: charSize,
          fontFamily: 'Courier',
          fontWeight: j == 0 ? FontWeight.bold : FontWeight.normal,
          shadows: j == 0
              ? [const Shadow(color: Colors.white, blurRadius: 8)]
              : null,
        );

        final textSpan = TextSpan(text: char, style: textStyle);
        final textPainter = TextPainter(
          text: textSpan,
          textAlign: TextAlign.center,
          textDirection: TextDirection.ltr,
        )..layout(minWidth: columnWidth);

        double charYPos = _yPositions[i] + (j * charSize);

        if (charYPos > -charSize && charYPos < size.height) {
          textPainter.paint(canvas, Offset(i * columnWidth, charYPos));
        }

        if (j > 0 && random.nextInt(300) < 1) {
          _characters[i][j] = String.fromCharCode(0x30A0 + random.nextInt(96));
        }
      }

      _yPositions[i] += _speeds[i];

      if (_yPositions[i] > size.height) {
        _yPositions[i] =
            random.nextDouble() * -200.0 - (_charsPerColumn * charSize * 0.5);
        _speeds[i] = random.nextDouble() * 3.0 + 2.0;

        for (int k = 0; k < _charsPerColumn; k++) {
          _characters[i][k] = String.fromCharCode(0x30A0 + random.nextInt(96));
        }
      }
    }
  }

  @override
  bool shouldRepaint(covariant MatrixPainter oldDelegate) => true;
}


// --- NEW Email Phishing Simulation Code (from code 2, integrated) ---

// Supporting classes for Phishing Simulation (from code 2)
enum PhishingType {
  none,
  maliciousLink,
  credentialHarvesting,
  socialEngineering,
  maliciousAttachment,
}

class Email {
  final String id;
  final String sender;
  final String subject;
  final String preview;
  final String time;
  final bool isPhishing;
  final String senderAvatar;
  final String priority;
  bool isRead;
  final PhishingType phishingType;
  final String maliciousUrl;
  final List<String> phishingReasons;

  Email({
    required this.id,
    required this.sender,
    required this.subject,
    required this.preview,
    required this.time,
    required this.isPhishing,
    required this.senderAvatar,
    required this.priority,
    required this.isRead,
    required this.phishingType,
    this.maliciousUrl = '',
    this.phishingReasons = const [],
  });
}

class QuizQuestion {
  final String question;
  final List<String> options;
  final int correctAnswer;
  final String explanation;

  QuizQuestion({
    required this.question,
    required this.options,
    required this.correctAnswer,
    required this.explanation,
  });
}


class EmailInboxScreen extends StatefulWidget {
  const EmailInboxScreen({super.key}); // Changed Key? to super.key

  @override
  EmailInboxScreenState createState() => EmailInboxScreenState();
}

class EmailInboxScreenState extends State<EmailInboxScreen>
    with TickerProviderStateMixin {
  bool simulationStarted = false;
  bool deviceCompromised = false;
  bool showingMaliciousContent = false;
  bool showQuiz = false;
  List<Email> clickedEmails = [];
  List<String> attackSteps = [];
  List<String> stolenData = [];
  Email? currentEmail;
  
  late AnimationController _glitchController;
  late AnimationController _pulseController; // General pulse for UI elements
  late AnimationController _screenFlickerController;
  late AnimationController _textScrambleController;
  late AnimationController _errorPulseController; // For error specific pulsing
  
  Timer? attackTimer;
  Timer? dataTheftTimer;
  Timer? screenCorruptionTimer;
  int attackProgress = 0;
  int dataTheftProgress = 0;
  
  Color backgroundColor = Colors.grey[50]!; // Will be themed
  bool screenCorrupted = false;
  String scrambledText = "";
  
  final math.Random _random = math.Random(); // Changed to math.Random

  // Quiz questions
  int currentQuestionIndex = 0;
  int score = 0;
  List<bool> quizAnswers = [];
  
  final List<QuizQuestion> quizQuestions = [
    QuizQuestion(
      question: "What is the most effective way to verify a suspicious email claiming to be from your bank?",
      options: [
        "Click the link to check if it's legitimate",
        "Reply to the email asking for verification",
        "Contact your bank directly using their official phone number",
        "Forward the email to your colleagues for their opinion"
      ],
      correctAnswer: 2,
      explanation: "Always contact your bank directly using official contact information from their website or your statements, never through links or contact info in suspicious emails."
    ),
    QuizQuestion(
      question: "Which of these is a red flag in a phishing email?",
      options: [
        "Personalized greeting with your full name",
        "Urgent language like 'Act now or lose access'",
        "Professional email formatting",
        "Detailed company information"
      ],
      correctAnswer: 1,
      explanation: "Phishing emails often use urgent, threatening language to pressure victims into acting quickly without thinking critically."
    ),
    QuizQuestion(
      question: "What should you do if you accidentally clicked a malicious link?",
      options: [
        "Close the browser and hope for the best",
        "Immediately disconnect from internet, run antivirus scan, and report to IT",
        "Delete your browser history",
        "Change your email password only"
      ],
      correctAnswer: 1,
      explanation: "Quick action is crucial: disconnect from internet to prevent data theft, scan for malware, and report the incident to your IT security team."
    ),
    QuizQuestion(
      question: "How can you identify a spoofed email domain?",
      options: [
        "Look for spelling mistakes in the email content",
        "Check if the sender's domain matches the official organization exactly",
        "See if the email has attachments",
        "Check the time the email was sent"
      ],
      correctAnswer: 1,
      explanation: "Always verify the sender's domain character by character. Attackers often use domains like 'microsft.com' instead of 'microsoft.com'."
    ),
    QuizQuestion(
      question: "What is the best practice for handling suspicious attachments?",
      options: [
        "Open them in a virtual environment first",
        "Scan them with antivirus before opening",
        "Never open unexpected attachments, especially from unknown senders",
        "Only open if they have familiar file extensions"
      ],
      correctAnswer: 2,
      explanation: "The safest approach is to never open unexpected attachments. If you must verify, contact the sender through a separate, verified communication channel first."
    )
  ];

  final List<Email> emails = [
    // Legitimate emails
    Email(
      id: '1',
      sender: 'IT-Security@company.com',
      subject: 'Monthly Security Training Reminder',
      preview: 'Complete your mandatory cybersecurity training by Friday to maintain system access...',
      time: '2 hours ago',
      isPhishing: false,
      senderAvatar: '🛡️',
      priority: 'normal',
      isRead: false,
      phishingType: PhishingType.none,
    ),
    Email(
      id: '2',
      sender: 'payroll@company.com',
      subject: 'Direct Deposit Confirmation - Pay Period 24',
      preview: 'Your salary of \$4,247.83 has been deposited to account ending in 7823...',
      time: '5 hours ago',
      isPhishing: false,
      senderAvatar: '💰',
      priority: 'normal',
      isRead: true,
      phishingType: PhishingType.none,
    ),
    
    // PHISHING EMAIL 1 - Malicious Link
    Email(
      id: '3',
      sender: 'security-alert@bankofamerica-secure.net',
      subject: '🚨 URGENT: Suspicious Activity Detected on Your Account',
      preview: 'We have detected unusual activity on your account. Click here immediately to secure your account...',
      time: '1 hour ago',
      isPhishing: true,
      senderAvatar: '⚠️',
      priority: 'urgent',
      isRead: false,
      phishingType: PhishingType.maliciousLink,
      maliciousUrl: 'https://bankofamerica-secure.net/verify-account-now',
      phishingReasons: [
        'Domain spoofing: Uses similar but fake domain (bankofamerica-secure.net vs bankofamerica.com)',
        'Urgent language designed to create panic',
        'Requests immediate action without verification',
        'Generic greeting instead of personalized',
        'Suspicious URL structure'
      ],
    ),
    
    // PHISHING EMAIL 2 - Fake Login
    Email(
      id: '4',
      sender: 'no-reply@microsoft-support.com',
      subject: 'Your Microsoft Account Will Be Suspended',
      preview: 'Your account shows irregular sign-in attempts. Verify your identity to prevent suspension...',
      time: '3 hours ago',
      isPhishing: true,
      senderAvatar: '🔒',
      priority: 'urgent',
      isRead: false,
      phishingType: PhishingType.credentialHarvesting,
      maliciousUrl: 'https://microsoft-verify.secure-login.net',
      phishingReasons: [
        'Impersonation of Microsoft with fake domain',
        'Threatens account suspension to create urgency',
        'Requests credential verification through fake portal',
        'Uses official-looking branding to appear legitimate',
        'Pressures immediate action'
      ],
    ),
    
    // PHISHING EMAIL 3 - Social Engineering
    Email(
      id: '5',
      sender: 'ceo@company-internal.com',
      subject: 'CONFIDENTIAL: Urgent Wire Transfer Required',
      preview: 'I need you to process an urgent wire transfer for a confidential acquisition. Please handle this immediately...',
      time: '30 minutes ago',
      isPhishing: true,
      senderAvatar: '💼',
      priority: 'urgent',
      isRead: false,
      phishingType: PhishingType.socialEngineering,
      phishingReasons: [
        'CEO impersonation (Business Email Compromise)',
        'Creates false urgency and confidentiality',
        'Requests financial action without proper verification',
        'Uses authority manipulation',
        'Bypasses normal approval processes'
      ],
    ),
    
    // PHISHING EMAIL 4 - Attachment-based
    Email(
      id: '6',
      sender: 'invoice@trusted-vendor.co',
      subject: 'Outstanding Invoice #INV-2024-0847 - Payment Required',
      preview: 'Please find attached invoice for immediate payment. Open the attached document to view details...',
      time: '4 hours ago',
      isPhishing: true,
      senderAvatar: '📎',
      priority: 'normal',
      isRead: false,
      phishingType: PhishingType.maliciousAttachment,
      phishingReasons: [
        'Fake vendor impersonation',
        'Malicious attachment disguised as invoice',
        'Creates payment urgency',
        'Uses common business scenario',
        'Requests opening potentially harmful files'
      ],
    ),
  ];

  @override
  void initState() {
    super.initState();
    _glitchController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    )..repeat(reverse: true);
    _screenFlickerController = AnimationController(
      duration: const Duration(milliseconds: 100),
      vsync: this,
    );
    _textScrambleController = AnimationController(
      duration: const Duration(milliseconds: 50),
      vsync: this,
    );
    _errorPulseController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    // Auto-start simulation when screen loads for this version
    WidgetsBinding.instance.addPostFrameCallback((_) => startSimulation());
  }

  @override
  void dispose() {
    _glitchController.dispose();
    _pulseController.dispose();
    _screenFlickerController.dispose();
    _textScrambleController.dispose();
    _errorPulseController.dispose();
    attackTimer?.cancel();
    dataTheftTimer?.cancel();
    screenCorruptionTimer?.cancel();
    super.dispose();
  }

  void startSimulation() {
    if (mounted) {
      setState(() {
        simulationStarted = true;
        deviceCompromised = false;
        showingMaliciousContent = false;
        showQuiz = false;
        clickedEmails.clear();
        attackSteps.clear();
        stolenData.clear();
        attackProgress = 0;
        dataTheftProgress = 0;
        // backgroundColor will be set in build based on theme
        screenCorrupted = false;
        currentQuestionIndex = 0;
        score = 0;
        quizAnswers.clear();
        // Reset email read status
        for (var email in emails) {
          email.isRead = false;
        }
        // Make one email read by default for realism
        if (emails.isNotEmpty) emails.firstWhere((e) => !e.isPhishing, orElse: () => emails.first).isRead = true;

      });
    }
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('🛡 Phishing simulation started. Be careful which emails you click!'),
        backgroundColor: Theme.of(context).colorScheme.primary, // Theme color
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void onEmailClicked(Email email) {
    if (!simulationStarted) return;

    setState(() {
      if (!clickedEmails.contains(email)) clickedEmails.add(email);
      email.isRead = true;
      currentEmail = email;
    });

    if (email.isPhishing) {
      _showEmailContent(email);
    } else {
      _showEmailContent(email); // Show legitimate email content too
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('✅ Legitimate email opened safely'),
          backgroundColor: Colors.green[600], // Explicit color for safe
          duration: const Duration(seconds: 2),
        ),
      );
    }
  }

 void _showEmailContent(Email email) {
    final ThemeData currentTheme = Theme.of(context);
    showDialog(
      context: context,
      barrierDismissible: false, // User must interact
      builder: (context) => Dialog(
        backgroundColor: currentTheme.dialogTheme.backgroundColor ?? currentTheme.cardColor,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Container(
          width: MediaQuery.of(context).size.width * 0.9,
          height: MediaQuery.of(context).size.height * 0.8,
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Email header
              Row(
                children: [
                  Container(
                    width: 40,
                    height: 40,
                    decoration: BoxDecoration(
                      color: email.isPhishing 
                          ? currentTheme.colorScheme.error.withOpacity(0.2) 
                          : currentTheme.colorScheme.primary.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Center(child: Text(email.senderAvatar, style: const TextStyle(fontSize: 16))),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(email.sender, style: currentTheme.textTheme.titleSmall?.copyWith(fontWeight: FontWeight.bold)),
                        Text(email.time, style: currentTheme.textTheme.bodySmall?.copyWith(color: currentTheme.textTheme.bodySmall?.color?.withOpacity(0.7))),
                      ],
                    ),
                  ),
                  IconButton(
                    onPressed: () => Navigator.pop(context),
                    icon: Icon(Icons.close, color: currentTheme.colorScheme.onSurface),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Text(
                email.subject,
                style: currentTheme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 20),
              
              Expanded(
                child: SingleChildScrollView(
                  child: _buildEmailBody(email),
                ),
              ),
               if(!email.isPhishing) ...[
                const SizedBox(height: 20),
                Center(
                  child: ElevatedButton(
                    onPressed: () => Navigator.pop(context),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: currentTheme.colorScheme.primary,
                      foregroundColor: currentTheme.colorScheme.onPrimary,
                    ),
                    child: const Text('Close Email'),
                  ),
                )
              ]
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildEmailBody(Email email) {
    final ThemeData currentTheme = Theme.of(context);
    final Color phishingTextColor = currentTheme.colorScheme.onErrorContainer; // Use theme error text
    final Color normalTextColor = currentTheme.colorScheme.onSurface;

    if (!email.isPhishing) {
       return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Dear User,\n\n${email.preview}\n\nThis is a legitimate communication from our ${email.sender.split('@').first} department.\n\nThank you,\n${email.sender.split('@').first} Team",
            style: currentTheme.textTheme.bodyMedium?.copyWith(color: normalTextColor, height: 1.5),
          ),
        ],
      );
    }

    switch (email.phishingType) {
      case PhishingType.maliciousLink:
        return _buildMaliciousLinkEmail(email, currentTheme, phishingTextColor, normalTextColor);
      case PhishingType.credentialHarvesting:
        return _buildCredentialHarvestingEmail(email, currentTheme, phishingTextColor, normalTextColor);
      case PhishingType.socialEngineering:
        return _buildSocialEngineeringEmail(email, currentTheme, phishingTextColor, normalTextColor);
      case PhishingType.maliciousAttachment:
        return _buildMaliciousAttachmentEmail(email, currentTheme, phishingTextColor, normalTextColor);
      default:
        return Container();
    }
  }

  Widget _buildMaliciousLinkEmail(Email email, ThemeData currentTheme, Color phishingTextColor, Color normalTextColor) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: currentTheme.colorScheme.errorContainer.withOpacity(0.1),
            border: Border.all(color: currentTheme.colorScheme.error.withOpacity(0.3)),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.warning, color: currentTheme.colorScheme.error),
                  const SizedBox(width: 8),
                  Text(
                    'SECURITY ALERT',
                    style: TextStyle(
                      color: currentTheme.colorScheme.error,
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              Text(
                'We have detected suspicious activity on your Bank of America account. Multiple failed login attempts have been recorded from the following locations:',
                style: TextStyle(fontSize: 14, color: normalTextColor),
              ),
              const SizedBox(height: 12),
              Text('• Moscow, Russia - 3:42 AM EST', style: TextStyle(color: normalTextColor)),
              Text('• Beijing, China - 4:15 AM EST', style: TextStyle(color: normalTextColor)),
              Text('• Lagos, Nigeria - 4:33 AM EST', style: TextStyle(color: normalTextColor)),
              const SizedBox(height: 12),
              Text(
                'To secure your account immediately, you must verify your identity within the next 24 hours or your account will be temporarily suspended.',
                style: TextStyle(fontWeight: FontWeight.bold, color: phishingTextColor),
              ),
            ],
          ),
        ),
        const SizedBox(height: 20),
        Center(
          child: ElevatedButton(
            onPressed: () => _triggerMaliciousLinkAttack(email),
            style: ElevatedButton.styleFrom(
              backgroundColor: currentTheme.colorScheme.error,
              foregroundColor: currentTheme.colorScheme.onError,
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
            ),
            child: const Text(
              'VERIFY ACCOUNT NOW',
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
            ),
          ),
        ),
        const SizedBox(height: 12),
        Center(
          child: Text(
            email.maliciousUrl,
            style: TextStyle(
              color: currentTheme.colorScheme.primary, // Link color from theme
              decoration: TextDecoration.underline,
              fontSize: 12,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildCredentialHarvestingEmail(Email email, ThemeData currentTheme, Color phishingTextColor, Color normalTextColor) {
    final TextEditingController emailController = TextEditingController();
    final TextEditingController passwordController = TextEditingController();
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Your Microsoft account has been flagged for suspicious activity. To prevent account suspension, please verify your credentials below:',
          style: TextStyle(fontSize: 14, color: normalTextColor),
        ),
        const SizedBox(height: 20),
        Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: currentTheme.colorScheme.primaryContainer.withOpacity(0.1),
            border: Border.all(color: currentTheme.colorScheme.primary.withOpacity(0.3)),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    width: 32,
                    height: 32,
                    decoration: BoxDecoration(
                      color: currentTheme.colorScheme.primary,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: const Center(
                      child: Text(
                        'M',
                        style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Text(
                    'Microsoft Account Verification',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: currentTheme.colorScheme.primary,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              Text(
                'Email Address:',
                style: TextStyle(fontWeight: FontWeight.w500, color: normalTextColor),
              ),
              const SizedBox(height: 8),
              TextField(
                controller: emailController,
                style: TextStyle(color: normalTextColor),
                decoration: InputDecoration(
                  border: const OutlineInputBorder(),
                  hintText: 'Enter your email address',
                  hintStyle: TextStyle(color: normalTextColor.withOpacity(0.5)),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Password:',
                style: TextStyle(fontWeight: FontWeight.w500, color: normalTextColor),
              ),
              const SizedBox(height: 8),
              TextField(
                controller: passwordController,
                obscureText: true,
                style: TextStyle(color: normalTextColor),
                decoration: InputDecoration(
                  border: const OutlineInputBorder(),
                  hintText: 'Enter your password',
                  hintStyle: TextStyle(color: normalTextColor.withOpacity(0.5)),
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: () => _triggerCredentialHarvestingAttack(
                    email, 
                    emailController.text, 
                    passwordController.text
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: currentTheme.colorScheme.primary,
                    foregroundColor: currentTheme.colorScheme.onPrimary,
                    padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  ),
                  child: const Text('VERIFY ACCOUNT'),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildSocialEngineeringEmail(Email email, ThemeData currentTheme, Color phishingTextColor, Color normalTextColor) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: currentTheme.colorScheme.secondaryContainer.withOpacity(0.2),
            border: Border.all(color: currentTheme.colorScheme.secondary.withOpacity(0.4)),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            children: [
              Icon(Icons.lock, color: currentTheme.colorScheme.secondary),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  'CONFIDENTIAL - CEO URGENT REQUEST',
                  style: TextStyle(
                    color: currentTheme.colorScheme.secondary,
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
              ),
            ],
          ),
        ),
        const SizedBox(height: 20),
        Text(
          'Hello,',
          style: TextStyle(fontSize: 14, color: normalTextColor),
        ),
        const SizedBox(height: 12),
        Text(
          'I am currently in a board meeting and need you to process an urgent wire transfer for a confidential acquisition we are finalizing. This must be completed within the next hour to secure the deal.',
          style: TextStyle(fontSize: 14, color: normalTextColor),
        ),
        const SizedBox(height: 12),
        Text(
          'Transfer Details:',
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: normalTextColor),
        ),
        Text('Amount: \$50,000', style: TextStyle(color: normalTextColor)),
        Text('Account: 892-447-8923', style: TextStyle(color: normalTextColor)),
        Text('Routing: 021000021', style: TextStyle(color: normalTextColor)),
        Text('Beneficiary: Secure Holdings LLC', style: TextStyle(color: normalTextColor)),
        const SizedBox(height: 12),
        Text(
          'Please do not discuss this with anyone else in the company as it is highly confidential until the acquisition is announced next week.',
          style: TextStyle(fontSize: 14, fontStyle: FontStyle.italic, color: normalTextColor),
        ),
        const SizedBox(height: 12),
        Text(
          'Time is critical. Please confirm completion by replying to this email.',
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: phishingTextColor),
        ),
        const SizedBox(height: 20),
        Center(
          child: ElevatedButton(
            onPressed: () => _triggerSocialEngineeringAttack(email),
            style: ElevatedButton.styleFrom(
              backgroundColor: currentTheme.colorScheme.secondary,
              foregroundColor: currentTheme.colorScheme.onSecondary,
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
            ),
            child: const Text('PROCESS TRANSFER'),
          ),
        ),
      ],
    );
  }

  Widget _buildMaliciousAttachmentEmail(Email email, ThemeData currentTheme, Color phishingTextColor, Color normalTextColor) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Dear Valued Customer,',
          style: TextStyle(fontSize: 14, color: normalTextColor),
        ),
        const SizedBox(height: 12),
        Text(
          'We have attached your outstanding invoice for services rendered. Please review the attached document and process payment within 30 days to avoid late fees.',
          style: TextStyle(fontSize: 14, color: normalTextColor),
        ),
        const SizedBox(height: 20),
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: currentTheme.colorScheme.surfaceVariant.withOpacity(0.5),
            border: Border.all(color: currentTheme.colorScheme.outline.withOpacity(0.5)),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            children: [
              Icon(Icons.attachment, color: currentTheme.colorScheme.onSurfaceVariant),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Invoice_INV-2024-0847.pdf',
                      style: TextStyle(fontWeight: FontWeight.bold, color: normalTextColor),
                    ),
                    Text(
                      '2.4 MB • PDF Document',
                      style: TextStyle(color: normalTextColor.withOpacity(0.7), fontSize: 12),
                    ),
                  ],
                ),
              ),
              ElevatedButton(
                onPressed: () => _triggerMaliciousAttachmentAttack(email),
                style: ElevatedButton.styleFrom(
                  backgroundColor: currentTheme.colorScheme.primary,
                  foregroundColor: currentTheme.colorScheme.onPrimary,
                ),
                child: const Text('OPEN'),
              ),
            ],
          ),
        ),
        const SizedBox(height: 20),
        Text(
          'If you have any questions regarding this invoice, please contact our billing department.',
          style: TextStyle(fontSize: 14, color: normalTextColor),
        ),
        const SizedBox(height: 12),
        Text(
          'Thank you for your business.',
          style: TextStyle(fontSize: 14, color: normalTextColor),
        ),
      ],
    );
  }


  void _triggerMaliciousLinkAttack(Email email) {
    Navigator.pop(context); // Close email dialog
    HapticFeedback.heavyImpact();
    
    setState(() {
      attackSteps = [
        'Redirecting to malicious website...',
        'Loading fake banking portal...',
        'Installing browser exploit...',
        'Capturing keyboard input...',
        'Stealing stored passwords...',
        'Accessing banking credentials...',
        'Downloading personal files...',
        'Establishing remote access...',
        'SYSTEM COMPROMISED - Link Attack Successful',
      ];
      stolenData = [
        'Banking login credentials captured',
        'Credit card information: ****4567',
        'Personal documents accessed',
        'Browser history downloaded',
        'Saved passwords extracted',
        'Financial data compromised',
      ];
    });
    
    Future.delayed(const Duration(milliseconds: 500), () {
      simulateAdvancedAttack(email);
    });
  }

  void _triggerCredentialHarvestingAttack(Email email, String emailInput, String passwordInput) {
    Navigator.pop(context); // Close email dialog
    HapticFeedback.heavyImpact();
    
    setState(() {
      attackSteps = [
        'Validating credentials on fake portal...',
        'Harvesting login information...',
        'Testing credentials on multiple platforms...',
        'Accessing Microsoft account...',
        'Downloading OneDrive files...',
        'Accessing corporate email...',
        'Installing credential logger...',
        'Spreading to connected accounts...',
        'CREDENTIALS COMPROMISED - Harvesting Complete',
      ];
      stolenData = [
        'Email: ${emailInput.isNotEmpty ? emailInput : 'user@company.com'}',
        'Password: ${passwordInput.isNotEmpty ? '***${passwordInput.substring(passwordInput.length ~/2)}' : '***captured'}',
        'Microsoft account access granted',
        'Corporate email compromised',
        'OneDrive files downloaded',
        'Contacts list extracted',
      ];
    });
    
    Future.delayed(const Duration(milliseconds: 500), () {
      simulateAdvancedAttack(email);
    });
  }

  void _triggerSocialEngineeringAttack(Email email) {
    Navigator.pop(context); // Close email dialog
    HapticFeedback.heavyImpact();
    
    setState(() {
      attackSteps = [
        'Processing fraudulent wire transfer...',
        'Bypassing financial controls...',
        'Accessing corporate banking...',
        'Initiating unauthorized transaction...',
        'Transfer completed: \$50,000',
        'Covering digital tracks...',
        'Installing persistent access...',
        'Monitoring for additional opportunities...',
        'FINANCIAL FRAUD SUCCESSFUL - \$50,000 Stolen',
      ];
      stolenData = [
        'Wire transfer completed: \$50,000',
        'Corporate banking access gained',
        'Employee trust exploited',
        'Financial controls bypassed',
        'Additional transfer opportunities identified',
        'CEO impersonation successful',
      ];
    });
    
    Future.delayed(const Duration(milliseconds: 500), () {
      simulateAdvancedAttack(email);
    });
  }

  void _triggerMaliciousAttachmentAttack(Email email) {
    Navigator.pop(context); // Close email dialog
    HapticFeedback.heavyImpact();
    
    setState(() {
      attackSteps = [
        'Opening malicious PDF attachment...',
        'Executing embedded malware...',
        'Exploiting PDF vulnerability...',
        'Installing trojan backdoor...',
        'Escalating system privileges...',
        'Disabling security software...',
        'Encrypting user files...',
        'Activating ransomware payload...',
        'RANSOMWARE DEPLOYED - Files Encrypted',
      ];
      stolenData = [
        'Personal files encrypted: 1,247 files',
        'Ransomware deployed: \$5,000 demanded',
        'System backdoor installed',
        'Security software disabled',
        'Network access established',
        'Spreading to connected devices...',
      ];
    });
    
    Future.delayed(const Duration(milliseconds: 500), () {
      simulateAdvancedAttack(email);
    });
  }

  void simulateAdvancedAttack(Email phishingEmail) {
    if(!mounted) return;
    setState(() {
      deviceCompromised = true;
      showingMaliciousContent = true;
      backgroundColor = Theme.of(context).colorScheme.errorContainer.withOpacity(0.5); // Initial compromised color
    });

    _startScreenCorruption();
    
    attackTimer = Timer.periodic(const Duration(milliseconds: 800), (timer) {
      if (!mounted) {
        timer.cancel(); return;
      }
      if (attackProgress < attackSteps.length) {
        setState(() {
          attackProgress++;
        });
        
        HapticFeedback.selectionClick();
        
        if (attackProgress == 3) {
          _startDataTheft();
        }
        
        if (attackProgress > 6) {
          _glitchController.forward().then((_) {
            if(mounted) _glitchController.reverse();
          });
        }
        
      } else {
        timer.cancel();
        Future.delayed(const Duration(seconds: 2), () {
          if(mounted) _showCatastrophicResults(phishingEmail);
        });
      }
    });
  }

  void _startScreenCorruption() {
    screenCorruptionTimer = Timer.periodic(const Duration(milliseconds: 400), (timer) {
      if (mounted && deviceCompromised) {
        setState(() {
          final colors = [
            Theme.of(context).colorScheme.error, 
            Theme.of(context).colorScheme.errorContainer, 
            Colors.black, // Keep black for strong contrast
            Theme.of(context).colorScheme.error.withOpacity(0.7)
          ];
          backgroundColor = colors[_random.nextInt(colors.length)];
          screenCorrupted = !screenCorrupted;
        });
        
        _screenFlickerController.forward().then((_) {
          if(mounted) _screenFlickerController.reverse();
          });
        
        if (_random.nextInt(5) == 0) {
          HapticFeedback.heavyImpact();
        }
      } else {
        timer.cancel();
      }
    });
  }

void _startDataTheft() {
    dataTheftTimer = Timer.periodic(const Duration(milliseconds: 1000), (timer) {
      if (!mounted) { timer.cancel(); return; }
      if (dataTheftProgress < stolenData.length) {
        setState(() {
          dataTheftProgress++;
        });
        HapticFeedback.lightImpact();
      } else {
        timer.cancel();
      }
    });
  }

  void _showCatastrophicResults(Email phishingEmail) {
    final ThemeData currentTheme = Theme.of(context);
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => Dialog(
        backgroundColor: currentTheme.colorScheme.error, // Theme error color
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.warning,
                color: currentTheme.colorScheme.onError,
                size: 64,
              ),
              const SizedBox(height: 16),
              Text(
                'SYSTEM COMPROMISED',
                style: TextStyle(
                  color: currentTheme.colorScheme.onError,
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              Text(
                'Your device has been compromised by clicking on the phishing email!',
                style: TextStyle(color: currentTheme.colorScheme.onError.withOpacity(0.8), fontSize: 16),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: currentTheme.colorScheme.surface.withOpacity(0.1), // Darker container on error bg
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'What was stolen:',
                      style: TextStyle(
                        color: currentTheme.colorScheme.onError,
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                    const SizedBox(height: 8),
                    ...stolenData.take(dataTheftProgress).map((data) => 
                      Padding(
                        padding: const EdgeInsets.symmetric(vertical: 2),
                        child: Text(
                          '• $data',
                          style: TextStyle(color: currentTheme.colorScheme.onError.withOpacity(0.7), fontSize: 14),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);
                        _showPhishingAnalysis(phishingEmail);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: currentTheme.colorScheme.secondary, // Use theme secondary
                        foregroundColor: currentTheme.colorScheme.onSecondary,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      child: const Text('LEARN WHY'),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);
                        _startQuiz();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: currentTheme.colorScheme.primary, // Use theme primary
                        foregroundColor: currentTheme.colorScheme.onPrimary,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      child: const Text('TAKE QUIZ'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showPhishingAnalysis(Email email) {
    final ThemeData currentTheme = Theme.of(context);
    showDialog(
      context: context,
      builder: (context) => Dialog(
        backgroundColor: currentTheme.dialogTheme.backgroundColor ?? currentTheme.cardColor,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          width: MediaQuery.of(context).size.width * 0.9,
          height: MediaQuery.of(context).size.height * 0.85, // Increased height
          padding: const EdgeInsets.all(24),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.analytics, color: currentTheme.colorScheme.secondary, size: 32),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      'Phishing Analysis',
                      style: currentTheme.textTheme.headlineSmall?.copyWith(
                        color: currentTheme.colorScheme.secondary,
                      ),
                    ),
                  ),
                  IconButton(
                    onPressed: () => Navigator.pop(context),
                    icon: Icon(Icons.close, color: currentTheme.colorScheme.onSurface),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              Text(
                'Why this phishing attack succeeded:',
                style: currentTheme.textTheme.titleLarge,
              ),
              const SizedBox(height: 16),
              Expanded(
                child: ListView.builder(
                  itemCount: email.phishingReasons.length,
                  itemBuilder: (context, index) {
                    return Container(
                      margin: const EdgeInsets.only(bottom: 12),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: currentTheme.colorScheme.errorContainer.withOpacity(0.1),
                        border: Border(
                          left: BorderSide(
                            width: 4,
                            color: currentTheme.colorScheme.error,
                          ),
                        ),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        '${index + 1}. ${email.phishingReasons[index]}',
                        style: currentTheme.textTheme.bodyLarge,
                      ),
                    );
                  },
                ),
              ),
              const SizedBox(height: 20),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1), // Keep green for "safe" advice
                  border: Border.all(color: Colors.green.withOpacity(0.3)),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.shield, color: Colors.green[600]),
                        const SizedBox(width: 8),
                        Text(
                          'How to stay safe:',
                          style: currentTheme.textTheme.titleMedium?.copyWith(
                            color: Colors.green[700], // Keep green for positive advice
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    Text('• Always verify sender authenticity through official channels', style: currentTheme.textTheme.bodyMedium),
                    Text('• Check URLs carefully for suspicious domains', style: currentTheme.textTheme.bodyMedium),
                    Text('• Never provide credentials through email links', style: currentTheme.textTheme.bodyMedium),
                    Text('• Be suspicious of urgent or threatening language', style: currentTheme.textTheme.bodyMedium),
                    Text('• Use multi-factor authentication when available', style: currentTheme.textTheme.bodyMedium),
                  ],
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.pop(context);
                    _startQuiz();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: currentTheme.colorScheme.primary,
                    foregroundColor: currentTheme.colorScheme.onPrimary,
                    padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  ),
                  child: const Text('TAKE SECURITY QUIZ'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _startQuiz() {
    if(!mounted) return;
    setState(() {
      showQuiz = true;
      currentQuestionIndex = 0;
      score = 0;
      quizAnswers.clear();
      deviceCompromised = false; // Reset compromise state for quiz
      showingMaliciousContent = false;
      backgroundColor = Theme.of(context).scaffoldBackgroundColor; // Reset background
    });
    
    attackTimer?.cancel();
    dataTheftTimer?.cancel();
    screenCorruptionTimer?.cancel();
  }

  void _answerQuizQuestion(int selectedAnswer) {
    final ThemeData currentTheme = Theme.of(context);
    if(!mounted) return;
    setState(() {
      quizAnswers.add(selectedAnswer == quizQuestions[currentQuestionIndex].correctAnswer);
      if (selectedAnswer == quizQuestions[currentQuestionIndex].correctAnswer) {
        score++;
      }
    });

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: currentTheme.dialogTheme.backgroundColor,
        title: Text(
          selectedAnswer == quizQuestions[currentQuestionIndex].correctAnswer 
            ? '✅ Correct!' 
            : '❌ Incorrect',
          style: currentTheme.dialogTheme.titleTextStyle?.copyWith(
            color: selectedAnswer == quizQuestions[currentQuestionIndex].correctAnswer 
                ? Colors.green // Keep green for correct
                : currentTheme.colorScheme.error
          )
        ),
        content: Text(quizQuestions[currentQuestionIndex].explanation, style: currentTheme.dialogTheme.contentTextStyle),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              if (currentQuestionIndex < quizQuestions.length - 1) {
                if(mounted) {
                  setState(() {
                    currentQuestionIndex++;
                  });
                }
              } else {
                _showQuizResults();
              }
            },
            child: Text('Continue', style: TextStyle(color: currentTheme.colorScheme.secondary)),
          ),
        ],
      ),
    );
  }

  void _showQuizResults() {
    final ThemeData currentTheme = Theme.of(context);
    final percentage = (score / quizQuestions.length * 100).round();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: currentTheme.dialogTheme.backgroundColor,
        title: Text('Quiz Complete!', style: currentTheme.dialogTheme.titleTextStyle),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              percentage >= 80 ? Icons.emoji_events : Icons.school,
              size: 64,
              color: percentage >= 80 ? currentTheme.colorScheme.secondary : currentTheme.colorScheme.primary,
            ),
            const SizedBox(height: 16),
            Text(
              'Your Score: $score/${quizQuestions.length}',
              style: currentTheme.textTheme.headlineSmall,
            ),
            Text('$percentage%', style: currentTheme.textTheme.titleLarge),
            const SizedBox(height: 16),
            Text(
              percentage >= 80 
                ? 'Excellent! You have strong cybersecurity awareness.'
                : percentage >= 60
                  ? 'Good job! Consider reviewing cybersecurity best practices.'
                  : 'Please review cybersecurity training materials.',
              textAlign: TextAlign.center,
              style: currentTheme.textTheme.bodyLarge,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              startSimulation(); // Reset for a new phishing simulation attempt
            },
            child: Text('Start New Simulation', style: TextStyle(color: currentTheme.colorScheme.secondary)),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context); // Close quiz results
              Navigator.pop(context); // Go back from EmailInboxScreen to SimulationSelectionPage
            },
            style: ElevatedButton.styleFrom(backgroundColor: currentTheme.colorScheme.primary),
            child: Text('Exit to Simulations', style: TextStyle(color: currentTheme.colorScheme.onPrimary)),
          )
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final ThemeData currentTheme = Theme.of(context);
    // Update background color based on theme and state
    if (deviceCompromised) {
      // Keep the dynamic screen corruption background
    } else {
      backgroundColor = currentTheme.scaffoldBackgroundColor;
    }

    return Scaffold(
      backgroundColor: backgroundColor, // Use dynamic or themed background
      appBar: deviceCompromised || showQuiz ? null : AppBar(
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios_new, color: currentTheme.appBarTheme.iconTheme?.color ?? currentTheme.colorScheme.onPrimary),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text('Corporate Phishing Sim', style: currentTheme.appBarTheme.titleTextStyle),
        backgroundColor: currentTheme.appBarTheme.backgroundColor ?? currentTheme.colorScheme.primary,
        foregroundColor: currentTheme.appBarTheme.foregroundColor ?? currentTheme.colorScheme.onPrimary,
        elevation: 0.5,
        actions: [
          IconButton(
            onPressed: startSimulation, // This effectively resets the phishing sim
            icon: Icon(Icons.refresh, color: currentTheme.appBarTheme.iconTheme?.color ?? currentTheme.colorScheme.onPrimary),
            tooltip: 'Reset Simulation',
          ),
          IconButton(
            icon: Icon(Icons.info_outline, color: currentTheme.appBarTheme.iconTheme?.color ?? currentTheme.colorScheme.onPrimary),
            onPressed: () => showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('About This Simulation'),
                  content: const Text(
                      'This is an educational phishing simulation. Click emails to see how attacks work and learn to identify red flags. Your goal is to avoid being compromised and then test your knowledge with a quiz.'),
                  actions: [TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('Got It'))],
                ),
              )
          ),
        ],
      ),
      body: showQuiz ? _buildQuizInterface() : _buildEmailInterface(),
    );
  }

  Widget _buildQuizInterface() {
    final ThemeData currentTheme = Theme.of(context);
    if (currentQuestionIndex >= quizQuestions.length) {
      return Center(child: CircularProgressIndicator(color: currentTheme.colorScheme.primary));
    }

    final question = quizQuestions[currentQuestionIndex];
    
    return Container(
      padding: const EdgeInsets.all(20),
      color: currentTheme.scaffoldBackgroundColor, // Ensure quiz background matches theme
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
           AppBar( // Add a simple AppBar for the quiz section
            backgroundColor: Colors.transparent,
            elevation: 0,
            automaticallyImplyLeading: false, // No back button inside quiz page itself
            title: Text('Security Quiz', style: currentTheme.textTheme.headlineSmall),
            centerTitle: true,
          ),
          LinearProgressIndicator(
            value: (currentQuestionIndex + 1) / quizQuestions.length,
            backgroundColor: currentTheme.colorScheme.surfaceVariant,
            valueColor: AlwaysStoppedAnimation<Color>(currentTheme.colorScheme.primary),
          ),
          const SizedBox(height: 20),
          Text(
            'Question ${currentQuestionIndex + 1} of ${quizQuestions.length}',
            style: currentTheme.textTheme.titleMedium?.copyWith(
              color: currentTheme.colorScheme.onSurface.withOpacity(0.7),
            ),
          ),
          const SizedBox(height: 16),
          Text(
            question.question,
            style: currentTheme.textTheme.headlineSmall?.copyWith(
               color: currentTheme.colorScheme.onSurface,
            ),
          ),
          const SizedBox(height: 24),
          Expanded(
            child: ListView.builder(
              itemCount: question.options.length,
              itemBuilder: (context, index) {
                return Container(
                  margin: const EdgeInsets.only(bottom: 12),
                  child: Card(
                    elevation: currentTheme.cardTheme.elevation,
                    shape: currentTheme.cardTheme.shape,
                    color: currentTheme.cardColor,
                    child: InkWell(
                      onTap: () => _answerQuizQuestion(index),
                      borderRadius: BorderRadius.circular(8), // Match card shape
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        child: Row(
                          children: [
                            Container(
                              width: 32,
                              height: 32,
                              decoration: BoxDecoration(
                                color: currentTheme.colorScheme.primaryContainer,
                                borderRadius: BorderRadius.circular(16),
                              ),
                              child: Center(
                                child: Text(
                                  String.fromCharCode(65 + index), // A, B, C, D
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: currentTheme.colorScheme.onPrimaryContainer,
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 16),
                            Expanded(
                              child: Text(
                                question.options[index],
                                style: currentTheme.textTheme.bodyLarge?.copyWith(
                                  color: currentTheme.colorScheme.onSurface
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: currentTheme.colorScheme.primaryContainer.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              children: [
                Icon(Icons.lightbulb_outline, color: currentTheme.colorScheme.primary),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    'Take your time to think about each answer carefully.',
                    style: TextStyle(
                      color: currentTheme.colorScheme.onPrimaryContainer.withOpacity(0.8),
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmailInterface() {
    final ThemeData currentTheme = Theme.of(context);
    return AnimatedBuilder(
      animation: _glitchController, // You might want a different/no animation here if screen isn't corrupted
      builder: (context, child) {
        // Apply glitch effect only if deviceCompromised
        final transformOffset = deviceCompromised 
            ? Offset(_random.nextDouble() * 4 - 2, _random.nextDouble() * 4 - 2)
            : Offset.zero;

        return Transform.translate(
          offset: transformOffset,
          child: Column(
            children: [
              if (deviceCompromised) _buildAttackProgress(),
              Expanded(
                child: Container(
                  margin: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: currentTheme.cardColor, // Use themed card color for the inbox container
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.2), // Keep shadow for depth
                        blurRadius: 10,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: currentTheme.colorScheme.primary, // Themed header
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(12),
                            topRight: Radius.circular(12),
                          ),
                        ),
                        child: Row(
                          children: [
                            Icon(Icons.email, color: currentTheme.colorScheme.onPrimary),
                            const SizedBox(width: 12),
                            Text(
                              'Inbox (${emails.where((e) => !e.isRead).length})',
                              style: TextStyle(
                                color: currentTheme.colorScheme.onPrimary,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const Spacer(),
                            if (simulationStarted && !showQuiz)
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                decoration: BoxDecoration(
                                  color: deviceCompromised ? currentTheme.colorScheme.error : Colors.green[600], // Keep green for secure
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                child: Text(
                                  deviceCompromised ? 'COMPROMISED' : 'SECURE',
                                  style: TextStyle(
                                    color: deviceCompromised ? currentTheme.colorScheme.onError : Colors.white,
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                          ],
                        ),
                      ),
                      Expanded(
                        child: ListView.builder(
                          itemCount: emails.length,
                          itemBuilder: (context, index) {
                            final email = emails[index];
                            return _buildEmailTile(email);
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              if (!showQuiz && !deviceCompromised)
                Container(
                  margin: const EdgeInsets.all(16),
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: currentTheme.colorScheme.primaryContainer.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: currentTheme.colorScheme.primary.withOpacity(0.3)),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.info_outline, color: currentTheme.colorScheme.primary),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          'This is a phishing simulation. Click on emails to see what happens.',
                          style: TextStyle(
                            color: currentTheme.colorScheme.onPrimaryContainer.withOpacity(0.8),
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildAttackProgress() {
    final ThemeData currentTheme = Theme.of(context);
    return Container(
      margin: const EdgeInsets.fromLTRB(16,16,16,0), // No bottom margin if it's at the top
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: currentTheme.colorScheme.errorContainer, // Themed error container
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.warning, color: currentTheme.colorScheme.onErrorContainer),
              const SizedBox(width: 8),
              Text(
                'SECURITY BREACH IN PROGRESS',
                style: TextStyle(
                  color: currentTheme.colorScheme.onErrorContainer,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          ...attackSteps.take(attackProgress).map((step) => 
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 2),
              child: Text(
                '• $step',
                style: TextStyle(color: currentTheme.colorScheme.onErrorContainer.withOpacity(0.8), fontSize: 14),
              ),
            ),
          ),
          if (dataTheftProgress > 0) ...[
            const SizedBox(height: 12),
            Text(
              'Data Being Stolen:',
              style: TextStyle(
                color: currentTheme.colorScheme.onErrorContainer,
                fontWeight: FontWeight.bold,
              ),
            ),
            ...stolenData.take(dataTheftProgress).map((data) => 
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 1),
                child: Text(
                  '• $data',
                  style: TextStyle(color: currentTheme.colorScheme.secondary, fontSize: 12), // Using secondary for stolen data text
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildEmailTile(Email email) {
    final ThemeData currentTheme = Theme.of(context);
    bool isDark = currentTheme.brightness == Brightness.dark;

    return Container(
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: currentTheme.dividerColor.withOpacity(0.5), width: 1),
        ),
        color: email.isRead 
            ? (isDark ? currentTheme.cardColor.withAlpha(200) : Colors.grey[100]) 
            : currentTheme.cardColor,
      ),
      child: ListTile(
        onTap: () => onEmailClicked(email),
        leading: Container(
          width: 48,
          height: 48,
          decoration: BoxDecoration(
            color: email.isPhishing 
                ? currentTheme.colorScheme.errorContainer.withOpacity(0.3) 
                : currentTheme.colorScheme.primaryContainer.withOpacity(0.3),
            borderRadius: BorderRadius.circular(24),
          ),
          child: Center(
            child: Text(
              email.senderAvatar,
              style: const TextStyle(fontSize: 20),
            ),
          ),
        ),
        title: Row(
          children: [
            Expanded(
              child: Text(
                email.sender,
                style: TextStyle(
                  fontWeight: email.isRead ? FontWeight.normal : FontWeight.bold,
                  fontSize: 16,
                  color: currentTheme.colorScheme.onSurface,
                ),
                overflow: TextOverflow.ellipsis,
              ),
            ),
            if (email.priority == 'urgent')
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: currentTheme.colorScheme.error,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  'URGENT',
                  style: TextStyle(
                    color: currentTheme.colorScheme.onError,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            const SizedBox(width: 8),
            Text(
              email.time,
              style: TextStyle(
                color: currentTheme.colorScheme.onSurface.withOpacity(0.6),
                fontSize: 12,
              ),
            ),
          ],
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 4),
            Text(
              email.subject,
              style: TextStyle(
                fontWeight: email.isRead ? FontWeight.normal : FontWeight.w600,
                fontSize: 14,
                color: currentTheme.colorScheme.onSurface.withOpacity(0.85),
              ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 2),
            Text(
              email.preview,
              style: TextStyle(
                color: currentTheme.colorScheme.onSurface.withOpacity(0.7),
                fontSize: 13,
              ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            if (!email.isRead)
              Container(
                width: 8,
                height: 8,
                decoration: BoxDecoration(
                  color: currentTheme.colorScheme.primary,
                  borderRadius: BorderRadius.circular(4),
                ),
              ),
            if (email.isPhishing)
              Icon(
                Icons.warning_amber,
                size: 16,
                color: currentTheme.colorScheme.error,
              ),
          ],
        ),
      ),
    );
  }
}


// --- QR Code Phishing Simulation (Digital Heist Forensics) ---
// (Code from the second file, integrated here)

class ForensicEvent {
  final DateTime timestamp;
  final String type;
  final String title;
  final String details;
  final String severity;
  final int phase;

  const ForensicEvent({
    required this.timestamp,
    required this.type,
    required this.title,
    required this.details,
    required this.severity,
    required this.phase,
  });
}

class PreventiveMeasure {
  final String title;
  final String description;
  final String implementation;
  final String priority;
  final String cost;
  final int effectiveness;
  final String action;
  final String relatedVulnerability;

  const PreventiveMeasure({
    required this.title,
    required this.description,
    required this.implementation,
    required this.priority,
    required this.cost,
    required this.effectiveness,
    required this.action,
    required this.relatedVulnerability,
  });
}

class AttackAnalysis {
  final String attackVector;
  final List<String> exploitedVulnerabilities;
  final Map<String, dynamic> impactAssessment;
  final String attackSophistication;
  final String detectionTime;
  final String recoveryProbability;
  final String similarIncidentsIncrease;
  final List<int> relatedEventIndices;

  const AttackAnalysis({
    required this.attackVector,
    required this.exploitedVulnerabilities,
    required this.impactAssessment,
    required this.attackSophistication,
    required this.detectionTime,
    required this.recoveryProbability,
    required this.similarIncidentsIncrease,
    required this.relatedEventIndices,
  });
}

class SecuritySimulatorDashboard extends StatefulWidget {
  const SecuritySimulatorDashboard({super.key});

  @override
  SecuritySimulatorDashboardState createState() =>
      SecuritySimulatorDashboardState();
}

class SecuritySimulatorDashboardState extends State<SecuritySimulatorDashboard>
    with TickerProviderStateMixin {
  late TabController _tabController;
  late AnimationController _phoneController;
  late AnimationController _alertController;
  late AnimationController _scanController;
  late Animation<double> _scanAnimation;
  late AnimationController _balanceController;
  late Animation<double> _balanceAnimation;
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;
  late AnimationController _trustScoreController;
  late Animation<Color?> _trustScoreColorAnimation;

  bool _simulationActive = false;
  int _currentPhase = 0;
  final String _victimName = "Rajesh Kumar";
  double _victimBalance = 45000.0;
  double _stolenAmount = 0.0;
  AttackAnalysis? _attackAnalysis;
  int _quizScore = 0;
  bool _qrScanned = false;
  bool _transactionConfirmed = false;
  final math.Random _random = math.Random(); // Explicitly use math.Random
  final AssetsAudioPlayer _audioPlayer = AssetsAudioPlayer();
  final List<ForensicEvent> _forensicTimeline = [];
  int _highlightedEventIndex = -1;

  final Map<String, dynamic> _deviceState = {
    'isScreenOn': true,
    'currentApp': 'Home',
    'locationServicesOn': true,
    'wifiConnected': true,
    'batteryLevel': 78,
    'notifications': <String>[],
    'recentApps': ['WhatsApp', 'Instagram', 'Chrome'],
    'locationLat': 28.7041,
    'locationLng': 77.1025,
    'trustScore': 95,
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);

    _phoneController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _alertController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _scanController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
    _scanAnimation = Tween<double>(begin: 0, end: 200).animate(
      CurvedAnimation(parent: _scanController, curve: Curves.easeInOut),
    );
    _balanceController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
    _balanceAnimation =
        Tween<double>(begin: _victimBalance, end: _victimBalance).animate(
          CurvedAnimation(parent: _balanceController, curve: Curves.easeOut),
        );
    _pulseController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);
    _pulseAnimation = Tween<double>(begin: 1.0, end: 1.1).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    _trustScoreController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );
    _trustScoreColorAnimation = ColorTween(begin: Colors.green, end: Colors.red)
        .animate(
          CurvedAnimation(
            parent: _trustScoreController,
            curve: Curves.easeInOut,
          ),
        );

    _initializeAudio();
  }

  void _initializeAudio() {
    // Audio files are opened on demand in _playSound to avoid issues with multiple player instances
    // or pre-loading if this screen isn't immediately used.
  }

  void _playSound(String type) async {
    // Ensure the asset paths are correct based on your pubspec.yaml
    // The first part of the code has alert.mp3.
    // This simulation needs beep.mp3 and error.mp3.
    String assetPath;
    switch (type) {
      case 'alert':
        assetPath = 'assets/alert.mp3';
        break;
      case 'beep':
        assetPath = 'assets/beep.mp3';
        break;
      case 'error':
        assetPath = 'assets/error.mp3';
        break;
      default:
        debugPrint('Unknown sound type: $type');
        return;
    }
    try {
      await _audioPlayer.open(
        Audio(assetPath),
        autoStart: true,
        showNotification: false, // Recommended for in-app sounds
        volume: 0.5, // Adjust volume as needed
      );
    } catch (e) {
      debugPrint('Failed to play sound "$type" from "$assetPath": $e');
      // Optionally, show a silent error to the user or log more robustly.
    }
  }

  void _startAdvancedSimulation() async {
    if (_simulationActive) return;
    setState(() {
      _simulationActive = true;
      _currentPhase = 0;
      _stolenAmount = 0.0;
      _victimBalance = 45000.0;
      _attackAnalysis = null;
      _quizScore = 0;
      _qrScanned = false;
      _transactionConfirmed = false;
      _forensicTimeline.clear();
      _deviceState['notifications'].clear();
      _deviceState['trustScore'] = 95;
      _trustScoreController.reset(); // Reset animation for trust score color
      _balanceAnimation =
          Tween<double>(begin: _victimBalance, end: _victimBalance).animate(
            CurvedAnimation(parent: _balanceController, curve: Curves.easeOut),
          );
      _balanceController.reset();
      _deviceState['currentApp'] = 'Home';
      _deviceState['locationLat'] = 28.7041;
      _deviceState['locationLng'] = 77.1025;
      _highlightedEventIndex = -1;
    });

    try {
      await _simulatePhase1();
      if (!mounted) return;
      await _simulatePhase2();
      if (!mounted) return;
      await _simulatePhase3();
      if (!mounted) return;
      await _simulatePhase4();
    } catch (e) {
      debugPrint('Simulation error: $e');
      if (mounted) {
        setState(() {
          (_deviceState['notifications'] as List<String>).add(
            'ERROR: Simulation failed',
          );
          _playSound('error');
        });
      }
    }
    if (mounted) {
      setState(() {
        _simulationActive = false;
        _tabController.animateTo(2); // Go to Forensic Analysis tab
      });
    }
  }

  Future<void> _simulatePhase1() async {
    if (!mounted) return;
    setState(() => _currentPhase = 1);
    _addForensicEvent(
      "RECON_START",
      "Attack preparation initiated",
      details: "Attacker scans Delhi Metro Station Rajiv Chowk for targets",
      phase: 1,
    );
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    _addForensicEvent(
      "TARGET_IDENTIFIED",
      "Victim device detected",
      details:
          "Samsung Galaxy S21, Android 13, HDFC Banking App v4.2.1 installed",
      phase: 1,
    );
    await Future.delayed(const Duration(seconds: 1));
    if (!mounted) return;
    _addForensicEvent(
      "SOCIAL_ENGINEERING",
      "Fake QR codes deployed",
      details: "Printed stickers: 'HDFC Bank - Scan for ₹500 Cashback!'",
      phase: 1,
    );
    await Future.delayed(const Duration(seconds: 2));
  }

  Future<void> _simulatePhase2() async {
    if (!mounted) return;
    setState(() {
      _currentPhase = 2;
      _deviceState['currentApp'] = 'Camera';
    });
    _phoneController.forward();
    _playSound('beep');
    await Future.delayed(const Duration(seconds: 3));
    if (!mounted) return;
    setState(() {
      _qrScanned = true;
      (_deviceState['notifications'] as List<String>).add(
        'Camera accessed QR code',
      );
    });
    _addForensicEvent(
      "QR_SCAN",
      "Malicious QR code scanned",
      details:
          "QR payload: hdfc://transfer?amt=25000&to=ACC789456123&ref=CASHBACK",
      phase: 2,
    );
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    setState(() {
      _deviceState['currentApp'] = 'HDFC Bank';
      _deviceState['trustScore'] = 85;
      _trustScoreColorAnimation =
          ColorTween(
            begin: Colors.green,
            end: Colors.orange, // Mid-way color
          ).animate(
            CurvedAnimation(
              parent: _trustScoreController,
              curve: Curves.easeInOut,
            ),
          );
      _trustScoreController.forward(from: 0.0);
    });
    _addForensicEvent(
      "DEEPLINK_TRIGGER",
      "Banking app auto-launched",
      details:
          "Deep link bypassed user confirmation, app opened with pre-filled transfer form",
      phase: 2,
    );
    await Future.delayed(const Duration(seconds: 3));
  }

  Future<void> _simulatePhase3() async {
    if (!mounted) return;
    setState(() => _currentPhase = 3);
    _addForensicEvent(
      "GPS_SPOOF_START",
      "Location manipulation initiated",
      details: "Fake GPS coordinates: 28.6129, 77.2295 (HDFC Corporate Office)",
      phase: 3,
    );
    if (!mounted) return;
    setState(() {
      _deviceState['locationLat'] = 28.6129;
      _deviceState['locationLng'] = 77.2295;
      _deviceState['trustScore'] = 60;
      _trustScoreColorAnimation =
          ColorTween(
            begin: Colors.orange, // from previous state
            end: Colors.red.shade300, // more severe
          ).animate(
            CurvedAnimation(
              parent: _trustScoreController,
              curve: Curves.easeInOut,
            ),
          );
      _trustScoreController.forward(from: 0.0);
    });
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    _addForensicEvent(
      "GEOFENCE_BYPASS",
      "Trusted location spoofed",
      details: "Device appears to be at HDFC HQ, security protocols relaxed",
      phase: 3,
    );
    await Future.delayed(const Duration(seconds: 1));
    if (!mounted) return;
    _stolenAmount = (_random.nextInt(41) + 10) * 1000.0; // math.Random used
    _addForensicEvent(
      "FORM_PREFILL",
      "Transfer form auto-populated",
      details:
          "Amount: ₹${_stolenAmount.toStringAsFixed(0)}, Recipient: 789456123@paytm, Reference: CASHBACK",
      phase: 3,
    );
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    setState(() {
      _transactionConfirmed = true;
      _deviceState['trustScore'] = 25;
      _trustScoreColorAnimation =
          ColorTween(
            begin: Colors.red.shade300, // from previous state
            end: Colors.red.shade700, // most severe
          ).animate(
            CurvedAnimation(
              parent: _trustScoreController,
              curve: Curves.easeInOut,
            ),
          );
      _trustScoreController.forward(from: 0.0);
    });
    _addForensicEvent(
      "SESSION_HIJACK",
      "Authentication bypassed",
      details:
          "Cached biometric token exploited, 2FA skipped due to 'trusted location'",
      phase: 3,
    );
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    _alertController.forward();
    _playSound('error');
    _addForensicEvent(
      "TRANSACTION_EXECUTED",
      "Fraudulent transfer completed",
      details:
          "₹${_stolenAmount.toStringAsFixed(0)} transferred to attacker's mule account",
      severity: "CRITICAL",
      phase: 3,
    );
    if (!mounted) return;
    setState(() {
      _balanceAnimation =
          Tween<double>(
            begin: _victimBalance,
            end: _victimBalance - _stolenAmount,
          ).animate(
            CurvedAnimation(parent: _balanceController, curve: Curves.easeOut),
          );
    });
    _balanceController.forward(from: 0.0);
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    setState(() {
      _victimBalance -= _stolenAmount;
      (_deviceState['notifications'] as List<String>).add(
        'Transaction Successful: ₹${_stolenAmount.toStringAsFixed(0)} sent',
      );
      _deviceState['trustScore'] = 15;
      _trustScoreColorAnimation =
          ColorTween(
            begin: Colors.red.shade700, // from previous state
            end: Colors.red.shade900, // even more severe
          ).animate(
            CurvedAnimation(
              parent: _trustScoreController,
              curve: Curves.easeInOut,
            ),
          );
      _trustScoreController.forward(from: 0.0);
    });
    _addForensicEvent(
      "EVIDENCE_CLEANUP",
      "Attack traces obscured",
      details: "Transaction categorized as 'cashback promotion', logs modified",
      phase: 3,
    );
    await Future.delayed(const Duration(seconds: 2));
  }

  Future<void> _simulatePhase4() async {
    if (!mounted) return;
    setState(() => _currentPhase = 4);
    _addForensicEvent(
      "FRAUD_DISCOVERY",
      "Victim discovers unauthorized transaction",
      details: "SMS alert received 45 minutes post-transaction",
      phase: 4,
    );
    if (!mounted) return;
    setState(() {
      (_deviceState['notifications'] as List<String>).add(
        'ALERT: Unusual activity detected',
      );
    });
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    _generateAttackAnalysis();
    _addForensicEvent(
      "FORENSIC_ANALYSIS",
      "Post-incident investigation initiated",
      details: "Digital forensics team analyzes attack vector and evidence",
      phase: 4,
    );
    await Future.delayed(const Duration(seconds: 3));
  }

  void _generateAttackAnalysis() {
    if (!mounted) return;
    setState(() {
      _attackAnalysis = AttackAnalysis(
        attackVector: 'QR Code Phishing + GPS Spoofing',
        exploitedVulnerabilities: [
          'Unvalidated deep link parameters (Event #${_forensicTimeline.indexWhere((e) => e.type == "DEEPLINK_TRIGGER") + 1})',
          'Geo-fence reliance without multi-factor verification (Event #${_forensicTimeline.indexWhere((e) => e.type == "GEOFENCE_BYPASS") + 1})',
          'Cached authentication token exploitation (Event #${_forensicTimeline.indexWhere((e) => e.type == "SESSION_HIJACK") + 1})',
          'Insufficient user confirmation for high-value transactions (Event #${_forensicTimeline.indexWhere((e) => e.type == "FORM_PREFILL") + 1})',
        ],
        impactAssessment: {
          'financialLoss': _stolenAmount,
          'dataCompromised': [
            'Banking credentials',
            'Location data',
            'Transaction history',
          ],
          'reputationalDamage': 'High',
          'regulatoryImplications': 'PCI DSS violation, RBI guidelines breach',
        },
        attackSophistication: 'Advanced',
        detectionTime: '45 minutes',
        recoveryProbability: '35%',
        similarIncidentsIncrease: '340% in last 6 months',
        relatedEventIndices: _forensicTimeline
            .asMap()
            .entries
            .where(
              (e) => [
                'QR_SCAN',
                'DEEPLINK_TRIGGER',
                'GPS_SPOOF_START',
                'GEOFENCE_BYPASS',
                'FORM_PREFILL',
                'SESSION_HIJACK',
                'TRANSACTION_EXECUTED',
              ].contains(e.value.type),
            )
            .map((e) => e.key)
            .toList(),
      );
    });
  }

  void _addForensicEvent(
    String type,
    String title, {
    String? details,
    String severity = "INFO",
    required int phase,
  }) {
    if (!mounted) return;
    setState(() {
      _forensicTimeline.add(
        ForensicEvent(
          timestamp: DateTime.now(),
          type: type,
          title: title,
          details: details ?? "",
          severity: severity,
          phase: phase,
        ),
      );
      _highlightedEventIndex = _forensicTimeline.length - 1;
    });
  }

  @override
  Widget build(BuildContext context) {
    ThemeData theme = Theme.of(context);
    return Scaffold(
      // AppBar is part of the TabBar system below, matching the new structure.
      // Theming is inherited from MyApp.
      body: NestedScrollView(
        // To allow AppBar to collapse/scroll with content if desired, or just provide structure
        headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
          return <Widget>[
            SliverAppBar(
              title: Text(
                'Digital Heist Forensics',
                style: theme.textTheme.headlineSmall?.copyWith(
                  color: theme.colorScheme.onBackground,
                ),
              ),
              pinned: true, // Keeps AppBar visible
              floating: true, // AppBar reappears when scrolling up
              backgroundColor: theme.scaffoldBackgroundColor.withOpacity(
                0.85,
              ), // Semi-transparent
              elevation: 2,
              bottom: TabBar(
                controller: _tabController,
                tabs: const [
                  Tab(icon: Icon(Icons.phone_android), text: 'Victim Device'),
                  Tab(icon: Icon(Icons.timeline), text: 'Attack Timeline'),
                  Tab(icon: Icon(Icons.analytics), text: 'Forensic Analysis'),
                  Tab(icon: Icon(Icons.security), text: 'Prevention'),
                ],
              ),
            ),
          ];
        },
        body: Container(
          // Main content area with gradient
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Color(0xFF0A0A0A), Color(0xFF1A1A2E), Color(0xFF16213E)],
            ),
          ),
          child: Column(
            children: [
              _buildControlHeader(),
              Expanded(
                child: TabBarView(
                  controller: _tabController,
                  children: [
                    _buildVictimDeviceView(),
                    _buildTimelineView(),
                    _buildForensicAnalysisView(),
                    _buildPreventionView(),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildControlHeader() {
    ThemeData theme = Theme.of(context);
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            theme.colorScheme.error.withOpacity(0.3),
            theme.colorScheme.secondary.withOpacity(0.3),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: theme.colorScheme.error.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(Icons.security, color: theme.colorScheme.error, size: 28),
              const SizedBox(width: 12),
              Text(
                'Advanced Mobile Security Simulation',
                style: theme.textTheme.titleLarge?.copyWith(
                  color: theme.colorScheme.onSurface,
                ),
              ),
              const Spacer(),
              if (_simulationActive)
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 4,
                  ),
                  decoration: BoxDecoration(
                    color: theme.colorScheme.error.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: theme.colorScheme.error),
                  ),
                  child: Text(
                    'PHASE $_currentPhase ACTIVE',
                    style: TextStyle(color: theme.colorScheme.error),
                  ),
                ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _simulationActive
                      ? null
                      : _startAdvancedSimulation,
                  icon: const Icon(Icons.play_circle_filled),
                  label: const Text('Start Simulation'),
                  style: theme.elevatedButtonTheme.style?.copyWith(
                    backgroundColor: WidgetStateProperty.resolveWith<Color?>((
                      Set<WidgetState> states,
                    ) {
                      if (states.contains(WidgetState.disabled)) {
                        return theme.colorScheme.primary.withOpacity(0.5);
                      }
                      return theme
                          .colorScheme
                          .primary; // Use the component's default.
                    }),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              AnimatedBuilder(
                animation: _balanceAnimation,
                builder: (context, child) {
                  return Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.green[800]!.withOpacity(0.3),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.green[300]!),
                    ),
                    child: Text(
                      'Balance: ₹${_balanceAnimation.value.toStringAsFixed(0)}',
                      style: TextStyle(
                        color: Colors.green[300],
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildVictimDeviceView() {
    ThemeData theme = Theme.of(context);
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          Container(
            width: 300,
            height: 600,
            decoration: BoxDecoration(
              color: Colors.black,
              borderRadius: BorderRadius.circular(30),
              border: Border.all(color: Colors.grey[800]!, width: 8),
              boxShadow: [
                BoxShadow(
                  color: Colors.cyan.withOpacity(0.3),
                  blurRadius: 20,
                  spreadRadius: 5,
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(22),
              child: Column(
                children: [
                  Container(
                    height: 30,
                    color: Colors.black,
                    child: Row(
                      children: [
                        const SizedBox(width: 20),
                        Text(
                          '${DateTime.now().hour}:${DateTime.now().minute.toString().padLeft(2, '0')}',
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 12,
                          ),
                        ),
                        const Spacer(),
                        const Icon(
                          Icons.signal_cellular_4_bar,
                          color: Colors.white70,
                          size: 12,
                        ),
                        const Icon(Icons.wifi, color: Colors.white70, size: 12),
                        Text(
                          '${_deviceState['batteryLevel']}%',
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 12,
                          ),
                        ),
                        const Icon(
                          Icons.battery_full,
                          color: Colors.white70,
                          size: 12,
                        ),
                        const SizedBox(width: 10),
                      ],
                    ),
                  ),
                  Expanded(
                    child: Container(
                      color: const Color(
                        0xFF1E1E1E,
                      ), // Kept specific for phone screen background
                      child: _buildPhoneScreen(),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 20),
          _buildDeviceStatusCards(),
        ],
      ),
    );
  }

  Widget _buildPhoneScreen() {
    switch (_deviceState['currentApp']) {
      case 'Camera':
        return _buildCameraScreen();
      case 'HDFC Bank':
        return _buildBankingScreen();
      default:
        return _buildHomeScreen();
    }
  }

  Widget _buildHomeScreen() {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: [
          const SizedBox(height: 40),
          const Text(
            'Home Screen',
            style: TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 40),
          GridView.count(
            crossAxisCount: 3,
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            children: [
              _buildAppIcon('HDFC Bank', Icons.account_balance, Colors.blue),
              _buildAppIcon(
                'Camera',
                Icons.camera_alt,
                Colors.grey,
                onTap: () {
                  if (_currentPhase == 2 && !_qrScanned) {
                    setState(() => _deviceState['currentApp'] = 'Camera');
                  }
                },
              ),
              _buildAppIcon('WhatsApp', Icons.chat, Colors.green),
              _buildAppIcon('Chrome', Icons.web, Colors.orange),
              _buildAppIcon('Settings', Icons.settings, Colors.grey),
              _buildAppIcon('Maps', Icons.map, Colors.blue),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildCameraScreen() {
    return Container(
      color: Colors.black,
      child: Stack(
        children: [
          Center(
            child: AnimatedBuilder(
              animation: _pulseAnimation,
              builder: (context, child) {
                return Transform.scale(
                  scale: _pulseAnimation.value,
                  child: Container(
                    width: 200,
                    height: 200,
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.cyan[300]!, width: 3),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Stack(
                      children: [
                        GridView.count(
                          crossAxisCount: 10,
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          children: List.generate(100, (index) {
                            return Container(
                              color: _random.nextBool()
                                  ? Colors.black
                                  : Colors.white,
                            );
                          }),
                        ),
                        AnimatedBuilder(
                          animation: _scanAnimation,
                          builder: (context, child) {
                            return Positioned(
                              top: _scanAnimation.value,
                              left: 0,
                              right: 0,
                              child: Container(
                                height: 2,
                                color: Colors.cyan[300]!.withOpacity(0.5),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
          Positioned(
            bottom: 100,
            left: 0,
            right: 0,
            child: Center(
              child: _qrScanned
                  ? Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.red[900]!.withOpacity(0.8),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Text(
                        '⚠ QR Code Scanned!',
                        style: TextStyle(color: Colors.white),
                      ),
                    )
                  : ElevatedButton(
                      // This button will use MyApp's ElevatedButtonTheme
                      onPressed: _currentPhase == 2 && !_qrScanned
                          ? () {
                              setState(() {
                                _qrScanned = true;
                                (_deviceState['notifications'] as List<String>)
                                    .add('Camera accessed QR code');
                                _playSound('beep');
                              });
                            }
                          : null,
                      child: const Text('Scan QR Code'),
                    ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBankingScreen() {
    ThemeData theme = Theme.of(context);
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: [
          Container(
            height: 60,
            color: Colors.blue[800], // Specific color for this UI element
            child: Center(
              child: Text(
                'HDFC Bank - $_victimName',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          const SizedBox(height: 20),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.red[900]!.withOpacity(0.3), // Specific color
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.red[300]!), // Specific color
            ),
            child: Column(
              children: [
                const Text(
                  'Transfer Money',
                  style: TextStyle(color: Colors.white, fontSize: 16),
                ),
                const SizedBox(height: 16),
                _buildTextField('To Account', '789456123@paytm'),
                _buildTextField(
                  'Amount',
                  '₹${_stolenAmount.toStringAsFixed(0)}',
                ),
                _buildTextField('Reference', 'CASHBACK'),
                const SizedBox(height: 16),
                SizedBox(
                  // Ensure button takes full width
                  width: double.infinity,
                  child: ElevatedButton(
                    // Uses MyApp's ElevatedButtonTheme but with overridden colors
                    onPressed: _currentPhase == 3 && !_transactionConfirmed
                        ? () {
                            setState(() {
                              _transactionConfirmed = true;
                              _deviceState['trustScore'] = 25;
                              _trustScoreColorAnimation =
                                  ColorTween(
                                    begin: _trustScoreColorAnimation.value,
                                    end: Colors.red.shade900,
                                  ).animate(
                                    CurvedAnimation(
                                      parent: _trustScoreController,
                                      curve: Curves.easeInOut,
                                    ),
                                  );
                              _trustScoreController.forward(from: 0.0);
                              _playSound('error');
                            });
                          }
                        : null,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: _transactionConfirmed
                          ? Colors.grey[700]
                          : Colors.red[600],
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                    child: Text(
                      _transactionConfirmed
                          ? 'Transfer Completed'
                          : 'Confirm ₹${_stolenAmount.toStringAsFixed(0)}',
                    ),
                  ),
                ),
              ],
            ),
          ),
          if (_stolenAmount > 0 && _transactionConfirmed) ...[
            const SizedBox(height: 20),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.red[800]!.withOpacity(0.3), // Specific color
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.red[300]!), // Specific color
              ),
              child: Text(
                '⚠ Unauthorized Transaction: ₹${_stolenAmount.toStringAsFixed(0)} Deducted',
                textAlign: TextAlign.center,
                style: TextStyle(
                  color: Colors.red[300],
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildTextField(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(label, style: TextStyle(color: Colors.grey[300], fontSize: 12)),
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey[600]!),
              borderRadius: BorderRadius.circular(4),
            ),
            child: Text(value, style: const TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  Widget _buildAppIcon(
    String name,
    IconData icon,
    Color color, {
    VoidCallback? onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              color: color,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(icon, color: Colors.white, size: 30),
          ),
          const SizedBox(height: 4),
          Text(
            name,
            style: const TextStyle(color: Colors.white70, fontSize: 10),
          ),
        ],
      ),
    );
  }

  Widget _buildDeviceStatusCards() {
    ThemeData theme = Theme.of(context);
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              child: AnimatedBuilder(
                animation: _trustScoreColorAnimation,
                builder: (context, child) {
                  return _buildStatusCard(
                    'Trust Score',
                    '${_deviceState['trustScore']}%',
                    _trustScoreColorAnimation.value ?? Colors.green,
                    Icons.security,
                  );
                },
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildStatusCard(
                'Location',
                '${_deviceState['locationLat'].toStringAsFixed(4)}, ${_deviceState['locationLng'].toStringAsFixed(4)}',
                Colors.blue, // Kept specific color
                Icons.location_on,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: theme.cardColor.withOpacity(0.7), // Use theme card color
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[700]!),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Recent Notifications',
                style: theme.textTheme.titleSmall?.copyWith(
                  color: theme.colorScheme.onSurface,
                ),
              ),
              const SizedBox(height: 8),
              ...(_deviceState['notifications'] as List<String>).reversed
                  .take(3)
                  .map(
                    (notification) => Padding(
                      padding: const EdgeInsets.symmetric(vertical: 2),
                      child: Text(
                        '• $notification',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.7),
                        ),
                      ),
                    ),
                  )
                  .toList(),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildStatusCard(
    String title,
    String value,
    Color color,
    IconData icon,
  ) {
    ThemeData theme = Theme.of(context);
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1), // Specific color logic
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: color.withOpacity(0.3),
        ), // Specific color logic
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            title,
            style: theme.textTheme.labelMedium?.copyWith(
              color: color.withOpacity(0.8),
            ),
          ),
          Text(
            value,
            style: TextStyle(color: color, fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
  }

  Widget _buildTimelineView() {
    ThemeData theme = Theme.of(context);
    final phaseNames = {
      1: 'Reconnaissance',
      2: 'Initial Access',
      3: 'Execution & Exfiltration',
      4: 'Discovery & Analysis',
    };

    List<Widget> items = [];
    int currentPhaseRendered = 0;
    for (int i = 0; i < _forensicTimeline.length; i++) {
      final event = _forensicTimeline[i];
      if (event.phase > currentPhaseRendered) {
        items.add(_buildPhaseHeader(phaseNames[event.phase]!, event.phase));
        currentPhaseRendered = event.phase;
      }
      items.add(
        GestureDetector(
          onTap: () {
            setState(() {
              _highlightedEventIndex = i;
              if ([
                'QR_SCAN',
                'DEEPLINK_TRIGGER',
                'FORM_PREFILL',
                'TRANSACTION_EXECUTED',
              ].contains(event.type)) {
                _tabController.animateTo(0); // Victim Device Tab
                _deviceState['currentApp'] =
                    (event.type == 'QR_SCAN' || event.type == 'CAMERA_ACTION')
                    ? 'Camera'
                    : 'HDFC Bank';
              } else if (['FORENSIC_ANALYSIS'].contains(event.type)) {
                _tabController.animateTo(2); // Forensic Analysis Tab
              }
            });
          },
          child: _buildTimelineItem(event, i),
        ),
      );
    }
    // If no events yet but simulation started, show Phase 1 header
    if (_simulationActive &&
        _forensicTimeline.isEmpty &&
        currentPhaseRendered == 0) {
      items.insert(0, _buildPhaseHeader(phaseNames[1]!, 1));
    }

    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Attack Timeline & Digital Forensics',
            style: theme.textTheme.titleLarge?.copyWith(
              color: theme.colorScheme.onSurface,
            ),
          ),
          const SizedBox(height: 16),
          Expanded(child: ListView(children: items)),
        ],
      ),
    );
  }

  Widget _buildPhaseHeader(String title, int phase) {
    ThemeData theme = Theme.of(context);
    return Container(
      margin: const EdgeInsets.only(bottom: 16, top: 8),
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.cyan[900]!.withOpacity(0.3), // Specific color
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.cyan[300]!), // Specific color
      ),
      child: Text(
        'Phase $phase: $title',
        style: TextStyle(color: Colors.cyan[300], fontWeight: FontWeight.bold),
      ),
    );
  }

  Widget _buildTimelineItem(ForensicEvent event, int index) {
    ThemeData theme = Theme.of(context);
    Color severityColor;
    switch (event.severity) {
      case 'CRITICAL':
        severityColor = theme.colorScheme.error; // Use theme error color
        break;
      case 'HIGH':
        severityColor = Colors.orange[300]!; // Specific color
        break;
      case 'MEDIUM':
        severityColor = Colors.yellow[300]!; // Specific color
        break;
      default:
        severityColor = Colors.cyan[300]!; // Specific color
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Column(
            children: [
              Container(
                width: 12,
                height: 12,
                decoration: BoxDecoration(
                  color: severityColor,
                  shape: BoxShape.circle,
                  boxShadow: [
                    BoxShadow(
                      color: severityColor.withOpacity(0.5),
                      blurRadius: 8,
                      spreadRadius: 2,
                    ),
                  ],
                ),
              ),
              if (index < _forensicTimeline.length - 1)
                Container(
                  width: 2,
                  height: 60, // Adjust height as needed
                  color: Colors.grey[700],
                ),
            ],
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _highlightedEventIndex == index
                    ? Colors.cyan[900]!.withOpacity(0.7)
                    : theme.cardColor.withOpacity(0.7),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: severityColor.withOpacity(0.3)),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 8,
                          vertical: 4,
                        ),
                        decoration: BoxDecoration(
                          color: severityColor.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(4),
                        ),
                        child: Text(
                          event.severity,
                          style: TextStyle(color: severityColor, fontSize: 10),
                        ),
                      ),
                      const Spacer(),
                      Text(
                        '${event.timestamp.hour}:${event.timestamp.minute.toString().padLeft(2, '0')}:${event.timestamp.second.toString().padLeft(2, '0')}',
                        style: theme.textTheme.labelSmall?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.7),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    event.title,
                    style: theme.textTheme.titleMedium?.copyWith(
                      color: theme.colorScheme.onSurface,
                    ),
                  ),
                  if (event.details.isNotEmpty) ...[
                    const SizedBox(height: 4),
                    Text(
                      event.details,
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.8),
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildForensicAnalysisView() {
    ThemeData theme = Theme.of(context);
    return Container(
      padding: const EdgeInsets.all(16),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Forensic Analysis Report',
              style: theme.textTheme.titleLarge?.copyWith(
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 16),
            if (_attackAnalysis == null)
              Text(
                'No analysis available. Run the simulation to generate a report.',
                style: TextStyle(color: Colors.grey[400], fontSize: 16),
              )
            else ...[
              _buildAnalysisCard(
                'Attack Vector',
                _attackAnalysis!.attackVector,
                theme,
              ),
              _buildAnalysisCard(
                'Exploited Vulnerabilities',
                _attackAnalysis!.exploitedVulnerabilities
                    .map((e) => "• $e")
                    .join('\n'),
                theme,
              ),
              _buildAnalysisCard(
                'Impact Assessment',
                'Financial Loss: ₹${_attackAnalysis!.impactAssessment['financialLoss'].toStringAsFixed(0)}\n'
                    'Data Compromised: ${(_attackAnalysis!.impactAssessment['dataCompromised'] as List).join(', ')}\n'
                    'Reputational Damage: ${_attackAnalysis!.impactAssessment['reputationalDamage']}\n'
                    'Regulatory Implications: ${_attackAnalysis!.impactAssessment['regulatoryImplications']}',
                theme,
              ),
              _buildAnalysisCard(
                'Attack Sophistication',
                _attackAnalysis!.attackSophistication,
                theme,
              ),
              _buildAnalysisCard(
                'Detection Time',
                _attackAnalysis!.detectionTime,
                theme,
              ),
              _buildAnalysisCard(
                'Recovery Probability',
                _attackAnalysis!.recoveryProbability,
                theme,
              ),
              _buildAnalysisCard(
                'Similar Incidents Trend',
                "+${_attackAnalysis!.similarIncidentsIncrease}",
                theme,
              ),
              const SizedBox(height: 24),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Security Quiz Score',
                    style: theme.textTheme.titleMedium?.copyWith(
                      color: Colors.cyan[300],
                    ),
                  ),
                  Text(
                    'Score: $_quizScore/30',
                    style: TextStyle(
                      color: Colors.green[300],
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _attackAnalysis == null
                      ? null
                      : _showQuizDialog, // Disable if no analysis
                  child: const Text('Take Security Quiz'),
                  style: theme.elevatedButtonTheme.style?.copyWith(
                    backgroundColor: WidgetStateProperty.all(
                      Colors.cyan[700],
                    ), // Custom color for this button
                  ),
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () =>
                      _tabController.animateTo(3), // Prevention Tab
                  style: theme.elevatedButtonTheme.style?.copyWith(
                    backgroundColor: WidgetStateProperty.all(
                      Colors.green[700],
                    ), // Custom color
                  ),
                  child: const Text('View Preventive Measures'),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildAnalysisCard(String title, String content, ThemeData theme) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.only(bottom: 16),
      color: theme.cardColor.withOpacity(0.8),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: theme.textTheme.titleMedium?.copyWith(
                color: Colors.cyan[300],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              content,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.9),
                height: 1.4,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showQuizDialog() {
    int tempScore = 0; // Start quiz score from 0 for this attempt
    _showQuizQuestion1(tempScore);
  }

  void _showQuizQuestion1(int currentScore) {
    ThemeData theme = Theme.of(context);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Security Quiz - Question 1'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Which vulnerability allowed the banking app to open automatically?',
              style: theme.dialogTheme.contentTextStyle,
            ),
            const SizedBox(height: 10),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  _playSound('beep');
                  Navigator.pop(context);
                  _showQuizQuestion2(currentScore + 10);
                },
                child: const Text('Unvalidated deep links'),
              ),
            ),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                  _showQuizQuestion2(currentScore);
                },
                child: const Text('Slow server response'),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Cancel',
              style: TextStyle(color: theme.colorScheme.secondary),
            ),
          ),
        ],
      ),
    );
  }

  void _showQuizQuestion2(int currentScore) {
    ThemeData theme = Theme.of(context);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Security Quiz - Question 2'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'What enabled the attacker to bypass 2FA in this scenario?',
              style: theme.dialogTheme.contentTextStyle,
            ),
            const SizedBox(height: 10),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  _playSound('beep');
                  Navigator.pop(context);
                  _showQuizQuestion3(currentScore + 10);
                },
                child: const Text('Geo-fence spoofing to trusted location'),
              ),
            ),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                  _showQuizQuestion3(currentScore);
                },
                child: const Text('Weak password policy'),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Cancel',
              style: TextStyle(color: theme.colorScheme.secondary),
            ),
          ),
        ],
      ),
    );
  }

  void _showQuizQuestion3(int currentScore) {
    ThemeData theme = Theme.of(context);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Security Quiz - Question 3'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'What is a primary defense against malicious QR codes?',
              style: theme.dialogTheme.contentTextStyle,
            ),
            const SizedBox(height: 10),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  _playSound('beep');
                  Navigator.pop(context);
                  _finalizeQuiz(currentScore + 10);
                },
                child: const Text('Verifying QR code source & destination'),
              ),
            ),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                  _finalizeQuiz(currentScore);
                },
                child: const Text('Using a high-resolution camera'),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Cancel',
              style: TextStyle(color: theme.colorScheme.secondary),
            ),
          ),
        ],
      ),
    );
  }

  void _finalizeQuiz(int finalScore) {
    ThemeData theme = Theme.of(context);
    setState(() => _quizScore = finalScore);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Quiz Completed!'),
        content: Text(
          'Your Final Score: $_quizScore/30.\n${_quizScore >= 20 ? "Great job!" : "Good effort!"} Check the Prevention tab for detailed mitigation strategies.',
          style: theme.dialogTheme.contentTextStyle,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'OK',
              style: TextStyle(color: theme.colorScheme.secondary),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPreventionView() {
    ThemeData theme = Theme.of(context);
    final preventiveMeasures = [
      const PreventiveMeasure(
        title: "Deep Link Validation & Sanitization",
        description:
            "Validate all incoming deep link parameters to prevent injection or unauthorized actions. Sanitize inputs rigorously.",
        implementation:
            "Implement server-side validation for critical actions triggered by deep links. Use strict pattern matching and parameter whitelisting in client app intent filters.",
        priority: "CRITICAL",
        cost: "Medium",
        effectiveness: 95,
        action:
            "Review and update app manifest (Android) or URL schemes (iOS) to ensure secure handling of deep links. Educate users about verifying link sources.",
        relatedVulnerability: 'Unvalidated deep link parameters',
      ),
      const PreventiveMeasure(
        title: "Robust Multi-Factor Location Verification",
        description:
            "Verify device location using multiple data sources (GPS, Wi-Fi, cell tower, IP) and behavioral analysis to detect spoofing attempts.",
        implementation:
            "Integrate advanced location fraud detection services. Use ML models to identify anomalies in location patterns and device sensor data. Require step-up authentication for sensitive actions from suspicious locations.",
        priority: "HIGH",
        cost: "Medium-High",
        effectiveness: 88,
        action:
            "Advise users to enable highest accuracy location settings and be wary of apps requesting unnecessary location permissions. Implement geovelocity checks.",
        relatedVulnerability:
            'Geo-fence reliance without multi-factor verification',
      ),
      const PreventiveMeasure(
        title: "Contextual Authentication & Behavioral Biometrics",
        description:
            "Continuously monitor user behavior (typing speed, touch pressure, app usage patterns) to detect anomalies and potential session hijacking.",
        implementation:
            "Deploy behavioral biometrics solutions. If anomalies are detected, trigger step-up authentication or temporarily restrict high-risk operations.",
        priority: "HIGH",
        cost: "High",
        effectiveness: 92,
        action:
            "Encourage users to set up strong device lock mechanisms (biometrics, complex PINs). Implement session timeouts and re-authentication for sensitive features.",
        relatedVulnerability: 'Cached authentication token exploitation',
      ),
      const PreventiveMeasure(
        title: "Real-time Transaction Monitoring with AI",
        description:
            "Employ AI/ML models to analyze transactions in real-time for suspicious patterns, amounts, recipients, or deviations from normal user behavior.",
        implementation:
            "Deploy a robust fraud detection system that scores transactions by risk. Implement velocity checks, and hold high-risk transactions for manual review or user confirmation via a secure out-of-band channel.",
        priority: "CRITICAL",
        cost: "High",
        effectiveness: 97,
        action:
            "Mandate users to set up instant transaction alerts (SMS/email/push). Provide clear channels for reporting suspicious activity immediately.",
        relatedVulnerability:
            'Insufficient user confirmation for high-value transactions',
      ),
      const PreventiveMeasure(
        title: "Secure QR Code Generation & Scanning Practices",
        description:
            "Implement measures to verify QR code authenticity and educate users on safe scanning habits.",
        implementation:
            "For payment QR codes, use dynamic, signed QR codes where possible. In-app scanners should preview URL/action before execution and warn about non-HTTPS links or suspicious domains. ",
        priority: "MEDIUM",
        cost: "Low-Medium",
        effectiveness: 78,
        action:
            "Educate users to only scan QR codes from trusted, verifiable sources, especially for payments. Advise against scanning unsolicited QR codes. ",
        relatedVulnerability:
            'Unvalidated deep link parameters', // As QR codes often use deep links
      ),
    ];

    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Preventive Measures & Mitigation Strategies',
            style: theme.textTheme.titleLarge?.copyWith(
              color: theme.colorScheme.onSurface,
            ),
          ),
          const SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: preventiveMeasures.length,
              itemBuilder: (context, index) {
                final measure = preventiveMeasures[index];
                return Card(
                  elevation: 2,
                  margin: const EdgeInsets.only(bottom: 16),
                  color: theme.cardColor.withOpacity(0.8),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          measure.title,
                          style: theme.textTheme.titleMedium?.copyWith(
                            color: Colors.cyan[300],
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          measure.description,
                          style: theme.textTheme.bodyMedium?.copyWith(
                            color: theme.colorScheme.onSurface.withOpacity(0.8),
                          ),
                        ),
                        const SizedBox(height: 8),
                        Wrap(
                          spacing: 8.0,
                          runSpacing: 4.0,
                          children: [
                            Chip(
                              label: Text(
                                'Priority: ${measure.priority}',
                                style: theme.textTheme.labelSmall,
                              ),
                              backgroundColor: theme.colorScheme.surfaceVariant,
                            ),
                            Chip(
                              label: Text(
                                'Effectiveness: ${measure.effectiveness}%',
                                style: theme.textTheme.labelSmall,
                              ),
                              backgroundColor: theme.colorScheme.surfaceVariant,
                            ),
                            Chip(
                              label: Text(
                                'Cost: ${measure.cost}',
                                style: theme.textTheme.labelSmall,
                              ),
                              backgroundColor: theme.colorScheme.surfaceVariant,
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Addresses: ${measure.relatedVulnerability}',
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: theme.colorScheme.onSurface.withOpacity(0.7),
                          ),
                        ),
                        const SizedBox(height: 12),
                        ElevatedButton(
                          onPressed: () {
                            showDialog(
                              context: context,
                              builder: (context) => AlertDialog(
                                title: Text(measure.title),
                                content: SingleChildScrollView(
                                  child: Text(
                                    'User Action: ${measure.action}\n\nTechnical Implementation: ${measure.implementation}',
                                    style: theme.dialogTheme.contentTextStyle,
                                  ),
                                ),
                                actions: [
                                  TextButton(
                                    onPressed: () => Navigator.pop(context),
                                    child: Text(
                                      'Close',
                                      style: TextStyle(
                                        color: theme.colorScheme.secondary,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            );
                          },
                          style: theme.elevatedButtonTheme.style?.copyWith(
                            padding: WidgetStateProperty.all(
                              const EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 8,
                              ),
                            ),
                            backgroundColor: WidgetStateProperty.all(
                              Colors.cyan[800],
                            ),
                          ),
                          child: const Text('Learn More & Implement'),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _tabController.dispose();
    _phoneController.dispose();
    _alertController.dispose();
    _scanController.dispose();
    _balanceController.dispose();
    _pulseController.dispose();
    _trustScoreController.dispose();
    _audioPlayer.dispose();
    super.dispose();
  }
}
```
