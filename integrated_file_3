import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:math' as math;

// --- Constants for Option Page ---
const Duration _kBgAnimationDuration = Duration(seconds: 30);
const Duration _kOptionAnimationBaseDuration = Duration(milliseconds: 700);
const Duration _kOptionAnimationStagger = Duration(milliseconds: 150);
const Duration _kOptionEntryDelay = Duration(milliseconds: 400);
const int _kNumBackgroundStars = 40;
const double _kStarBaseRadius = 250.0;
const double _kStarRadiusIncrement = 25.0;

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
  SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
    statusBarColor: Colors.transparent,
    systemNavigationBarColor: Colors.transparent,
  ));

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Attack Simulation App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.red,
        scaffoldBackgroundColor: Colors.black,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Roboto',
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(35),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 45, vertical: 18),
          ),
        ),
        outlinedButtonTheme: OutlinedButtonThemeData(
          style: OutlinedButton.styleFrom(
            foregroundColor: Colors.white,
            side: const BorderSide(color: Colors.greenAccent, width: 2),
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
        ),
        textTheme: const TextTheme(
          headlineLarge: TextStyle(
            fontSize: 36,
            fontWeight: FontWeight.bold,
            color: Colors.white,
            letterSpacing: 3.0,
          ),
          bodyMedium: TextStyle(
            color: Colors.grey,
            fontSize: 15,
            height: 1.5,
          ),
        ),
      ),
      home: const SplashScreen(),
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  late AnimationController _logoController;
  late AnimationController _textController;
  late AnimationController _buttonController;
  late AnimationController _backgroundController;

  late Animation<double> _logoAnimation;
  late Animation<double> _textAnimation;
  late Animation<double> _buttonAnimation;
  late Animation<double> _backgroundAnimation;
  late Animation<double> _rotationAnimation;

  @override
  void initState() {
    super.initState();

    // Initialize animation controllers
    _logoController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    _textController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _buttonController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _backgroundController = AnimationController(
      duration: const Duration(seconds: 4),
      vsync: this,
    );

    // Initialize animations
    _logoAnimation = CurvedAnimation(
      parent: _logoController,
      curve: Curves.elasticOut,
    );
    _textAnimation = CurvedAnimation(
      parent: _textController,
      curve: Curves.easeOutBack,
    );
    _buttonAnimation = CurvedAnimation(
      parent: _buttonController,
      curve: Curves.bounceOut,
    );
    _backgroundAnimation = CurvedAnimation(
      parent: _backgroundController,
      curve: Curves.linear,
    );
    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(_backgroundController);

    _startAnimationSequence();
  }

  void _startAnimationSequence() {
    // Start background animation immediately
    _backgroundController.repeat();

    // Logo animation
    Timer(const Duration(milliseconds: 500), () {
      _logoController.forward();
    });

    // Text animation
    Timer(const Duration(milliseconds: 2000), () {
      _textController.forward();
    });

    // Button animation
    Timer(const Duration(milliseconds: 3000), () {
      _buttonController.forward();
    });
  }

  @override
  void dispose() {
    _logoController.dispose();
    _textController.dispose();
    _buttonController.dispose();
    _backgroundController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_backgroundAnimation, _rotationAnimation]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5 + _backgroundAnimation.value * 0.5,
                colors: [
                  Colors.red.withOpacity(0.15),
                  Colors.grey[900]!.withOpacity(0.8),
                  Colors.black,
                ],
              ),
            ),
            child: Stack(
              children: [
                // Animated background particles
                ...List.generate(20, (index) {
                  final angle = (index * 18.0) + (_rotationAnimation.value * 180 / math.pi);
                  final radius = 150.0 + (index * 15);
                  return Positioned(
                    left: MediaQuery.of(context).size.width / 2 +
                        (radius * 0.5) * math.cos(angle * math.pi / 180) -
                        2,
                    top: MediaQuery.of(context).size.height / 2 +
                        (radius * 0.3) * math.sin(angle * math.pi / 180) -
                        2,
                    child: Container(
                      width: 4,
                      height: 4,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.redAccent.withOpacity(0.3 - (index * 0.01)),
                      ),
                    ),
                  );
                }),
                // Main content
                Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      // Animated Logo with glow effect
                      ScaleTransition(
                        scale: _logoAnimation,
                        child: Container(
                          padding: const EdgeInsets.all(30),
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.redAccent.withOpacity(0.6),
                              width: 3,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.4),
                                blurRadius: 30,
                                spreadRadius: 8,
                              ),
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.2),
                                blurRadius: 60,
                                spreadRadius: 15,
                              ),
                            ],
                          ),
                          child: AnimatedBuilder(
                            animation: _rotationAnimation,
                            builder: (context, child) {
                              return Transform.rotate(
                                angle: _rotationAnimation.value * 0.1,
                                child: const Icon(
                                  Icons.shield,
                                  size: 90,
                                  color: Colors.redAccent,
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      // Animated Welcome Text
                      SlideTransition(
                        position: Tween<Offset>(
                          begin: const Offset(0, 1),
                          end: Offset.zero,
                        ).animate(_textAnimation),
                        child: FadeTransition(
                          opacity: _textAnimation,
                          child: Column(
                            children: [
                              Text(
                                'Welcome',
                                style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                                      shadows: [
                                        Shadow(
                                          color: Colors.redAccent.withOpacity(0.5),
                                          blurRadius: 10,
                                          offset: const Offset(0, 0),
                                        ),
                                      ],
                                    ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'to the Simulation',
                                style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.grey[400],
                                  letterSpacing: 1.5,
                                  fontWeight: FontWeight.w300,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 60),
                      // Animated Button with hover effect
                      ScaleTransition(
                        scale: _buttonAnimation,
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(35),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.3),
                                blurRadius: 20,
                                spreadRadius: 5,
                              ),
                            ],
                          ),
                          child: ElevatedButton(
                            onPressed: () {
                              HapticFeedback.heavyImpact();
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => const SimulationSelectionPage(),
                                ),
                              );
                            },
                            style: Theme.of(context).elevatedButtonTheme.style?.copyWith(
                                  backgroundColor: WidgetStateProperty.all(Colors.redAccent),
                                  foregroundColor: WidgetStateProperty.all(Colors.white),
                                ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                const Icon(Icons.play_arrow, size: 28),
                                const SizedBox(width: 12),
                                Text(
                                  'Simulate Attack',
                                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                        fontSize: 18,
                                        fontWeight: FontWeight.w600,
                                        letterSpacing: 0.5,
                                        color: Colors.white,
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      // Animated subtitle
                      FadeTransition(
                        opacity: _buttonAnimation,
                        child: Text(
                          'Experience advanced cybersecurity scenarios',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[500],
                            letterSpacing: 1.0,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

class SimulationSelectionPage extends StatefulWidget {
  const SimulationSelectionPage({super.key});

  @override
  _SimulationSelectionPageState createState() => _SimulationSelectionPageState();
}

class _SimulationSelectionPageState extends State<SimulationSelectionPage> with TickerProviderStateMixin {
  late List<AnimationController> _optionControllers;
  late List<Animation<double>> _optionScaleAnimations;
  late List<Animation<double>> _optionFadeAnimations;

  late AnimationController _bgController;
  late Animation<double> _rotationAnimation;

  late List<AnimationController> _starPulseControllers;
  late List<Animation<double>> _starPulseAnimations;
  final math.Random _random = math.Random();

  int? _selectedIndex;
  bool _showDetails = false;

  final List<SimulationOption> _options = [
    SimulationOption(
      title: "Phishing Simulation",
      icon: Icons.phishing_rounded,
      description: "Simulate sophisticated email phishing attacks and user awareness.",
      color: Colors.lightBlueAccent.shade400,
      details: """
      This simulation will test your ability to identify phishing attempts in emails. 
      You'll receive simulated emails that may contain suspicious links, attachments, 
      or requests for sensitive information. Your goal is to identify which emails 
      are legitimate and which are phishing attempts.
      """,
    ),
    SimulationOption(
      title: "Ransomware Attack",
      icon: Icons.lock_rounded,
      description: "Simulate ransomware attacks that encrypt files and demand payment.",
      color: Colors.redAccent.shade400,
      details: """
      In this simulation, you'll face a scenario where ransomware infects your system, 
      encrypting critical files and demanding a ransom for decryption. You'll need to 
      identify warning signs, respond to the attack, and learn strategies to prevent 
      data loss and mitigate damage.
      """,
    ),
    SimulationOption(
      title: "Data Exfiltration",
      icon: Icons.security_rounded,
      description: "Simulate sensitive data extraction and endpoint compromise.",
      color: Colors.purpleAccent.shade400,
      details: """
      This scenario simulates attempts to steal sensitive data from your device. 
      You'll encounter situations where malware or unauthorized processes try to 
      access and transmit your files. Your task is to detect and prevent these 
      data exfiltration attempts.
      """,
    ),
  ];

  @override
  void initState() {
    super.initState();

    _bgController = AnimationController(
      duration: _kBgAnimationDuration,
      vsync: this,
    )..repeat();

    _rotationAnimation = Tween<double>(begin: 0, end: 2 * math.pi)
        .animate(CurvedAnimation(parent: _bgController, curve: Curves.linear));

    _optionControllers = List.generate(
        _options.length,
        (index) => AnimationController(
              duration: _kOptionAnimationBaseDuration + (_kOptionAnimationStagger * index),
              vsync: this,
            ));

    _optionScaleAnimations = _optionControllers
        .map<Animation<double>>((controller) => CurvedAnimation(
              parent: controller,
              curve: Curves.elasticOut,
            ))
        .toList();

    _optionFadeAnimations = _optionControllers
        .map<Animation<double>>((controller) => Tween<double>(begin: 0.0, end: 1.0).animate(
              CurvedAnimation(
                parent: controller,
                curve: Curves.easeOut,
              ),
            ))
        .toList();

    // Background Star Pulse Animations
    _starPulseControllers = List.generate(_kNumBackgroundStars, (index) {
      return AnimationController(
        duration: Duration(milliseconds: 1500 + _random.nextInt(1000)),
        vsync: this,
      )..repeat(reverse: true);
    });

    _starPulseAnimations = _starPulseControllers.map<Animation<double>>((controller) {
      return Tween<double>(begin: 0.4, end: 1.0).animate(
        CurvedAnimation(parent: controller, curve: Curves.easeInOut),
      );
    }).toList();

    Future.delayed(_kOptionEntryDelay, () {
      _optionControllers.forEach((controller) => controller.forward());
    });
  }

  @override
  void dispose() {
    _bgController.dispose();
    _optionControllers.forEach((controller) => controller.dispose());
    _starPulseControllers.forEach((controller) => controller.dispose());
    super.dispose();
  }

  void _handleSelection(int index) {
    HapticFeedback.mediumImpact();
    setState(() {
      if (_selectedIndex == index) {
        // Toggle details if same option is clicked again
        _showDetails = !_showDetails;
      } else {
        _selectedIndex = index;
        _showDetails = true;
      }
    });
  }

  void _closeDetails() {
    setState(() {
      _showDetails = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.sizeOf(context);
    final isLargeScreen = screenSize.width > 700;

    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_bgController, ..._starPulseControllers]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5,
                colors: [
                  Colors.deepPurple.shade900.withOpacity(0.2),
                  Colors.black87,
                  Colors.black,
                ],
                stops: [0.0, 0.6, 1.0],
              ),
            ),
            child: Stack(
              children: [
                // Animated background stars
                ...List.generate(_kNumBackgroundStars, (index) {
                  final angle = (index * (360.0 / _kNumBackgroundStars)) +
                      (_rotationAnimation.value * 180 / math.pi * 0.5);
                  final distanceFactor = 0.8 + (_random.nextDouble() * 0.4);
                  final radius = (_kStarBaseRadius + (index % 10 * _kStarRadiusIncrement)) * distanceFactor;
                  final starSize = 1.5 + _random.nextDouble() * 2.5;

                  return Positioned(
                    left: screenSize.width / 2 +
                        (radius * 0.7) * math.cos(angle * math.pi / 180) -
                        starSize / 2,
                    top: screenSize.height / 2 +
                        (radius * 0.5) * math.sin(angle * math.pi / 180) -
                        starSize / 2,
                    child: FadeTransition(
                      opacity: _starPulseAnimations[index],
                      child: Container(
                        width: starSize,
                        height: starSize,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.redAccent.withOpacity(0.3 + _random.nextDouble() * 0.3),
                        ),
                      ),
                    ),
                  );
                }),
                // Content
                SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        AppBar(
                          leading: IconButton(
                            icon: const Icon(Icons.arrow_back_ios_new, color: Colors.white70),
                            onPressed: () => Navigator.pop(context),
                          ),
                          title: Text(
                            'Select Simulation Scenario',
                            style: TextStyle(
                              color: Colors.white.withOpacity(0.85),
                              fontWeight: FontWeight.w300,
                              letterSpacing: 0.5,
                            ),
                          ),
                          backgroundColor: Colors.transparent,
                          elevation: 0,
                          centerTitle: true,
                        ),
                        if (_showDetails && _selectedIndex != null) ...[
                          _buildDetailsPanel(context, _options[_selectedIndex!]),
                          const SizedBox(height: 20),
                        ],
                        Expanded(
                          child: Center(
                            child: SingleChildScrollView(
                              padding: const EdgeInsets.symmetric(vertical: 20),
                              child: Wrap(
                                alignment: WrapAlignment.center,
                                crossAxisAlignment: WrapCrossAlignment.center,
                                spacing: 30,
                                runSpacing: 30,
                                children: List.generate(_options.length, (index) {
                                  final isSelected = _selectedIndex == index;
                                  return FadeTransition(
                                    opacity: _optionFadeAnimations[index],
                                    child: ScaleTransition(
                                      scale: _optionScaleAnimations[index],
                                      child: SimulationCard(
                                        option: _options[index],
                                        isSelected: isSelected,
                                        onTap: () => _handleSelection(index),
                                      ),
                                    ),
                                  );
                                }),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildDetailsPanel(BuildContext context, SimulationOption option) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      margin: const EdgeInsets.symmetric(horizontal: 20),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.8),
        borderRadius: BorderRadius.circular(15),
        border: Border.all(
          color: option.color.withOpacity(0.5),
          width: 1.5,
        ),
        boxShadow: [
          BoxShadow(
            color: option.color.withOpacity(0.2),
            blurRadius: 20,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                option.title,
                style: const TextStyle(
                  fontSize: 22,
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              IconButton(
                icon: const Icon(Icons.close, color: Colors.white70),
                onPressed: _closeDetails,
              ),
            ],
          ),
          const SizedBox(height: 10),
          Divider(color: option.color.withOpacity(0.5)),
          const SizedBox(height: 15),
          Text(
            option.details,
            style: TextStyle(
              color: Colors.grey[300],
              fontSize: 16,
              height: 1.6,
            ),
          ),
          const SizedBox(height: 20),
          Center(
            child: ElevatedButton(
              onPressed: () {
                if (option.title == "Data Exfiltration") {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const SimulationHomePage(),
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Starting ${option.title}...'),
                      backgroundColor: option.color,
                    ),
                  );
                }
              },
              style: Theme.of(context).elevatedButtonTheme.style?.copyWith(
                    backgroundColor: WidgetStateProperty.all(option.color.withOpacity(0.2)),
                    foregroundColor: WidgetStateProperty.all(option.color),
                    side: WidgetStateProperty.all(
                      BorderSide(color: option.color.withOpacity(0.8)),
                    ),
                  ),
              child: Text(
                'Start Simulation',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: option.color,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class SimulationCard extends StatefulWidget {
  final SimulationOption option;
  final bool isSelected;
  final VoidCallback onTap;

  const SimulationCard({
    super.key,
    required this.option,
    required this.isSelected,
    required this.onTap,
  });

  @override
  _SimulationCardState createState() => _SimulationCardState();
}

class _SimulationCardState extends State<SimulationCard> {
  bool _isHovered = false;

  @override
  Widget build(BuildContext context) {
    final option = widget.option;
    final isSelected = widget.isSelected;
    final cardWidth = MediaQuery.sizeOf(context).width > 700 ? 320.0 : 280.0;

    return MouseRegion(
      onEnter: (_) => setState(() => _isHovered = true),
      onExit: (_) => setState(() => _isHovered = false),
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: widget.onTap,
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
          width: cardWidth,
          padding: const EdgeInsets.all(25),
          decoration: BoxDecoration(
            color: _isHovered || isSelected
                ? Colors.grey[850]!.withOpacity(0.8)
                : Colors.grey[900]!.withOpacity(0.7),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: option.color.withOpacity(_isHovered || isSelected ? 0.7 : 0.4),
              width: _isHovered || isSelected ? 2.5 : 2,
            ),
            boxShadow: [
              BoxShadow(
                color: option.color.withOpacity(_isHovered || isSelected ? 0.4 : 0.25),
                blurRadius: _isHovered || isSelected ? 25 : 15,
                spreadRadius: _isHovered || isSelected ? 4 : 2,
              ),
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 10,
                offset: const Offset(0, 5),
              ),
            ],
            gradient: (_isHovered || isSelected)
                ? LinearGradient(
                    colors: [option.color.withOpacity(0.1), Colors.grey[850]!.withOpacity(0.1)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  )
                : null,
          ),
          transform: (_isHovered || isSelected) ? (Matrix4.identity()..scale(1.03)) : Matrix4.identity(),
          transformAlignment: Alignment.center,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(
                option.icon,
                size: 50,
                color: option.color.withOpacity(_isHovered || isSelected ? 1.0 : 0.8),
              ),
              const SizedBox(height: 20),
              Text(
                option.title,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 22,
                  color: Colors.white.withOpacity(0.95),
                  fontWeight: FontWeight.w600,
                  letterSpacing: 0.8,
                ),
              ),
              const SizedBox(height: 15),
              Text(
                option.description,
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.bodyMedium,
              ),
              const SizedBox(height: 25),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 10),
                decoration: BoxDecoration(
                  color: option.color.withOpacity(_isHovered || isSelected ? 0.25 : 0.15),
                  borderRadius: BorderRadius.circular(30),
                  border: Border.all(color: option.color.withOpacity(0.5)),
                ),
                child: Text(
                  "Start Simulation",
                  style: TextStyle(
                    color: option.color,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class SimulationOption {
  final String title;
  final IconData icon;
  final String description;
  final String details;
  final Color color;

  SimulationOption({
    required this.title,
    required this.icon,
    required this.description,
    required this.color,
    required this.details,
  });
}

// --- Data Exfiltration Simulation ---

enum LogType { action, info, alert, network, file, mitigation, discovery }

class AttackStep {
  final String displayText;
  final String? mitreId;
  final String? mitreName;
  final bool isCriticalAlert;
  final Duration delayAfter;
  final LogType logType;
  final String? details;

  AttackStep({
    required this.displayText,
    this.mitreId,
    this.mitreName,
    this.isCriticalAlert = false,
    this.delayAfter = const Duration(milliseconds: 600),
    this.logType = LogType.info,
    this.details,
  });
}

class SimulationHomePage extends StatefulWidget {
  const SimulationHomePage({Key? key}) : super(key: key);

  @override
  _SimulationHomePageState createState() => _SimulationHomePageState();
}

class _SimulationHomePageState extends State<SimulationHomePage> with TickerProviderStateMixin {
  bool _simulationStarted = false;
  bool _showEndButton = false;
  bool _simulationComplete = false;
  List<AttackStep> _simulationOutputSteps = [];
  int _currentStepIndex = 0;
  Timer? _timer;

  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;

  final List<AttackStep> _scenarioAttackSteps = [
    AttackStep(displayText: '[INITIATION] Connecting to compromised endpoint: WORKSTATION-7834...', logType: LogType.network),
    AttackStep(displayText: '[PERSISTENCE] Establishing persistence via registry modification...', mitreId: 'T1547.001', mitreName: 'Boot or Logon Autostart Execution: Registry Run Keys', logType: LogType.action),
    AttackStep(displayText: '[DEFENSE EVASION] Attempting to bypass Windows Defender real-time protection...', mitreId: 'T1562.001', mitreName: 'Impair Defenses: Disable or Modify Tools', logType: LogType.action),
    AttackStep(displayText: '[DEFENSE EVASION] Defender bypass successful. Real-time monitoring temporarily disabled.', logType: LogType.info),
    AttackStep(displayText: '[EXECUTION] Injecting stealth payload into explorer.exe process (PID: 1788)...', mitreId: 'T1055', mitreName: 'Process Injection', logType: LogType.action),
    AttackStep(displayText: '[PRIVILEGE ESCALATION] Escalating privileges using UAC bypass technique (SilentCleanup task)...', mitreId: 'T1548.002', mitreName: 'Abuse Elevation Control Mechanism: Bypass User Account Control', logType: LogType.action),
    AttackStep(displayText: '[PRIVILEGE ESCALATION] Achieved SYSTEM level privileges.', logType: LogType.info),
    AttackStep(displayText: '[DISCOVERY] Enumerating network shares and mapped drives (Net Share, Net Use)...', mitreId: 'T1135', mitreName: 'Network Share Discovery', logType: LogType.discovery),
    AttackStep(displayText: '[DISCOVERY] Scanning C:\\Users\\%USERNAME%\\Documents for sensitive files (keywords: confidential, private, report)...', mitreId: 'T1083', mitreName: 'File and Directory Discovery', logType: LogType.discovery),
    AttackStep(displayText: '[COLLECTION] Located: customer_database.xlsx (2.1 MB)', logType: LogType.file, details: "Contains PII and financial data."),
    AttackStep(displayText: '[COLLECTION] Located: financial_records_q4_2024.pdf (854 KB)', logType: LogType.file, details: "Quarterly financial statements."),
    AttackStep(displayText: '[COLLECTION] Located: employee_ssn_list_encrypted.csv.aes (234 KB)', logType: LogType.file, details: "AES encrypted, requires key."),
    AttackStep(displayText: '[COLLECTION] Located: credit_card_data_archive.zip (67 KB)', logType: LogType.file, details: "Protected with weak password 'password123'."),
    AttackStep(displayText: '[COLLECTION] Located: project_phoenix_contracts.zip (1.8 MB)', logType: LogType.file, details: "Sensitive R&D contracts."),
    AttackStep(displayText: '[COLLECTION] Attempting to decrypt employee_ssn_list_encrypted.csv.aes using common keys... Failed.', logType: LogType.action),
    AttackStep(displayText: '[COLLECTION] Brute-forcing credit_card_data_archive.zip password... Success! Password: password123', logType: LogType.action),
    AttackStep(displayText: '[COMMAND & CONTROL] Staging selected files for exfiltration in C:\\Windows\\Temp\\stage\\...', mitreId: 'T1074', mitreName: 'Data Staged', logType: LogType.action),
    AttackStep(displayText: r'[COMMAND & CONTROL] Compressing staged files using 7zip with AES-256 encryption (password: ComplexP@$$w0rd!)...', logType: LogType.action),
    AttackStep(displayText: '[COMMAND & CONTROL] Compressed archive: exfil_data.7z (3.9 MB)', logType: LogType.file),
    AttackStep(displayText: '[EXFILTRATION] Splitting archive into 8x 512KB chunks to evade DLP detection...', mitreId: 'T1030', mitreName: 'Data Transfer Size Limits', logType: LogType.action),
    AttackStep(displayText: '[COMMAND & CONTROL] Establishing encrypted tunnel to C&C server 185.220.101.47:443 (HTTPS)...', mitreId: 'T1573.002', mitreName: 'Encrypted Channel: Asymmetric Cryptography', logType: LogType.network),
    AttackStep(displayText: '[EXFILTRATION] Using HTTPS traffic to blend with normal web activity (User-Agent: Chrome/99.0.4844.84)...', mitreId: 'T1071.001', mitreName: 'Application Layer Protocol: Web Protocols', logType: LogType.network),
    ...List.generate(8, (i) => AttackStep(displayText: '[EXFILTRATION] Uploading chunk ${i+1}/8... [${"█".padRight(i+1, "█")}${" ".padRight(8-(i+1), " ")}] ${((i+1)/8*100).toStringAsFixed(0)}%', logType: LogType.network, delayAfter: const Duration(milliseconds: 300))),
    AttackStep(displayText: '[EXFILTRATION] All chunks uploaded successfully.', logType: LogType.network),
    AttackStep(displayText: '[IMPACT] Total data exfiltrated: 3.9 MB over 52 seconds.', logType: LogType.info),
    AttackStep(displayText: '[DEFENSE EVASION] Clearing event logs (System, Security, Application)...', mitreId: 'T1070.001', mitreName: 'Indicator Removal: Clear Windows Event Logs', logType: LogType.action),
    AttackStep(displayText: '[DEFENSE EVASION] Removing temporary files and staging directory (C:\\Windows\\Temp\\stage\\)...', mitreId: 'T1070.004', mitreName: 'Indicator Removal: File Deletion', logType: LogType.action),
    AttackStep(displayText: '[DEFENSE EVASION] Restoring Windows Defender settings and terminating malicious processes...', logType: LogType.action),
    AttackStep(displayText: '[COMPLETION] Exfiltration complete. Connection to C&C server closed. Footprints minimized.', logType: LogType.info, delayAfter: const Duration(milliseconds: 1500)),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(displayText: '🔴🔴🔴 SECURITY OPERATIONS CENTER (SOC) ALERT TRIGGERED 🔴🔴🔴', isCriticalAlert: true, logType: LogType.alert, delayAfter: const Duration(milliseconds: 1000)),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(displayText: 'INCIDENT ID: INC-2024-0715-003', logType: LogType.alert),
    AttackStep(displayText: 'SEVERITY: CRITICAL', logType: LogType.alert),
    AttackStep(displayText: 'CLASSIFICATION: Confirmed Data Breach | Active Exfiltration', logType: LogType.alert),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(displayText: 'Anomalous Activity Detected:', logType: LogType.alert),
    AttackStep(displayText: '  • Unusual outbound HTTPS traffic volume to untrusted IP (185.220.101.47)', logType: LogType.alert),
    AttackStep(displayText: '  • Multiple sensitive file accesses from non-standard process (explorer.exe child)', logType: LogType.alert),
    AttackStep(displayText: '  • Process injection detected: explorer.exe -> [random_name].exe', logType: LogType.alert),
    AttackStep(displayText: '  • Registry modifications in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run', logType: LogType.alert),
    AttackStep(displayText: '  • Windows Event Logs cleared or tampered.', logType: LogType.alert),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(displayText: '[MITIGATION] RECOMMENDATION: Activate Level 1 Incident Response Protocol IMMEDIATELY.', logType: LogType.mitigation),
    AttackStep(displayText: '[MITIGATION] NEXT STEPS: Isolate WORKSTATION-7834, preserve forensic evidence, block C&C IP.', logType: LogType.mitigation),
  ];

  final List<Map<String, String>> _realWorldExamples = [
    {
      'company': 'Equifax (2017)',
      'impact': '147 million records compromised',
      'method': 'Web application vulnerability (Apache Struts)',
      'data': 'SSNs, birth dates, addresses, credit card numbers',
      'cost': '\$1.4 billion+ in total costs',
      'lesson': 'Importance of timely patching and vulnerability management.'
    },
    {
      'company': 'Capital One (2019)',
      'impact': '100 million+ customers affected',
      'method': 'Misconfigured AWS S3 bucket (SSRF to WAF)',
      'data': 'Credit applications, SSNs, bank account numbers',
      'cost': '\$270 million in fines and costs',
      'lesson': 'Cloud security misconfigurations are a major risk. Proper IAM and WAF tuning is crucial.'
    },
    {
      'company': 'SolarWinds (SUNBURST - 2020)',
      'impact': '18,000+ organizations compromised (incl. US Gov)',
      'method': 'Supply chain attack via trojanized software update',
      'data': 'Varied government and corporate sensitive data',
      'cost': 'Estimated \$100+ billion global impact',
      'lesson': 'Supply chain attacks are sophisticated and hard to detect. Trust but verify software updates.'
    },
    {
      'company': 'Colonial Pipeline (2021)',
      'impact': 'US fuel supply disrupted for days',
      'method': 'Ransomware (DarkSide) via compromised VPN (single-factor auth)',
      'data': 'Operational systems and business data',
      'cost': '\$4.4 million ransom paid + significant operational losses',
      'lesson': 'Critical infrastructure is a target. Multi-Factor Authentication (MFA) is essential everywhere.'
    },
  ];

  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);

    _pulseAnimation = Tween<double>(
      begin: 0.95,
      end: 1.05,
    ).animate(CurvedAnimation(
      parent: _pulseController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _timer?.cancel();
    _pulseController.dispose();
    super.dispose();
  }

  void _startSimulation() async {
    setState(() {
      _simulationStarted = true;
      _simulationOutputSteps = [];
      _currentStepIndex = 0;
      _simulationComplete = false;
      _showEndButton = false;
    });

    _timer = Timer.periodic(const Duration(milliseconds: 500), (timer) {
      if (!mounted) {
        timer.cancel();
        return;
      }
      if (_currentStepIndex < _scenarioAttackSteps.length) {
        final currentStep = _scenarioAttackSteps[_currentStepIndex];
        setState(() {
          _simulationOutputSteps.add(currentStep);
          _currentStepIndex++;
        });

        if (currentStep.isCriticalAlert) {
          HapticFeedback.heavyImpact();
        }
      } else {
        timer.cancel();
        if (mounted) {
          setState(() {
            _showEndButton = true;
          });
        }
      }
    });
  }

  void _endSimulation() {
    _timer?.cancel();
    if (mounted) {
      setState(() {
        _simulationStarted = false;
        _showEndButton = false;
        _simulationComplete = true;
      });
    }
  }

  void _resetSimulation() {
    _timer?.cancel();
    if (mounted) {
      setState(() {
        _simulationStarted = false;
        _showEndButton = false;
        _simulationComplete = false;
        _simulationOutputSteps = [];
        _currentStepIndex = 0;
      });
      Navigator.pop(context); // Return to SimulationSelectionPage
    }
  }

  Widget _buildRealWorldExample(Map<String, String> example) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.warning_amber_rounded, color: Colors.orangeAccent, size: 24),
                const SizedBox(width: 10),
                Text(
                  example['company']!,
                  style: Theme.of(context).textTheme.headlineLarge?.copyWith(fontSize: 18, color: Colors.orangeAccent),
                ),
              ],
            ),
            const SizedBox(height: 12),
            _buildDetailRow('Impact:', example['impact']!, Colors.redAccent.shade100),
            _buildDetailRow('Attack Method:', example['method']!, Colors.blueAccent.shade100),
            _buildDetailRow('Data Compromised:', example['data']!, Colors.purpleAccent.shade100),
            _buildDetailRow('Financial Cost:', example['cost']!, Colors.red.shade300),
            if (example['lesson'] != null && example['lesson']!.isNotEmpty)
              _buildDetailRow('Key Lesson:', example['lesson']!, Colors.greenAccent.shade100, isLesson: true),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value, Color labelColor, {bool isLesson = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: isLesson ? 90 : 130,
            child: Text(
              label,
              style: TextStyle(
                color: labelColor,
                fontWeight: FontWeight.w600,
                fontSize: 13.5,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: Colors.grey[300],
                fontSize: 13.5,
                height: 1.4,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getLogColor(LogType logType) {
    switch (logType) {
      case LogType.action:
        return Colors.cyanAccent.shade400;
      case LogType.info:
        return Colors.grey.shade400;
      case LogType.alert:
        return Colors.redAccent.shade400;
      case LogType.network:
        return Colors.lightBlueAccent.shade200;
      case LogType.file:
        return Colors.amberAccent.shade400;
      case LogType.discovery:
        return Colors.limeAccent.shade400;
      case LogType.mitigation:
        return Colors.greenAccent.shade400;
      default:
        return Colors.white;
    }
  }

  Widget _buildSimulationOutput() {
    ScrollController scrollController = ScrollController();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (scrollController.hasClients) {
        scrollController.animateTo(
          scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeOut,
        );
      }
    });

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0C10),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[850]!),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.3 * 255).round()),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 1),
          )
        ],
      ),
      child: ListView.builder(
        controller: scrollController,
        itemCount: _simulationOutputSteps.length,
        itemBuilder: (context, index) {
          final step = _simulationOutputSteps[index];
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  step.displayText,
                  style: TextStyle(
                    fontFamily: 'monospace',
                    fontSize: 13,
                    color: step.isCriticalAlert ? Colors.red.shade400 : _getLogColor(step.logType),
                    fontWeight: step.isCriticalAlert ? FontWeight.bold : FontWeight.normal,
                    height: 1.4,
                  ),
                ),
                if (step.mitreId != null && step.mitreName != null)
                  Padding(
                    padding: const EdgeInsets.only(left: 15.0, top: 1.0, bottom: 2.0),
                    child: Text(
                      '└── MITRE: ${step.mitreId} - ${step.mitreName}',
                      style: TextStyle(
                        fontFamily: 'monospace',
                        fontSize: 11.5,
                        color: Colors.tealAccent.shade400.withAlpha((0.8 * 255).round()),
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ),
                if (step.details != null)
                  Padding(
                    padding: const EdgeInsets.only(left: 15.0, top: 1.0, bottom: 2.0),
                    child: Text(
                      '    └── Details: ${step.details}',
                      style: TextStyle(
                        fontFamily: 'monospace',
                        fontSize: 11.5,
                        color: Colors.grey.shade500,
                      ),
                    ),
                  ),
              ],
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, color: Colors.white70),
          onPressed: () => Navigator.pop(context),
        ),
        title: Row(
          children: [
            AnimatedBuilder(
              animation: _pulseAnimation,
              builder: (context, child) {
                return Transform.scale(
                  scale: _simulationStarted ? _pulseAnimation.value : 1.0,
                  child: const Icon(Icons.security_update_warning_rounded, size: 28),
                );
              },
            ),
            const SizedBox(width: 10),
            const Text('Cyber Attack Simulator'),
          ],
        ),
        actions: [
          if (_simulationStarted || _simulationComplete)
            IconButton(
              icon: const Icon(Icons.refresh_rounded),
              onPressed: _resetSimulation,
              tooltip: 'Reset Simulation',
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            if (!_simulationStarted && !_simulationComplete) ...[
              Expanded(
                child: Center(
                  child: SingleChildScrollView(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        AnimatedBuilder(
                          animation: _pulseAnimation,
                          builder: (context, child) {
                            return Transform.scale(
                              scale: _pulseAnimation.value,
                              child: Icon(
                                Icons.gpp_maybe_outlined,
                                size: 90,
                                color: Colors.red.shade400,
                              ),
                            );
                          },
                        ),
                        const SizedBox(height: 24),
                        Text(
                          'Data Exfiltration & Attack Simulation',
                          style: Theme.of(context).textTheme.headlineLarge?.copyWith(fontSize: 26),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Witness a simulated cyber attack sequence and learn about real-world breach impacts. For educational purposes only.',
                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(fontSize: 16, color: Colors.grey[500]),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 40),
                        ElevatedButton.icon(
                          onPressed: _startSimulation,
                          icon: const Icon(Icons.play_circle_fill_rounded),
                          label: const Text('Launch Simulation'),
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                            textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
            if (_simulationStarted)
              Expanded(
                child: _buildSimulationOutput(),
              ),
            if (_simulationComplete)
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Card(
                        elevation: 3,
                        margin: const EdgeInsets.only(bottom: 24),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: Colors.blueAccent.withAlpha((0.5 * 255).round()), width: 1.5),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(20.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                children: [
                                  const Icon(Icons.task_alt_rounded, color: Colors.blueAccent, size: 28),
                                  const SizedBox(width: 12),
                                  Text(
                                    'Simulation Complete: Post-Incident Analysis',
                                    style: Theme.of(context).textTheme.headlineLarge?.copyWith(fontSize: 20, color: Colors.blueAccent),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 16),
                              Text(
                                'The preceding simulation demonstrated a multi-stage cyber attack leading to data exfiltration. Key phases included initial access, persistence, privilege escalation, discovery, collection, command & control, exfiltration, and defense evasion.',
                                style: Theme.of(context).textTheme.bodyMedium?.copyWith(height: 1.6),
                              ),
                              const SizedBox(height: 12),
                              Text(
                                'Detection & Prevention Opportunities:',
                                style: Theme.of(context).textTheme.headlineLarge?.copyWith(color: Colors.white, fontSize: 16),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                '• Endpoint Detection & Response (EDR) for process injection and anomalous behavior.\n'
                                '• Network monitoring/IDS/IPS for C&C traffic and large data outflows.\n'
                                '• Strong multi-factor authentication (MFA) to prevent initial access.\n'
                                '• Regular patching of vulnerabilities.\n'
                                '• User Account Control (UAC) hardening and principle of least privilege.\n'
                                '• Log monitoring and SIEM for early detection of suspicious activities.',
                                style: Theme.of(context).textTheme.bodyMedium?.copyWith(height: 1.5, fontSize: 13.5),
                              ),
                            ],
                          ),
                        ),
                      ),
                      Text(
                        'Notable Real-World Data Breaches',
                        style: Theme.of(context).textTheme.headlineLarge?.copyWith(fontSize: 22),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Learn from major security incidents that have impacted millions worldwide:',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(fontSize: 14.5),
                      ),
                      const SizedBox(height: 16),
                      ..._realWorldExamples.map((example) => _buildRealWorldExample(example)),
                      const SizedBox(height: 20),
                      Center(
                        child: ElevatedButton.icon(
                          icon: const Icon(Icons.refresh_rounded),
                          label: const Text('Run Simulation Again'),
                          onPressed: _resetSimulation,
                          style: ElevatedButton.styleFrom(backgroundColor: Colors.teal),
                        ),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            if (_showEndButton && !_simulationComplete)
              Center(
                child: Padding(
                  padding: const EdgeInsets.only(top: 20, bottom: 10),
                  child: AnimatedBuilder(
                    animation: _pulseController,
                    builder: (context, child) {
                      return Transform.scale(
                        scale: _pulseController.value * 0.05 + 0.975,
                        child: ElevatedButton.icon(
                          onPressed: _endSimulation,
                          icon: const Icon(Icons.assessment_rounded),
                          label: const Text('View Post-Incident Analysis'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange.shade700,
                            padding: const EdgeInsets.symmetric(horizontal: 28, vertical: 14),
                            textStyle: const TextStyle(fontSize: 17, fontWeight: FontWeight.bold),
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ),
          ],
        ),
      ),
      floatingActionButton: _simulationStarted && !_showEndButton && !_simulationComplete
          ? FloatingActionButton.extended(
              onPressed: () {
                _timer?.cancel();
                if (mounted) {
                  setState(() {
                    _showEndButton = true;
                  });
                }
              },
              backgroundColor: Colors.red.shade700,
              icon: const Icon(Icons.stop_circle_outlined, color: Colors.white),
              label: const Text('Skip to End', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
              tooltip: 'Emergency Stop & View Analysis',
            )
          : null,
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }
}

extension on double {
  double cos() => math.cos(this);
  double sin() => math.sin(this);
}
