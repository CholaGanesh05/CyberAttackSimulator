import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:math' as math; // Used by base app and ransomware parts

// Imports from Ransomware Simulation (already in base_app.dart)
import 'package:lottie/lottie.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:assets_audio_player/assets_audio_player.dart';
import 'package:vibration/vibration.dart';
import 'package:confetti/confetti.dart';

// --- Constants for Option Page (from base_app.dart) ---
const Duration _kBgAnimationDuration = Duration(seconds: 30);
const Duration _kOptionAnimationBaseDuration = Duration(milliseconds: 700);
const Duration _kOptionAnimationStagger = Duration(milliseconds: 150);
const Duration _kOptionEntryDelay = Duration(milliseconds: 400);
const int _kNumBackgroundStars = 40;
const double _kStarBaseRadius = 250.0;
const double _kStarRadiusIncrement = 25.0;

// IMPORTANT: Add these dependencies to your pubspec.yaml:
// dependencies:
//   flutter:
//     sdk: flutter
//   # For Ransomware Simulation (if used)
//   lottie: ^3.1.0 # Check for latest version
//   animated_text_kit: ^4.2.2 # Check for latest version
//   assets_audio_player: ^3.1.1 # Check for latest version
//   vibration: ^1.8.4 # Check for latest version
//   confetti: ^0.7.0 # Check for latest version
//
//   # Phishing simulation does not add new package dependencies beyond Flutter SDK.

// IMPORTANT: Ensure you have the following assets in your `assets/` folder
// and declare them in `pubspec.yaml` if you use the Ransomware Simulation:
// assets:
//   - assets/alert.mp3
//   - assets/glitch.json
//   - assets/data_breach.json
//   - assets/lock.json
//   - assets/skull.json
//   - assets/bitcoin.json
//   - assets/success.json
//   # Add any other assets used by other simulations

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      systemNavigationBarColor: Colors.transparent,
    ),
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Attack Simulation App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.red,
        scaffoldBackgroundColor: Colors.black,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Roboto', // Default font
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(35),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 45, vertical: 18),
          ),
        ),
        outlinedButtonTheme: OutlinedButtonThemeData(
          style: OutlinedButton.styleFrom(
            foregroundColor: Colors.white,
            side: const BorderSide(color: Colors.greenAccent, width: 2),
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
        ),
        textTheme: const TextTheme(
          headlineLarge: TextStyle(
            fontSize: 36,
            fontWeight: FontWeight.bold,
            color: Colors.white,
            letterSpacing: 3.0,
          ),
          bodyMedium: TextStyle(color: Colors.grey, fontSize: 15, height: 1.5),
        ),
      ),
      home: const SplashScreen(),
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with TickerProviderStateMixin {
  late AnimationController _logoController;
  late AnimationController _textController;
  late AnimationController _buttonController;
  late AnimationController _backgroundController;

  late Animation<double> _logoAnimation;
  late Animation<double> _textAnimation;
  late Animation<double> _buttonAnimation;
  late Animation<double> _backgroundAnimation;
  late Animation<double> _rotationAnimation;

  @override
  void initState() {
    super.initState();

    _logoController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    _textController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _buttonController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _backgroundController = AnimationController(
      duration: const Duration(seconds: 4),
      vsync: this,
    );

    _logoAnimation = CurvedAnimation(
      parent: _logoController,
      curve: Curves.elasticOut,
    );
    _textAnimation = CurvedAnimation(
      parent: _textController,
      curve: Curves.easeOutBack,
    );
    _buttonAnimation = CurvedAnimation(
      parent: _buttonController,
      curve: Curves.bounceOut,
    );
    _backgroundAnimation = CurvedAnimation(
      parent: _backgroundController,
      curve: Curves.linear,
    );
    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(_backgroundController);

    _startAnimationSequence();
  }

  void _startAnimationSequence() {
    _backgroundController.repeat();

    Timer(const Duration(milliseconds: 500), () {
      if (mounted) _logoController.forward();
    });

    Timer(const Duration(milliseconds: 2000), () {
      if (mounted) _textController.forward();
    });

    Timer(const Duration(milliseconds: 3000), () {
      if (mounted) _buttonController.forward();
    });
  }

  @override
  void dispose() {
    _logoController.dispose();
    _textController.dispose();
    _buttonController.dispose();
    _backgroundController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_backgroundAnimation, _rotationAnimation]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5 + _backgroundAnimation.value * 0.5,
                colors: [
                  Colors.red.withOpacity(0.15),
                  Colors.grey[900]!.withOpacity(0.8),
                  Colors.black,
                ],
              ),
            ),
            child: Stack(
              children: [
                ...List.generate(20, (index) {
                  final angle =
                      (index * 18.0) +
                      (_rotationAnimation.value * 180 / math.pi);
                  final radius = 150.0 + (index * 15);
                  return Positioned(
                    left:
                        MediaQuery.of(context).size.width / 2 +
                        (radius * 0.5) * math.cos(angle * math.pi / 180) -
                        2,
                    top:
                        MediaQuery.of(context).size.height / 2 +
                        (radius * 0.3) * math.sin(angle * math.pi / 180) -
                        2,
                    child: Container(
                      width: 4,
                      height: 4,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.redAccent.withOpacity(
                          0.3 - (index * 0.01),
                        ),
                      ),
                    ),
                  );
                }),
                Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      ScaleTransition(
                        scale: _logoAnimation,
                        child: Container(
                          padding: const EdgeInsets.all(30),
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.redAccent.withOpacity(0.6),
                              width: 3,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.4),
                                blurRadius: 30,
                                spreadRadius: 8,
                              ),
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.2),
                                blurRadius: 60,
                                spreadRadius: 15,
                              ),
                            ],
                          ),
                          child: AnimatedBuilder(
                            animation: _rotationAnimation,
                            builder: (context, child) {
                              return Transform.rotate(
                                angle: _rotationAnimation.value * 0.1,
                                child: const Icon(
                                  Icons.shield,
                                  size: 90,
                                  color: Colors.redAccent,
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      SlideTransition(
                        position: Tween<Offset>(
                          begin: const Offset(0, 1),
                          end: Offset.zero,
                        ).animate(_textAnimation),
                        child: FadeTransition(
                          opacity: _textAnimation,
                          child: Column(
                            children: [
                              Text(
                                'Welcome',
                                style: Theme.of(context).textTheme.headlineLarge
                                    ?.copyWith(
                                      shadows: [
                                        Shadow(
                                          color: Colors.redAccent.withOpacity(
                                            0.5,
                                          ),
                                          blurRadius: 10,
                                          offset: const Offset(0, 0),
                                        ),
                                      ],
                                    ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'to the Simulation',
                                style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.grey[400],
                                  letterSpacing: 1.5,
                                  fontWeight: FontWeight.w300,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 60),
                      ScaleTransition(
                        scale: _buttonAnimation,
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(35),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.redAccent.withOpacity(0.3),
                                blurRadius: 20,
                                spreadRadius: 5,
                              ),
                            ],
                          ),
                          child: ElevatedButton(
                            onPressed: () {
                              HapticFeedback.heavyImpact();
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      const SimulationSelectionPage(),
                                  settings: const RouteSettings(
                                    name: '/simulation_selection',
                                  ), // Added for popUntil
                                ),
                              );
                            },
                            style: Theme.of(context).elevatedButtonTheme.style
                                ?.copyWith(
                                  backgroundColor: WidgetStateProperty.all(
                                    Colors.redAccent,
                                  ),
                                  foregroundColor: WidgetStateProperty.all(
                                    Colors.white,
                                  ),
                                ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                const Icon(Icons.play_arrow, size: 28),
                                const SizedBox(width: 12),
                                Text(
                                  'Simulate Attack',
                                  style: Theme.of(context).textTheme.bodyMedium
                                      ?.copyWith(
                                        fontSize: 18,
                                        fontWeight: FontWeight.w600,
                                        letterSpacing: 0.5,
                                        color: Colors.white,
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 40),
                      FadeTransition(
                        opacity: _buttonAnimation,
                        child: Text(
                          'Experience advanced cybersecurity scenarios',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[500],
                            letterSpacing: 1.0,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

class SimulationSelectionPage extends StatefulWidget {
  const SimulationSelectionPage({super.key});

  @override
  _SimulationSelectionPageState createState() =>
      _SimulationSelectionPageState();
}

class _SimulationSelectionPageState extends State<SimulationSelectionPage>
    with TickerProviderStateMixin {
  late List<AnimationController> _optionControllers;
  late List<Animation<double>> _optionScaleAnimations;
  late List<Animation<double>> _optionFadeAnimations;

  late AnimationController _bgController;
  late Animation<double> _rotationAnimation;

  late List<AnimationController> _starPulseControllers;
  late List<Animation<double>> _starPulseAnimations;
  final math.Random _random = math.Random();

  int? _selectedIndex;
  bool _showDetails = false;

  final List<SimulationOption> _options = [
    SimulationOption(
      title: "Phishing Simulation", // This will now launch the EmailInboxScreen
      icon: Icons.email_outlined, // Changed icon
      description:
          "Test your ability to spot malicious emails and avoid phishing traps.",
      color: Colors.orangeAccent.shade400, // Changed color
      details: """
      This simulation immerses you in a realistic email inbox environment. 
      Your task is to identify and avoid clicking on phishing emails. 
      Clicking a malicious email will trigger a simulated compromise. 
      Learn to recognize red flags and protect your sensitive information.
      """,
    ),
    SimulationOption(
      title: "Ransomware Attack",
      icon: Icons.lock_rounded,
      description:
          "Simulate ransomware attacks that encrypt files and demand payment.",
      color: Colors.redAccent.shade400,
      details: """
      In this simulation, you'll face a scenario where ransomware infects your system, 
      encrypting critical files and demanding a ransom for decryption. You'll need to 
      identify warning signs, respond to the attack, and learn strategies to prevent 
      data loss and mitigate damage. This simulation launches a fake app environment.
      """,
    ),
    SimulationOption(
      title: "Data Exfiltration",
      icon: Icons.security_rounded,
      description:
          "Simulate sensitive data extraction and endpoint compromise.",
      color: Colors.purpleAccent.shade400,
      details: """
      This scenario simulates attempts to steal sensitive data from your device. 
      You'll encounter situations where malware or unauthorized processes try to 
      access and transmit your files. Your task is to detect and prevent these 
      data exfiltration attempts.
      """,
    ),
  ];

  @override
  void initState() {
    super.initState();

    _bgController = AnimationController(
      duration: _kBgAnimationDuration,
      vsync: this,
    )..repeat();

    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(CurvedAnimation(parent: _bgController, curve: Curves.linear));

    _optionControllers = List.generate(
      _options.length,
      (index) => AnimationController(
        duration:
            _kOptionAnimationBaseDuration + (_kOptionAnimationStagger * index),
        vsync: this,
      ),
    );

    _optionScaleAnimations = _optionControllers
        .map<Animation<double>>(
          (controller) =>
              CurvedAnimation(parent: controller, curve: Curves.elasticOut),
        )
        .toList();

    _optionFadeAnimations = _optionControllers
        .map<Animation<double>>(
          (controller) => Tween<double>(
            begin: 0.0,
            end: 1.0,
          ).animate(CurvedAnimation(parent: controller, curve: Curves.easeOut)),
        )
        .toList();

    _starPulseControllers = List.generate(_kNumBackgroundStars, (index) {
      return AnimationController(
        duration: Duration(milliseconds: 1500 + _random.nextInt(1000)),
        vsync: this,
      )..repeat(reverse: true);
    });

    _starPulseAnimations = _starPulseControllers.map<Animation<double>>((
      controller,
    ) {
      return Tween<double>(
        begin: 0.4,
        end: 1.0,
      ).animate(CurvedAnimation(parent: controller, curve: Curves.easeInOut));
    }).toList();

    Future.delayed(_kOptionEntryDelay, () {
      for (var controller in _optionControllers) {
        if (mounted) controller.forward();
      }
    });
  }

  @override
  void dispose() {
    _bgController.dispose();
    for (var controller in _optionControllers) {
      controller.dispose();
    }
    for (var controller in _starPulseControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  void _handleSelection(int index) {
    HapticFeedback.mediumImpact();
    setState(() {
      if (_selectedIndex == index) {
        _showDetails = !_showDetails;
      } else {
        _selectedIndex = index;
        _showDetails = true;
      }
    });
  }

  void _closeDetails() {
    setState(() {
      _showDetails = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.sizeOf(context);

    return Scaffold(
      body: AnimatedBuilder(
        animation: Listenable.merge([_bgController, ..._starPulseControllers]),
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.center,
                radius: 1.5,
                colors: [
                  Colors.deepPurple.shade900.withOpacity(0.2),
                  Colors.black87,
                  Colors.black,
                ],
                stops: const [0.0, 0.6, 1.0],
              ),
            ),
            child: Stack(
              children: [
                ...List.generate(_kNumBackgroundStars, (index) {
                  final angle =
                      (index * (360.0 / _kNumBackgroundStars)) +
                      (_rotationAnimation.value * 180 / math.pi * 0.5);
                  final distanceFactor = 0.8 + (_random.nextDouble() * 0.4);
                  final radius =
                      (_kStarBaseRadius +
                          (index % 10 * _kStarRadiusIncrement)) *
                      distanceFactor;
                  final starSize = 1.5 + _random.nextDouble() * 2.5;

                  return Positioned(
                    left:
                        screenSize.width / 2 +
                        (radius * 0.7) * math.cos(angle * math.pi / 180) -
                        starSize / 2,
                    top:
                        screenSize.height / 2 +
                        (radius * 0.5) * math.sin(angle * math.pi / 180) -
                        starSize / 2,
                    child: FadeTransition(
                      opacity: _starPulseAnimations[index],
                      child: Container(
                        width: starSize,
                        height: starSize,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.redAccent.withOpacity(
                            0.3 + _random.nextDouble() * 0.3,
                          ),
                        ),
                      ),
                    ),
                  );
                }),
                SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 10,
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        AppBar(
                          leading: IconButton(
                            icon: const Icon(
                              Icons.arrow_back_ios_new,
                              color: Colors.white70,
                            ),
                            onPressed: () => Navigator.pop(context),
                          ),
                          title: Text(
                            'Select Simulation Scenario',
                            style: TextStyle(
                              color: Colors.white.withOpacity(0.85),
                              fontWeight: FontWeight.w300,
                              letterSpacing: 0.5,
                            ),
                          ),
                          backgroundColor: Colors.transparent,
                          elevation: 0,
                          centerTitle: true,
                        ),
                        if (_showDetails && _selectedIndex != null) ...[
                          _buildDetailsPanel(
                            context,
                            _options[_selectedIndex!],
                          ),
                          const SizedBox(height: 20),
                        ],
                        Expanded(
                          child: Center(
                            child: SingleChildScrollView(
                              padding: const EdgeInsets.symmetric(vertical: 20),
                              child: Wrap(
                                alignment: WrapAlignment.center,
                                crossAxisAlignment: WrapCrossAlignment.center,
                                spacing: 30,
                                runSpacing: 30,
                                children: List.generate(_options.length, (
                                  index,
                                ) {
                                  final isSelected = _selectedIndex == index;
                                  return FadeTransition(
                                    opacity: _optionFadeAnimations[index],
                                    child: ScaleTransition(
                                      scale: _optionScaleAnimations[index],
                                      child: SimulationCard(
                                        option: _options[index],
                                        isSelected: isSelected,
                                        onTap: () => _handleSelection(index),
                                      ),
                                    ),
                                  );
                                }),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildDetailsPanel(BuildContext context, SimulationOption option) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      margin: const EdgeInsets.symmetric(horizontal: 20),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.8),
        borderRadius: BorderRadius.circular(15),
        border: Border.all(color: option.color.withOpacity(0.5), width: 1.5),
        boxShadow: [
          BoxShadow(
            color: option.color.withOpacity(0.2),
            blurRadius: 20,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                // Allow title to wrap if too long
                child: Text(
                  option.title,
                  style: const TextStyle(
                    fontSize: 22,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              IconButton(
                icon: const Icon(Icons.close, color: Colors.white70),
                onPressed: _closeDetails,
              ),
            ],
          ),
          const SizedBox(height: 10),
          Divider(color: option.color.withOpacity(0.5)),
          const SizedBox(height: 15),
          Text(
            option.details,
            style: TextStyle(
              color: Colors.grey[300],
              fontSize: 16,
              height: 1.6,
            ),
          ),
          const SizedBox(height: 20),
          Center(
            child: ElevatedButton(
              onPressed: () {
                if (option.title == "Data Exfiltration") {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const SimulationHomePage(),
                    ),
                  );
                } else if (option.title == "Ransomware Attack") {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const FakeAppLauncher(),
                    ),
                  );
                } else if (option.title == "Phishing Simulation") {
                  // Added
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const EmailInboxScreen(),
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Starting ${option.title}...'),
                      backgroundColor: option.color,
                    ),
                  );
                }
              },
              style: Theme.of(context).elevatedButtonTheme.style?.copyWith(
                backgroundColor: WidgetStateProperty.all(
                  option.color.withOpacity(0.2),
                ),
                foregroundColor: WidgetStateProperty.all(option.color),
                side: WidgetStateProperty.all(
                  BorderSide(color: option.color.withOpacity(0.8)),
                ),
                shape: WidgetStateProperty.all(
                  RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                padding: WidgetStateProperty.all(
                  const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                ),
              ),
              child: Text(
                'Start Simulation',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: option.color,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class SimulationCard extends StatefulWidget {
  final SimulationOption option;
  final bool isSelected;
  final VoidCallback onTap;

  const SimulationCard({
    super.key,
    required this.option,
    required this.isSelected,
    required this.onTap,
  });

  @override
  _SimulationCardState createState() => _SimulationCardState();
}

class _SimulationCardState extends State<SimulationCard> {
  bool _isHovered = false;

  @override
  Widget build(BuildContext context) {
    final option = widget.option;
    final isSelected = widget.isSelected;
    final cardWidth = MediaQuery.sizeOf(context).width > 700 ? 320.0 : 280.0;

    return MouseRegion(
      onEnter: (_) => setState(() => _isHovered = true),
      onExit: (_) => setState(() => _isHovered = false),
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: widget.onTap,
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
          width: cardWidth,
          padding: const EdgeInsets.all(25),
          decoration: BoxDecoration(
            color: _isHovered || isSelected
                ? Colors.grey[850]!.withOpacity(0.8)
                : Colors.grey[900]!.withOpacity(0.7),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: option.color.withOpacity(
                _isHovered || isSelected ? 0.7 : 0.4,
              ),
              width: _isHovered || isSelected ? 2.5 : 2,
            ),
            boxShadow: [
              BoxShadow(
                color: option.color.withOpacity(
                  _isHovered || isSelected ? 0.4 : 0.25,
                ),
                blurRadius: _isHovered || isSelected ? 25 : 15,
                spreadRadius: _isHovered || isSelected ? 4 : 2,
              ),
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 10,
                offset: const Offset(0, 5),
              ),
            ],
            gradient: (_isHovered || isSelected)
                ? LinearGradient(
                    colors: [
                      option.color.withOpacity(0.1),
                      Colors.grey[850]!.withOpacity(0.1),
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  )
                : null,
          ),
          transform: (_isHovered || isSelected)
              ? (Matrix4.identity()..scale(1.03))
              : Matrix4.identity(),
          transformAlignment: Alignment.center,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(
                option.icon,
                size: 50,
                color: option.color.withOpacity(
                  _isHovered || isSelected ? 1.0 : 0.8,
                ),
              ),
              const SizedBox(height: 20),
              Text(
                option.title,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 22,
                  color: Colors.white.withOpacity(0.95),
                  fontWeight: FontWeight.w600,
                  letterSpacing: 0.8,
                ),
              ),
              const SizedBox(height: 15),
              Text(
                option.description,
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.bodyMedium,
              ),
              const SizedBox(height: 25),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 10,
                ),
                decoration: BoxDecoration(
                  color: option.color.withOpacity(
                    _isHovered || isSelected ? 0.25 : 0.15,
                  ),
                  borderRadius: BorderRadius.circular(30),
                  border: Border.all(color: option.color.withOpacity(0.5)),
                ),
                child: Text(
                  "Details & Start",
                  style: TextStyle(
                    color: option.color,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class SimulationOption {
  final String title;
  final IconData icon;
  final String description;
  final String details;
  final Color color;

  SimulationOption({
    required this.title,
    required this.icon,
    required this.description,
    required this.color,
    required this.details,
  });
}

// --- Data Exfiltration Simulation ---
// (Code for SimulationHomePage, AttackStep, LogType, etc. remains here)
// ... (omitted for brevity, it's the same as in your 'code 1: main' before the Ransomware part)

enum LogType { action, info, alert, network, file, mitigation, discovery }

class AttackStep {
  final String displayText;
  final String? mitreId;
  final String? mitreName;
  final bool isCriticalAlert;
  final Duration delayAfter;
  final LogType logType;
  final String? details;

  AttackStep({
    required this.displayText,
    this.mitreId,
    this.mitreName,
    this.isCriticalAlert = false,
    this.delayAfter = const Duration(milliseconds: 600),
    this.logType = LogType.info,
    this.details,
  });
}

class SimulationHomePage extends StatefulWidget {
  const SimulationHomePage({super.key});

  @override
  _SimulationHomePageState createState() => _SimulationHomePageState();
}

class _SimulationHomePageState extends State<SimulationHomePage>
    with TickerProviderStateMixin {
  bool _simulationStarted = false;
  bool _showEndButton = false;
  bool _simulationComplete = false;
  List<AttackStep> _simulationOutputSteps = [];
  int _currentStepIndex = 0;
  Timer? _timer;

  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;

  final List<AttackStep> _scenarioAttackSteps = [
    // Keep this data for the Data Exfiltration sim
    AttackStep(
      displayText:
          '[INITIATION] Connecting to compromised endpoint: WORKSTATION-7834...',
      logType: LogType.network,
    ),
    AttackStep(
      displayText:
          '[PERSISTENCE] Establishing persistence via registry modification...',
      mitreId: 'T1547.001',
      mitreName: 'Boot or Logon Autostart Execution: Registry Run Keys',
      logType: LogType.action,
    ),
    // ... (rest of _scenarioAttackSteps as in your original code)
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Attempting to bypass Windows Defender real-time protection...',
      mitreId: 'T1562.001',
      mitreName: 'Impair Defenses: Disable or Modify Tools',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Defender bypass successful. Real-time monitoring temporarily disabled.',
      logType: LogType.info,
    ),
    AttackStep(
      displayText:
          '[EXECUTION] Injecting stealth payload into explorer.exe process (PID: 1788)...',
      mitreId: 'T1055',
      mitreName: 'Process Injection',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[PRIVILEGE ESCALATION] Escalating privileges using UAC bypass technique (SilentCleanup task)...',
      mitreId: 'T1548.002',
      mitreName:
          'Abuse Elevation Control Mechanism: Bypass User Account Control',
      logType: LogType.action,
    ),
    AttackStep(
      displayText: '[PRIVILEGE ESCALATION] Achieved SYSTEM level privileges.',
      logType: LogType.info,
    ),
    AttackStep(
      displayText:
          '[DISCOVERY] Enumerating network shares and mapped drives (Net Share, Net Use)...',
      mitreId: 'T1135',
      mitreName: 'Network Share Discovery',
      logType: LogType.discovery,
    ),
    AttackStep(
      displayText:
          '[DISCOVERY] Scanning C:\\Users\\%USERNAME%\\Documents for sensitive files (keywords: confidential, private, report)...',
      mitreId: 'T1083',
      mitreName: 'File and Directory Discovery',
      logType: LogType.discovery,
    ),
    AttackStep(
      displayText: '[COLLECTION] Located: customer_database.xlsx (2.1 MB)',
      logType: LogType.file,
      details: "Contains PII and financial data.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Located: financial_records_q4_2024.pdf (854 KB)',
      logType: LogType.file,
      details: "Quarterly financial statements.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Located: employee_ssn_list_encrypted.csv.aes (234 KB)',
      logType: LogType.file,
      details: "AES encrypted, requires key.",
    ),
    AttackStep(
      displayText: '[COLLECTION] Located: credit_card_data_archive.zip (67 KB)',
      logType: LogType.file,
      details: "Protected with weak password 'password123'.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Located: project_phoenix_contracts.zip (1.8 MB)',
      logType: LogType.file,
      details: "Sensitive R&D contracts.",
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Attempting to decrypt employee_ssn_list_encrypted.csv.aes using common keys... Failed.',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COLLECTION] Brute-forcing credit_card_data_archive.zip password... Success! Password: password123',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMMAND & CONTROL] Staging selected files for exfiltration in C:\\Windows\\Temp\\stage\\...',
      mitreId: 'T1074',
      mitreName: 'Data Staged',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          r'[COMMAND & CONTROL] Compressing staged files using 7zip with AES-256 encryption (password: ComplexP@$$w0rd!)...',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMMAND & CONTROL] Compressed archive: exfil_data.7z (3.9 MB)',
      logType: LogType.file,
    ),
    AttackStep(
      displayText:
          '[EXFILTRATION] Splitting archive into 8x 512KB chunks to evade DLP detection...',
      mitreId: 'T1030',
      mitreName: 'Data Transfer Size Limits',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMMAND & CONTROL] Establishing encrypted tunnel to C&C server 185.220.101.47:443 (HTTPS)...',
      mitreId: 'T1573.002',
      mitreName: 'Encrypted Channel: Asymmetric Cryptography',
      logType: LogType.network,
    ),
    AttackStep(
      displayText:
          '[EXFILTRATION] Using HTTPS traffic to blend with normal web activity (User-Agent: Chrome/99.0.4844.84)...',
      mitreId: 'T1071.001',
      mitreName: 'Application Layer Protocol: Web Protocols',
      logType: LogType.network,
    ),
    ...List.generate(
      8,
      (i) => AttackStep(
        displayText:
            '[EXFILTRATION] Uploading chunk ${i + 1}/8... [${"█".padRight(i + 1, "█")}${" ".padRight(8 - (i + 1), " ")}] ${((i + 1) / 8 * 100).toStringAsFixed(0)}%',
        logType: LogType.network,
        delayAfter: const Duration(milliseconds: 300),
      ),
    ),
    AttackStep(
      displayText: '[EXFILTRATION] All chunks uploaded successfully.',
      logType: LogType.network,
    ),
    AttackStep(
      displayText: '[IMPACT] Total data exfiltrated: 3.9 MB over 52 seconds.',
      logType: LogType.info,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Clearing event logs (System, Security, Application)...',
      mitreId: 'T1070.001',
      mitreName: 'Indicator Removal: Clear Windows Event Logs',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Removing temporary files and staging directory (C:\\Windows\\Temp\\stage\\)...',
      mitreId: 'T1070.004',
      mitreName: 'Indicator Removal: File Deletion',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[DEFENSE EVASION] Restoring Windows Defender settings and terminating malicious processes...',
      logType: LogType.action,
    ),
    AttackStep(
      displayText:
          '[COMPLETION] Exfiltration complete. Connection to C&C server closed. Footprints minimized.',
      logType: LogType.info,
      delayAfter: const Duration(milliseconds: 1500),
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText:
          '🔴🔴🔴 SECURITY OPERATIONS CENTER (SOC) ALERT TRIGGERED 🔴🔴🔴',
      isCriticalAlert: true,
      logType: LogType.alert,
      delayAfter: const Duration(milliseconds: 1000),
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText: 'INCIDENT ID: INC-2024-0715-003',
      logType: LogType.alert,
    ),
    AttackStep(displayText: 'SEVERITY: CRITICAL', logType: LogType.alert),
    AttackStep(
      displayText:
          'CLASSIFICATION: Confirmed Data Breach | Active Exfiltration',
      logType: LogType.alert,
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText: 'Anomalous Activity Detected:',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Unusual outbound HTTPS traffic volume to untrusted IP (185.220.101.47)',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Multiple sensitive file accesses from non-standard process (explorer.exe child)',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Process injection detected: explorer.exe -> [random_name].exe',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText:
          '  • Registry modifications in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run',
      logType: LogType.alert,
    ),
    AttackStep(
      displayText: '  • Windows Event Logs cleared or tampered.',
      logType: LogType.alert,
    ),
    AttackStep(displayText: '', logType: LogType.info),
    AttackStep(
      displayText:
          '[MITIGATION] RECOMMENDATION: Activate Level 1 Incident Response Protocol IMMEDIATELY.',
      logType: LogType.mitigation,
    ),
    AttackStep(
      displayText:
          '[MITIGATION] NEXT STEPS: Isolate WORKSTATION-7834, preserve forensic evidence, block C&C IP.',
      logType: LogType.mitigation,
    ),
  ];

  final List<Map<String, String>> _realWorldExamples = [
    // Keep this data for Data Exfiltration sim
    {
      'company': 'Equifax (2017)',
      'impact': '147 million records compromised',
      'method': 'Web application vulnerability (Apache Struts)',
      'data': 'SSNs, birth dates, addresses, credit card numbers',
      'cost': '\$1.4 billion+ in total costs',
      'lesson': 'Importance of timely patching and vulnerability management.',
    },
    // ... (rest of _realWorldExamples as in your original code)
    {
      'company': 'Capital One (2019)',
      'impact': '100 million+ customers affected',
      'method': 'Misconfigured AWS S3 bucket (SSRF to WAF)',
      'data': 'Credit applications, SSNs, bank account numbers',
      'cost': '\$270 million in fines and costs',
      'lesson':
          'Cloud security misconfigurations are a major risk. Proper IAM and WAF tuning is crucial.',
    },
    {
      'company': 'SolarWinds (SUNBURST - 2020)',
      'impact': '18,000+ organizations compromised (incl. US Gov)',
      'method': 'Supply chain attack via trojanized software update',
      'data': 'Varied government and corporate sensitive data',
      'cost': 'Estimated \$100+ billion global impact',
      'lesson':
          'Supply chain attacks are sophisticated and hard to detect. Trust but verify software updates.',
    },
    {
      'company': 'Colonial Pipeline (2021)',
      'impact': 'US fuel supply disrupted for days',
      'method':
          'Ransomware (DarkSide) via compromised VPN (single-factor auth)',
      'data': 'Operational systems and business data',
      'cost': '\$4.4 million ransom paid + significant operational losses',
      'lesson':
          'Critical infrastructure is a target. Multi-Factor Authentication (MFA) is essential everywhere.',
    },
  ];

  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);

    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.05).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _timer?.cancel();
    _pulseController.dispose();
    super.dispose();
  }

  void _startSimulation() async {
    if (mounted) {
      setState(() {
        _simulationStarted = true;
        _simulationOutputSteps = [];
        _currentStepIndex = 0;
        _simulationComplete = false;
        _showEndButton = false;
      });
    }

    _timer = Timer.periodic(const Duration(milliseconds: 500), (timer) {
      if (!mounted) {
        timer.cancel();
        return;
      }
      if (_currentStepIndex < _scenarioAttackSteps.length) {
        final currentStep = _scenarioAttackSteps[_currentStepIndex];
        if (mounted) {
          setState(() {
            _simulationOutputSteps.add(currentStep);
            _currentStepIndex++;
          });
        }

        if (currentStep.isCriticalAlert) {
          HapticFeedback.heavyImpact();
        }
      } else {
        timer.cancel();
        if (mounted) {
          setState(() {
            _showEndButton = true;
          });
        }
      }
    });
  }

  void _endSimulation() {
    _timer?.cancel();
    if (mounted) {
      setState(() {
        _simulationStarted = false;
        _showEndButton = false;
        _simulationComplete = true;
      });
    }
  }

  void _resetSimulation() {
    _timer?.cancel();
    if (mounted) {
      setState(() {
        _simulationStarted = false;
        _showEndButton = false;
        _simulationComplete = false;
        _simulationOutputSteps = [];
        _currentStepIndex = 0;
      });
    }
  }

  Widget _buildRealWorldExample(Map<String, String> example) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(
                  Icons.warning_amber_rounded,
                  color: Colors.orangeAccent,
                  size: 24,
                ),
                const SizedBox(width: 10),
                Text(
                  example['company']!,
                  style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                    fontSize: 18,
                    color: Colors.orangeAccent,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            _buildDetailRow(
              'Impact:',
              example['impact']!,
              Colors.redAccent.shade100,
            ),
            _buildDetailRow(
              'Attack Method:',
              example['method']!,
              Colors.blueAccent.shade100,
            ),
            _buildDetailRow(
              'Data Compromised:',
              example['data']!,
              Colors.purpleAccent.shade100,
            ),
            _buildDetailRow(
              'Financial Cost:',
              example['cost']!,
              Colors.red.shade300,
            ),
            if (example['lesson'] != null && example['lesson']!.isNotEmpty)
              _buildDetailRow(
                'Key Lesson:',
                example['lesson']!,
                Colors.greenAccent.shade100,
                isLesson: true,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(
    String label,
    String value,
    Color labelColor, {
    bool isLesson = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: isLesson ? 90 : 130,
            child: Text(
              label,
              style: TextStyle(
                color: labelColor,
                fontWeight: FontWeight.w600,
                fontSize: 13.5,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: Colors.grey[300],
                fontSize: 13.5,
                height: 1.4,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getLogColor(LogType logType) {
    switch (logType) {
      case LogType.action:
        return Colors.cyanAccent.shade400;
      case LogType.info:
        return Colors.grey.shade400;
      case LogType.alert:
        return Colors.redAccent.shade400;
      case LogType.network:
        return Colors.lightBlueAccent.shade200;
      case LogType.file:
        return Colors.amberAccent.shade400;
      case LogType.discovery:
        return Colors.limeAccent.shade400;
      case LogType.mitigation:
        return Colors.greenAccent.shade400;
      default:
        return Colors.white;
    }
  }

  Widget _buildSimulationOutput() {
    ScrollController scrollController = ScrollController();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (scrollController.hasClients &&
          scrollController.position.hasContentDimensions) {
        scrollController.animateTo(
          scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeOut,
        );
      }
    });

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0C10),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[850]!),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.3 * 255).round()),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      child: ListView.builder(
        controller: scrollController,
        itemCount: _simulationOutputSteps.length,
        itemBuilder: (context, index) {
          final step = _simulationOutputSteps[index];
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  step.displayText,
                  style: TextStyle(
                    fontFamily: 'monospace',
                    fontSize: 13,
                    color: step.isCriticalAlert
                        ? Colors.red.shade400
                        : _getLogColor(step.logType),
                    fontWeight: step.isCriticalAlert
                        ? FontWeight.bold
                        : FontWeight.normal,
                    height: 1.4,
                  ),
                ),
                if (step.mitreId != null && step.mitreName != null)
                  Padding(
                    padding: const EdgeInsets.only(
                      left: 15.0,
                      top: 1.0,
                      bottom: 2.0,
                    ),
                    child: Text(
                      '└── MITRE: ${step.mitreId} - ${step.mitreName}',
                      style: TextStyle(
                        fontFamily: 'monospace',
                        fontSize: 11.5,
                        color: Colors.tealAccent.shade400.withAlpha(
                          (0.8 * 255).round(),
                        ),
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ),
                if (step.details != null)
                  Padding(
                    padding: const EdgeInsets.only(
                      left: 15.0,
                      top: 1.0,
                      bottom: 2.0,
                    ),
                    child: Text(
                      '    └── Details: ${step.details}',
                      style: TextStyle(
                        fontFamily: 'monospace',
                        fontSize: 11.5,
                        color: Colors.grey.shade500,
                      ),
                    ),
                  ),
              ],
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, color: Colors.white70),
          onPressed: () => Navigator.pop(context),
        ),
        title: Row(
          children: [
            AnimatedBuilder(
              animation: _pulseAnimation,
              builder: (context, child) {
                return Transform.scale(
                  scale: _simulationStarted ? _pulseAnimation.value : 1.0,
                  child: const Icon(
                    Icons.security_update_warning_rounded,
                    size: 28,
                  ),
                );
              },
            ),
            const SizedBox(width: 10),
            const Text('Data Exfiltration Sim'), // Shortened title
          ],
        ),
        actions: [
          if (_simulationStarted || _simulationComplete)
            IconButton(
              icon: const Icon(Icons.refresh_rounded),
              onPressed: _resetSimulation,
              tooltip: 'Reset Simulation & Start Over',
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            if (!_simulationStarted && !_simulationComplete) ...[
              Expanded(
                child: Center(
                  child: SingleChildScrollView(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        AnimatedBuilder(
                          animation: _pulseAnimation,
                          builder: (context, child) {
                            return Transform.scale(
                              scale: _pulseAnimation.value,
                              child: Icon(
                                Icons.gpp_maybe_outlined,
                                size: 90,
                                color: Colors.red.shade400,
                              ),
                            );
                          },
                        ),
                        const SizedBox(height: 24),
                        Text(
                          'Data Exfiltration Attack',
                          style: Theme.of(context).textTheme.headlineLarge
                              ?.copyWith(fontSize: 26, color: Colors.white),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Witness a simulated cyber attack sequence leading to data theft. For educational purposes only.',
                          style: Theme.of(context).textTheme.bodyMedium
                              ?.copyWith(fontSize: 16, color: Colors.grey[400]),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 40),
                        ElevatedButton.icon(
                          onPressed: _startSimulation,
                          icon: const Icon(Icons.play_circle_fill_rounded),
                          label: const Text('Launch Simulation'),
                          style: Theme.of(context).elevatedButtonTheme.style
                              ?.copyWith(
                                // Use global theme
                                backgroundColor: WidgetStateProperty.all(
                                  Colors.purpleAccent.shade400,
                                ),
                              ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
            if (_simulationStarted) Expanded(child: _buildSimulationOutput()),
            if (_simulationComplete)
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Card(
                        elevation: 3,
                        margin: const EdgeInsets.only(bottom: 24),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(
                            color: Colors.blueAccent.withAlpha(
                              (0.5 * 255).round(),
                            ),
                            width: 1.5,
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(20.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                children: [
                                  const Icon(
                                    Icons.task_alt_rounded,
                                    color: Colors.blueAccent,
                                    size: 28,
                                  ),
                                  const SizedBox(width: 12),
                                  Text(
                                    'Simulation Complete: Post-Incident Analysis',
                                    style: Theme.of(context)
                                        .textTheme
                                        .headlineLarge
                                        ?.copyWith(
                                          fontSize: 20,
                                          color: Colors.blueAccent,
                                        ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 16),
                              Text(
                                'The preceding simulation demonstrated a multi-stage cyber attack leading to data exfiltration. Key phases included initial access, persistence, privilege escalation, discovery, collection, command & control, exfiltration, and defense evasion.',
                                style: Theme.of(context).textTheme.bodyMedium
                                    ?.copyWith(
                                      height: 1.6,
                                      color: Colors.grey[300],
                                    ),
                              ),
                              const SizedBox(height: 12),
                              Text(
                                'Detection & Prevention Opportunities:',
                                style: Theme.of(context).textTheme.headlineLarge
                                    ?.copyWith(
                                      color: Colors.white,
                                      fontSize: 16,
                                    ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                '• Endpoint Detection & Response (EDR) for process injection and anomalous behavior.\n'
                                '• Network monitoring/IDS/IPS for C&C traffic and large data outflows.\n'
                                '• Strong multi-factor authentication (MFA) to prevent initial access.\n'
                                '• Regular patching of vulnerabilities.\n'
                                '• User Account Control (UAC) hardening and principle of least privilege.\n'
                                '• Log monitoring and SIEM for early detection of suspicious activities.',
                                style: Theme.of(context).textTheme.bodyMedium
                                    ?.copyWith(
                                      height: 1.5,
                                      fontSize: 13.5,
                                      color: Colors.grey[400],
                                    ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      Text(
                        'Notable Real-World Data Breaches',
                        style: Theme.of(context).textTheme.headlineLarge
                            ?.copyWith(fontSize: 22, color: Colors.white),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Learn from major security incidents that have impacted millions worldwide:',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          fontSize: 14.5,
                          color: Colors.grey[400],
                        ),
                      ),
                      const SizedBox(height: 16),
                      ..._realWorldExamples.map(
                        (example) => _buildRealWorldExample(example),
                      ),
                      const SizedBox(height: 20),
                      Center(
                        child: ElevatedButton.icon(
                          icon: const Icon(Icons.refresh_rounded),
                          label: const Text('Run Simulation Again'),
                          onPressed: _resetSimulation,
                          style: Theme.of(context).elevatedButtonTheme.style
                              ?.copyWith(
                                // Use global theme
                                backgroundColor: WidgetStateProperty.all(
                                  Colors.teal,
                                ),
                              ),
                        ),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            if (_showEndButton && !_simulationComplete)
              Center(
                child: Padding(
                  padding: const EdgeInsets.only(top: 20, bottom: 10),
                  child: AnimatedBuilder(
                    animation: _pulseController,
                    builder: (context, child) {
                      return Transform.scale(
                        scale: _pulseController.value * 0.05 + 0.975,
                        child: ElevatedButton.icon(
                          onPressed: _endSimulation,
                          icon: const Icon(Icons.assessment_rounded),
                          label: const Text('View Post-Incident Analysis'),
                          style: Theme.of(context).elevatedButtonTheme.style
                              ?.copyWith(
                                // Use global theme
                                backgroundColor: WidgetStateProperty.all(
                                  Colors.orange.shade700,
                                ),
                                textStyle: WidgetStateProperty.all(
                                  const TextStyle(
                                    fontSize: 17,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                        ),
                      );
                    },
                  ),
                ),
              ),
          ],
        ),
      ),
      floatingActionButton:
          _simulationStarted && !_showEndButton && !_simulationComplete
          ? FloatingActionButton.extended(
              onPressed: () {
                _timer?.cancel();
                if (mounted) {
                  setState(() {
                    _showEndButton = true;
                  });
                }
              },
              backgroundColor: Colors.red.shade700,
              icon: const Icon(Icons.stop_circle_outlined, color: Colors.white),
              label: const Text(
                'Skip to End',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              tooltip: 'Emergency Stop & View Analysis',
            )
          : null,
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }
}

// --- Ransomware Simulation Code ---
// (Code for DeviceState, FakeAppLauncher, RansomwareSimulation, MatrixPainter, etc. remains here)
// ... (omitted for brevity, it's the same as in your 'code 1: main')
class DeviceState {
  final List<String> vulnerabilities;
  final List<String> protections;
  final double securityScore;
  final Map<String, dynamic> systemInfo;
  final DateTime timestamp;

  DeviceState({
    required this.vulnerabilities,
    required this.protections,
    required this.securityScore,
    required this.systemInfo,
    required this.timestamp,
  });
}

class FakeAppLauncher extends StatelessWidget {
  const FakeAppLauncher({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Secure Calculator Pro",
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white70),
        ),
        backgroundColor: Colors.black87,
        elevation: 4,
        centerTitle: true,
        iconTheme: const IconThemeData(color: Colors.white70),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.black, Color(0xFF212121), Color(0xFF424242)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                padding: const EdgeInsets.all(32),
                decoration: BoxDecoration(
                  color: Colors.grey[900]?.withOpacity(0.8),
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.redAccent.withOpacity(0.3),
                      blurRadius: 20,
                      spreadRadius: 5,
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    const Icon(
                      Icons.calculate_outlined,
                      size: 80,
                      color: Colors.blueAccent,
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      "Advanced Calculator",
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 10),
                    const Text(
                      "Perform complex calculations securely",
                      style: TextStyle(fontSize: 14, color: Colors.grey),
                    ),
                    const SizedBox(height: 30),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.launch, size: 24),
                      label: const Text(
                        "Launch Calculator",
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blueAccent,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 32,
                          vertical: 16,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(15),
                        ),
                      ),
                      onPressed: () => Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const RansomwareSimulation(),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class RansomwareSimulation extends StatefulWidget {
  const RansomwareSimulation({super.key});

  @override
  _RansomwareSimulationState createState() => _RansomwareSimulationState();
}

class _RansomwareSimulationState extends State<RansomwareSimulation>
    with TickerProviderStateMixin {
  final AssetsAudioPlayer _audioPlayer = AssetsAudioPlayer();
  late AnimationController _glitchController;
  late AnimationController _pulseController;
  late ConfettiController _confettiController;
  late PageController _pageController;
  late Animation<double> _progressAnimation;
  late Animation<double> _pulseAnimation;
  late MatrixPainter _matrixPainter;
  final math.Random _random = math.Random();

  int _currentPage = 0;
  double _bitcoinAmount = 0.0543;
  bool _simulationActive = true;
  Timer? _countdownTimer;
  int _remainingTime = 86400;

  late DeviceState _beforeAttackState;
  late DeviceState _afterAttackState;

  @override
  void initState() {
    super.initState();
    _initializeControllers();
    _initializeDeviceStates();
    _startSimulation();
  }

  void _initializeControllers() {
    _glitchController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    )..repeat(reverse: true);

    _pulseController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    )..repeat(reverse: true);

    _confettiController = ConfettiController(
      duration: const Duration(seconds: 3),
    );
    _pageController = PageController(initialPage: 0);

    _progressAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(parent: _glitchController, curve: Curves.linear));

    _pulseAnimation = Tween<double>(begin: 0.7, end: 1.0).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );

    _matrixPainter = MatrixPainter(
      animation: _glitchController,
      random: _random,
    );
  }

  void _initializeDeviceStates() {
    _beforeAttackState = DeviceState(
      vulnerabilities: [
        'Outdated operating system',
        'Missing security patches',
        'Weak firewall configuration',
        'No real-time protection',
        'Disabled automatic updates',
        'Unencrypted sensitive data',
        'Admin privileges for standard users',
      ],
      protections: [
        'Basic antivirus (outdated)',
        'Windows Defender (disabled)',
        'Manual backup (last: 30 days ago)',
      ],
      securityScore: 3.2,
      systemInfo: {
        'OS': 'Windows 10 (Build 19041)',
        'Last Update': '45 days ago',
        'Firewall': 'Disabled',
        'Real-time Protection': 'Off',
        'Backup Status': 'Outdated',
        'Network': 'Public WiFi',
      },
      timestamp: DateTime.now().subtract(const Duration(minutes: 5)),
    );

    _afterAttackState = DeviceState(
      vulnerabilities: [
        'System compromised by ransomware',
        'Files encrypted with AES-256',
        'Registry modifications detected',
        'Network communication with C&C server',
        'Shadow copies deleted',
        'System restore points removed',
        'Boot sector potentially modified',
      ],
      protections: [
        'Antivirus bypassed',
        'Firewall rules modified',
        'Windows Defender quarantined',
      ],
      securityScore: 0.5,
      systemInfo: {
        'Encryption Status': '4,382 files encrypted',
        'Affected File Types': '.doc, .pdf, .jpg, .mp4, .xlsx',
        'Ransom Note': 'README_DECRYPT.txt',
        'Payment Address': '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2',
        'Time Remaining': '23:59:59',
        'Network Activity': 'Tor connections detected',
      },
      timestamp: DateTime.now(),
    );
  }

  void _startSimulation() {
    _playSound();
    _startVibration();
    _startCountdown();
  }

  void _startCountdown() {
    _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_remainingTime > 0 && _simulationActive && mounted) {
        setState(() => _remainingTime--);
      } else if (_remainingTime <= 0 && mounted) {
        _endSimulation();
        timer.cancel();
      }
    });
  }

  void _playSound() async {
    try {
      await _audioPlayer.open(
        Audio("assets/alert.mp3"),
        loopMode: LoopMode.single,
        volume: 0.6,
      );
    } catch (e) {
      debugPrint("Audio error: $e");
    }
  }

  void _startVibration() async {
    try {
      bool? hasVibrator = await Vibration.hasVibrator();
      if (hasVibrator ?? false) {
        Vibration.vibrate(pattern: [0, 500, 200, 500], repeat: 2);
      }
    } catch (e) {
      debugPrint("Vibration error: $e");
    }
  }

  void _triggerEffect() {
    if (!_simulationActive) return;

    if (_currentPage < 5) {
      if (mounted) {
        setState(() {
          _currentPage++;
          if (_currentPage == 3) _bitcoinAmount = 0.5;
        });
        _pageController.animateToPage(
          _currentPage,
          duration: const Duration(milliseconds: 500),
          curve: Curves.easeInOut,
        );
      }
    } else if (_currentPage == 5) {
      _endSimulation();
    }
  }

  void _endSimulation() {
    if (mounted) {
      setState(() {
        _simulationActive = false;
        _currentPage = 6;
      });
      _confettiController.play();
      _pageController.animateToPage(
        6,
        duration: const Duration(milliseconds: 500),
        curve: Curves.easeInOut,
      );
      _countdownTimer?.cancel();
    }
  }

  String _formatTime(int seconds) {
    int hours = seconds ~/ 3600;
    int minutes = (seconds % 3600) ~/ 60;
    int secs = seconds % 60;
    return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${secs.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: !_simulationActive || _currentPage >= 6,
      onPopInvoked: (didPop) {
        if (didPop) return;
        if (!_simulationActive || _currentPage >= 6) {
          if (Navigator.canPop(context)) Navigator.of(context).pop();
        }
      },
      child: Scaffold(
        backgroundColor: Colors.black,
        body: Stack(
          children: [
            PageView(
              physics: const NeverScrollableScrollPhysics(),
              controller: _pageController,
              onPageChanged: (page) {
                if (mounted) setState(() => _currentPage = page);
              },
              children: [
                _buildFakeCrashScreen(),
                _buildMatrixEffect(),
                _buildEncryptionScreen(),
                _buildRansomNote(),
                _buildPaymentScreen(),
                _buildFinalThreatScreen(),
                _buildResolutionScreen(),
              ],
            ),
            if (_simulationActive && _currentPage < 6)
              Positioned(
                top: 50,
                right: 20,
                child: ScaleTransition(
                  scale: _pulseAnimation,
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.9),
                      borderRadius: BorderRadius.circular(25),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.red.withOpacity(0.5),
                          blurRadius: 10,
                          spreadRadius: 2,
                        ),
                      ],
                    ),
                    child: IconButton(
                      icon: const Icon(
                        Icons.emergency,
                        color: Colors.white,
                        size: 28,
                      ),
                      onPressed: _endSimulation,
                      tooltip: 'End Simulation & View Analysis',
                    ),
                  ),
                ),
              ),
            if (_currentPage >= 6)
              Align(
                alignment: Alignment.topCenter,
                child: ConfettiWidget(
                  confettiController: _confettiController,
                  blastDirectionality: BlastDirectionality.explosive,
                  particleDrag: 0.05,
                  emissionFrequency: 0.05,
                  numberOfParticles: 100,
                  gravity: 0.2,
                  shouldLoop: false,
                  colors: const [
                    Colors.green,
                    Colors.blue,
                    Colors.pink,
                    Colors.orange,
                    Colors.purple,
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildFakeCrashScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        color: Colors.black,
        child: Stack(
          fit: StackFit.expand,
          children: [
            FadeTransition(
              opacity: _glitchController,
              child: Lottie.asset(
                'assets/glitch.json',
                repeat: true,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) => Container(
                  color: Colors.red.withOpacity(0.1),
                  child: const Center(
                    child: Icon(Icons.warning, color: Colors.red, size: 100),
                  ),
                ),
              ),
            ),
            Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  AnimatedTextKit(
                    animatedTexts: [
                      TyperAnimatedText(
                        '⚠ CRITICAL SYSTEM ERROR ⚠\n\nYOUR DEVICE IS COMPROMISED!\n\nUNAUTHORIZED ACCESS DETECTED',
                        textAlign: TextAlign.center,
                        textStyle: const TextStyle(
                          fontSize: 28,
                          color: Colors.redAccent,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(color: Colors.red, blurRadius: 15),
                            Shadow(color: Colors.white, blurRadius: 5),
                          ],
                        ),
                        speed: const Duration(milliseconds: 60),
                      ),
                    ],
                    totalRepeatCount: 1,
                    onTap: _triggerEffect,
                  ),
                  const SizedBox(height: 40),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 10,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: const Text(
                      'TAP TO CONTINUE',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMatrixEffect() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        color: Colors.black,
        child: Stack(
          fit: StackFit.expand,
          children: [
            CustomPaint(
              painter: _matrixPainter,
              size: Size.infinite,
              child: Container(),
            ),
            Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Lottie.asset(
                    'assets/data_breach.json',
                    width: 300,
                    repeat: true,
                    errorBuilder: (context, error, stackTrace) => const Icon(
                      Icons.security,
                      color: Colors.green,
                      size: 100,
                    ),
                  ),
                  const SizedBox(height: 30),
                  AnimatedTextKit(
                    animatedTexts: [
                      WavyAnimatedText(
                        'SCANNING SYSTEM FILES...',
                        textStyle: const TextStyle(
                          color: Colors.greenAccent,
                          fontSize: 24,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      WavyAnimatedText(
                        '4,382 FILES FOUND',
                        textStyle: const TextStyle(
                          color: Colors.yellowAccent,
                          fontSize: 28,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      WavyAnimatedText(
                        'INITIATING ENCRYPTION...',
                        textStyle: const TextStyle(
                          color: Colors.redAccent,
                          fontSize: 24,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                    repeatForever: true,
                    onTap: _triggerEffect,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEncryptionScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.black, Color(0xFFB71C1C), Colors.black],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Lottie.asset(
                'assets/lock.json',
                width: 250,
                repeat: true,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.lock, color: Colors.red, size: 100),
              ),
              const SizedBox(height: 30),
              AnimatedTextKit(
                animatedTexts: [
                  TyperAnimatedText(
                    'ENCRYPTING YOUR FILES...',
                    textStyle: const TextStyle(
                      color: Colors.white,
                      fontSize: 28,
                      fontFamily: 'Courier',
                      fontWeight: FontWeight.bold,
                      shadows: [Shadow(color: Colors.red, blurRadius: 10)],
                    ),
                    speed: const Duration(milliseconds: 100),
                  ),
                ],
                totalRepeatCount: 1,
              ),
              const SizedBox(height: 30),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 40),
                child: Column(
                  children: [
                    AnimatedBuilder(
                      animation: _progressAnimation,
                      builder: (context, child) {
                        return LinearProgressIndicator(
                          value: _progressAnimation.value,
                          backgroundColor: Colors.grey[800],
                          valueColor: const AlwaysStoppedAnimation<Color>(
                            Colors.redAccent,
                          ),
                          minHeight: 8,
                        );
                      },
                    ),
                    const SizedBox(height: 20),
                    AnimatedBuilder(
                      animation: _progressAnimation,
                      builder: (context, child) {
                        return Text(
                          '${(_progressAnimation.value * 100).toInt()}% Complete',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontFamily: 'Courier',
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 40),
              const Text(
                'Documents • Photos • Videos • Music\nSpreadsheets • Presentations • Archives',
                textAlign: TextAlign.center,
                style: TextStyle(
                  color: Colors.redAccent,
                  fontSize: 16,
                  fontFamily: 'Courier',
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildRansomNote() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        color: Colors.black87,
        padding: const EdgeInsets.all(20),
        child: Center(
          child: SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Lottie.asset(
                  'assets/skull.json',
                  width: 200,
                  repeat: true,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.warning, color: Colors.red, size: 100),
                ),
                const SizedBox(height: 20),
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.red.withOpacity(0.1),
                    border: Border.all(color: Colors.red, width: 2),
                    borderRadius: BorderRadius.circular(15),
                  ),
                  child: AnimatedTextKit(
                    animatedTexts: [
                      TyperAnimatedText(
                        '💀 YOUR FILES ARE ENCRYPTED! 💀\n\n'
                        '🔒 4,382 files have been locked with military-grade encryption\n\n'
                        '💰 Pay ${_bitcoinAmount.toStringAsFixed(4)} BTC to recover your data\n\n'
                        '⏰ You have ${_formatTime(_remainingTime)} remaining\n\n'
                        '📧 BTC Address:\n1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2\n\n'
                        '⚠ Do not restart your computer\n'
                        '⚠ Do not run antivirus software\n'
                        '⚠ Do not attempt file recovery\n\n'
                        'Failure to pay will result in permanent data loss!',
                        textAlign: TextAlign.center,
                        textStyle: const TextStyle(
                          color: Colors.redAccent,
                          fontSize: 16,
                          fontFamily: 'Courier',
                          height: 1.4,
                          fontWeight: FontWeight.bold,
                        ),
                        speed: const Duration(milliseconds: 30),
                      ),
                    ],
                    totalRepeatCount: 1,
                    onTap: _triggerEffect,
                  ),
                ),
                const SizedBox(height: 30),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      icon: const Icon(Icons.payment, size: 20),
                      label: const Text('PAY NOW'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[700],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 25,
                          vertical: 15,
                        ),
                      ),
                      onPressed: _triggerEffect,
                    ),
                    OutlinedButton.icon(
                      icon: const Icon(Icons.help_outline, size: 20),
                      label: const Text('HELP'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.orange,
                        side: const BorderSide(color: Colors.orange),
                      ),
                      onPressed: _triggerEffect,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildPaymentScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.black, Color(0xFFBF360C), Colors.black],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Lottie.asset(
                  'assets/bitcoin.json',
                  width: 280,
                  repeat: true,
                  errorBuilder: (context, error, stackTrace) => const Icon(
                    Icons.currency_bitcoin,
                    color: Colors.orange,
                    size: 100,
                  ),
                ),
                const SizedBox(height: 30),
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(15),
                    border: Border.all(color: Colors.orange, width: 2),
                  ),
                  child: Column(
                    children: [
                      const Text(
                        '🔄 PROCESSING PAYMENT',
                        style: TextStyle(
                          color: Colors.greenAccent,
                          fontSize: 24,
                          fontFamily: 'Courier',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 20),
                      TweenAnimationBuilder<double>(
                        tween: Tween<double>(begin: 0.0, end: _bitcoinAmount),
                        duration: const Duration(seconds: 4),
                        builder: (context, double value, _) => Text(
                          '₿ ${value.toStringAsFixed(4)}',
                          style: const TextStyle(
                            fontSize: 42,
                            color: Colors.orangeAccent,
                            fontFamily: 'Courier',
                            fontWeight: FontWeight.bold,
                            shadows: [
                              Shadow(color: Colors.orange, blurRadius: 15),
                              Shadow(color: Colors.white, blurRadius: 5),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 20),
                      const Text(
                        'Transaction ID: 7f9a8b2c1e4d5f6g8h9i0j',
                        style: TextStyle(
                          color: Colors.grey,
                          fontSize: 14,
                          fontFamily: 'Courier',
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 30),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 40),
                  child: Column(
                    children: [
                      AnimatedBuilder(
                        animation: _progressAnimation,
                        builder: (context, child) {
                          return LinearProgressIndicator(
                            value: _progressAnimation.value,
                            backgroundColor: Colors.grey[800],
                            valueColor: const AlwaysStoppedAnimation<Color>(
                              Colors.orangeAccent,
                            ),
                            minHeight: 10,
                          );
                        },
                      ),
                      const SizedBox(height: 15),
                      const Text(
                        'Confirming blockchain transaction...\nPlease wait while we verify your payment',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Color(0xFFB0BEC5),
                          fontSize: 16,
                          fontFamily: 'Courier',
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 30),
                ElevatedButton.icon(
                  icon: const Icon(Icons.verified, size: 20),
                  label: const Text('VERIFY PAYMENT'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green[700],
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 30,
                      vertical: 15,
                    ),
                  ),
                  onPressed: _triggerEffect,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildFinalThreatScreen() {
    return GestureDetector(
      onTap: _triggerEffect,
      child: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF4A0E0E), Colors.black, Color(0xFF4A0E0E)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ScaleTransition(
                  scale: _pulseAnimation,
                  child: Container(
                    padding: const EdgeInsets.all(30),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.2),
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.red.withOpacity(0.5),
                          blurRadius: 30,
                          spreadRadius: 10,
                        ),
                      ],
                    ),
                    child: const Icon(
                      Icons.warning,
                      color: Colors.red,
                      size: 80,
                    ),
                  ),
                ),
                const SizedBox(height: 30),
                AnimatedTextKit(
                  animatedTexts: [
                    TyperAnimatedText(
                      '⚠ FINAL WARNING ⚠\n\n'
                      'PAYMENT VERIFICATION FAILED!\n\n'
                      'Your data will be PERMANENTLY DELETED in:\n'
                      '${_formatTime(_remainingTime)}\n\n'
                      'This is your LAST CHANCE to save your files!\n\n'
                      '🔥 Photos of your family\n'
                      '💼 Important work documents\n'
                      '🎓 School projects and memories\n'
                      '💰 Financial records\n\n'
                      'All will be GONE FOREVER!',
                      textAlign: TextAlign.center,
                      textStyle: const TextStyle(
                        color: Colors.redAccent,
                        fontSize: 20,
                        fontFamily: 'Courier',
                        fontWeight: FontWeight.bold,
                        height: 1.4,
                      ),
                      speed: const Duration(milliseconds: 50),
                    ),
                  ],
                  totalRepeatCount: 1,
                  onTap: _triggerEffect,
                ),
                const SizedBox(height: 40),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      icon: const Icon(Icons.payment, size: 20),
                      label: const Text('RETRY PAYMENT'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[800],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 15,
                        ),
                      ),
                      onPressed: _triggerEffect,
                    ),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.delete_forever, size: 20),
                      label: const Text('ACCEPT LOSS'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey[800],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 15,
                        ),
                      ),
                      onPressed: _triggerEffect,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildResolutionScreen() {
    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.black, Color(0xFF1B5E20), Colors.black],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        ),
      ),
      child: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Lottie.asset(
                'assets/success.json',
                width: 300,
                repeat: false,
                errorBuilder: (context, error, stackTrace) => const Icon(
                  Icons.check_circle,
                  color: Colors.green,
                  size: 100,
                ),
              ),
              const SizedBox(height: 30),
              AnimatedTextKit(
                animatedTexts: [
                  ScaleAnimatedText(
                    '🎉 SIMULATION COMPLETE! 🎉',
                    textStyle: const TextStyle(
                      color: Colors.greenAccent,
                      fontSize: 32,
                      fontFamily: 'Courier',
                      fontWeight: FontWeight.bold,
                    ),
                    duration: const Duration(milliseconds: 2000),
                  ),
                ],
                totalRepeatCount: 1,
              ),
              const SizedBox(height: 20),
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(15),
                  border: Border.all(color: Colors.green, width: 2),
                ),
                child: const Text(
                  '✅ This was a controlled simulation\n'
                  '✅ Your device and files are completely safe\n'
                  '✅ No actual malware was installed\n'
                  '✅ Educational purpose demonstration',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontFamily: 'Courier',
                    height: 1.5,
                  ),
                ),
              ),
              const SizedBox(height: 40),
              Wrap(
                alignment: WrapAlignment.center,
                spacing: 15,
                runSpacing: 15,
                children: [
                  ElevatedButton.icon(
                    icon: const Icon(Icons.analytics, size: 20),
                    label: const Text('BEFORE ATTACK'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue[700],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 15,
                      ),
                    ),
                    onPressed: () => _showAnalysis(context, true),
                  ),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.security, size: 20),
                    label: const Text('AFTER ATTACK'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange[700],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 15,
                      ),
                    ),
                    onPressed: () => _showAnalysis(context, false),
                  ),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.shield, size: 20),
                    label: const Text('PREVENTION'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple[700],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 15,
                      ),
                    ),
                    onPressed: () => _showPreventiveMeasures(context),
                  ),
                ],
              ),
              const SizedBox(height: 30),
              OutlinedButton.icon(
                icon: const Icon(Icons.exit_to_app, size: 24),
                label: const Text(
                  'EXIT SIMULATION',
                  style: TextStyle(fontSize: 18),
                ),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.white,
                  side: const BorderSide(color: Colors.greenAccent, width: 2),
                  padding: const EdgeInsets.symmetric(
                    horizontal: 30,
                    vertical: 15,
                  ),
                ),
                onPressed: () {
                  // Pop back to FakeAppLauncher, then FakeAppLauncher's back button goes to SimSelectionPage
                  if (Navigator.canPop(context)) {
                    Navigator.pop(context);
                  }
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showAnalysis(BuildContext context, bool beforeAttack) {
    final state = beforeAttack ? _beforeAttackState : _afterAttackState;
    final title = beforeAttack
        ? 'Device State: Before Attack'
        : 'Device State: After Attack';
    final color = beforeAttack ? Colors.blue : Colors.orange;

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.8,
        decoration: BoxDecoration(
          color: Colors.grey[900],
          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          border: Border.all(color: color, width: 2),
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: color.withOpacity(0.2),
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(18),
                ),
              ),
              child: Row(
                children: [
                  Icon(
                    beforeAttack ? Icons.analytics : Icons.security,
                    color: color,
                    size: 30,
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: Text(
                      title,
                      style: TextStyle(
                        color: color,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.white),
                    onPressed: () => Navigator.pop(context),
                  ),
                ],
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildAnalysisSection(
                      'Security Score',
                      '${state.securityScore}/10',
                      state.securityScore > 5 ? Colors.green : Colors.red,
                      Icons.score,
                    ),
                    const SizedBox(height: 20),
                    _buildAnalysisSection(
                      'System Information',
                      '',
                      Colors.blue,
                      Icons.computer,
                    ),
                    ...state.systemInfo.entries
                        .map(
                          (entry) => Padding(
                            padding: const EdgeInsets.only(left: 20, bottom: 8),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.arrow_right,
                                  color: Colors.grey,
                                  size: 16,
                                ),
                                const SizedBox(width: 10),
                                Expanded(
                                  child: Text(
                                    '${entry.key}: ${entry.value}',
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                        .toList(),
                    const SizedBox(height: 20),
                    _buildAnalysisSection(
                      'Vulnerabilities Found',
                      '${state.vulnerabilities.length} issues',
                      Colors.red,
                      Icons.warning,
                    ),
                    ...state.vulnerabilities
                        .map(
                          (vuln) => Padding(
                            padding: const EdgeInsets.only(left: 20, bottom: 8),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error,
                                  color: Colors.red,
                                  size: 16,
                                ),
                                const SizedBox(width: 10),
                                Expanded(
                                  child: Text(
                                    vuln,
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                        .toList(),
                    const SizedBox(height: 20),
                    _buildAnalysisSection(
                      'Active Protections',
                      '${state.protections.length} enabled',
                      state.protections.length > 2
                          ? Colors.green
                          : Colors.orange,
                      Icons.shield,
                    ),
                    ...state.protections
                        .map(
                          (protection) => Padding(
                            padding: const EdgeInsets.only(left: 20, bottom: 8),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.check_circle,
                                  color: Colors.green,
                                  size: 16,
                                ),
                                const SizedBox(width: 10),
                                Expanded(
                                  child: Text(
                                    protection,
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                        .toList(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnalysisSection(
    String title,
    String subtitle,
    Color color,
    IconData icon,
  ) {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(width: 15),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    color: color,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                if (subtitle.isNotEmpty)
                  Text(
                    subtitle,
                    style: const TextStyle(color: Colors.grey, fontSize: 14),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _showPreventiveMeasures(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.9,
        decoration: BoxDecoration(
          color: Colors.grey[900],
          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          border: Border.all(color: Colors.purple, width: 2),
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.purple.withOpacity(0.2),
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(18),
                ),
              ),
              child: Row(
                children: [
                  const Icon(Icons.shield, color: Colors.purple, size: 30),
                  const SizedBox(width: 15),
                  const Expanded(
                    child: Text(
                      'Ransomware Prevention Guide',
                      style: TextStyle(
                        color: Colors.purple,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.white),
                    onPressed: () => Navigator.pop(context),
                  ),
                ],
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildPreventionCategory(
                      'Essential Security Measures',
                      [
                        'Keep your operating system and software updated',
                        'Use reputable antivirus software with real-time protection',
                        'Enable automatic security updates',
                        'Use a firewall and keep it enabled',
                        'Regularly scan your system for malware',
                      ],
                      Colors.green,
                      Icons.security,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Backup Strategies',
                      [
                        'Follow the 3-2-1 backup rule (3 copies, 2 different media, 1 offsite)',
                        'Use automated backup solutions',
                        'Test your backups regularly',
                        'Keep offline backups disconnected from your network',
                        'Use cloud storage with versioning capabilities',
                      ],
                      Colors.blue,
                      Icons.backup,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Safe Computing Practices',
                      [
                        'Be cautious with email attachments and links',
                        'Download software only from official sources',
                        'Use strong, unique passwords for all accounts',
                        'Enable two-factor authentication where available',
                        'Avoid using admin accounts for daily activities',
                      ],
                      Colors.orange,
                      Icons.person_pin_circle,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Network Security',
                      [
                        'Use secure, encrypted WiFi networks',
                        'Avoid public WiFi for sensitive activities',
                        'Keep your router firmware updated',
                        'Use a VPN when connecting to public networks',
                        'Disable unnecessary network services',
                      ],
                      Colors.cyan,
                      Icons.wifi_lock,
                    ),
                    const SizedBox(height: 20),
                    _buildPreventionCategory(
                      'Advanced Protection',
                      [
                        'Implement application whitelisting',
                        'Use endpoint detection and response (EDR) solutions',
                        'Enable controlled folder access',
                        'Regularly audit user permissions',
                        'Consider using isolated environments for risky activities',
                      ],
                      Colors.red,
                      Icons.admin_panel_settings,
                    ),
                    const SizedBox(height: 30),
                    Container(
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        color: Colors.yellow.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(15),
                        border: Border.all(color: Colors.yellow, width: 2),
                      ),
                      child: const Column(
                        children: [
                          Icon(Icons.lightbulb, color: Colors.yellow, size: 30),
                          SizedBox(height: 10),
                          Text(
                            'Remember: Prevention is Always Better Than Recovery',
                            style: TextStyle(
                              color: Colors.yellow,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          SizedBox(height: 10),
                          Text(
                            'Implementing these measures significantly reduces your risk of falling victim to ransomware attacks.',
                            style: TextStyle(color: Colors.white, fontSize: 14),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPreventionCategory(
    String title,
    List<String> items,
    Color color,
    IconData icon,
  ) {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(15),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: color, size: 24),
              const SizedBox(width: 15),
              Expanded(
                child: Text(
                  title,
                  style: TextStyle(
                    color: color,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 15),
          ...items
              .map(
                (item) => Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(Icons.check_circle, color: color, size: 16),
                      const SizedBox(width: 10),
                      Expanded(
                        child: Text(
                          item,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 14,
                            height: 1.3,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              )
              .toList(),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    _glitchController.dispose();
    _pulseController.dispose();
    _confettiController.dispose();
    _pageController.dispose();
    _countdownTimer?.cancel();
    super.dispose();
  }
}

class MatrixPainter extends CustomPainter {
  final Animation<double> animation;
  final math.Random random;
  final List<double> _yPositions = [];
  final List<double> _speeds = [];
  final List<List<String>> _characters;

  static const int _numColumns = 30;
  static const int _charsPerColumn = 35;

  MatrixPainter({required this.animation, required this.random})
    : _characters = List.generate(
        _numColumns,
        (i) => List.generate(
          _charsPerColumn,
          (j) => String.fromCharCode(0x30A0 + random.nextInt(96)),
        ),
      ),
      super(repaint: animation) {
    for (int i = 0; i < _numColumns; i++) {
      _yPositions.add(
        random.nextDouble() * -500.0 - (_charsPerColumn * 16.0 * 0.2),
      );
      _speeds.add(random.nextDouble() * 3.0 + 2.0);
    }
  }

  @override
  void paint(Canvas canvas, Size size) {
    const double charSize = 16.0;
    final double columnWidth = size.width / _numColumns;

    for (int i = 0; i < _numColumns; i++) {
      for (int j = 0; j < _charsPerColumn; j++) {
        final char = _characters[i][j];
        final opacity = (1.0 - (j / _charsPerColumn)).clamp(0.3, 1.0);
        final color = j == 0
            ? Colors.white
            : Colors.greenAccent.withOpacity(opacity);

        final textStyle = TextStyle(
          color: color,
          fontSize: charSize,
          fontFamily: 'Courier',
          fontWeight: j == 0 ? FontWeight.bold : FontWeight.normal,
          shadows: j == 0
              ? [const Shadow(color: Colors.white, blurRadius: 8)]
              : null,
        );

        final textSpan = TextSpan(text: char, style: textStyle);
        final textPainter = TextPainter(
          text: textSpan,
          textAlign: TextAlign.center,
          textDirection: TextDirection.ltr,
        )..layout(minWidth: columnWidth);

        double charYPos = _yPositions[i] + (j * charSize);

        if (charYPos > -charSize && charYPos < size.height) {
          textPainter.paint(canvas, Offset(i * columnWidth, charYPos));
        }

        if (j > 0 && random.nextInt(300) < 1) {
          _characters[i][j] = String.fromCharCode(0x30A0 + random.nextInt(96));
        }
      }

      _yPositions[i] += _speeds[i];

      if (_yPositions[i] > size.height) {
        _yPositions[i] =
            random.nextDouble() * -200.0 - (_charsPerColumn * charSize * 0.5);
        _speeds[i] = random.nextDouble() * 3.0 + 2.0;

        for (int k = 0; k < _charsPerColumn; k++) {
          _characters[i][k] = String.fromCharCode(0x30A0 + random.nextInt(96));
        }
      }
    }
  }

  @override
  bool shouldRepaint(covariant MatrixPainter oldDelegate) => true;
}

// --- Email Phishing Simulation Code ---

class Email {
  final String id;
  final String sender;
  final String subject;
  final String preview;
  final String time;
  final bool isPhishing;
  final String senderAvatar;
  final String priority;
  final String phishingType;
  final List<String> phishingReasons;

  Email({
    required this.id,
    required this.sender,
    required this.subject,
    required this.preview,
    required this.time,
    required this.isPhishing,
    required this.senderAvatar,
    required this.priority,
    this.phishingType = '',
    this.phishingReasons = const [],
  });
}

class EmailInboxScreen extends StatefulWidget {
  const EmailInboxScreen({super.key});

  @override
  EmailInboxScreenState createState() => EmailInboxScreenState();
}

class EmailInboxScreenState extends State<EmailInboxScreen>
    with TickerProviderStateMixin {
  bool simulationStarted = false;
  bool deviceHacked = false;
  List<Email> clickedEmails = [];
  List<String> hackingSteps = [];
  late AnimationController _hackingController;
  late AnimationController _pulseController;
  Timer? hackingTimer;
  int hackingProgress = 0;

  final List<Email> emails = [
    Email(
      id: '1',
      sender: 'notifications@linkedin.com',
      subject: 'Weekly Job Recommendations',
      preview: 'Based on your profile, we found 12 new job opportunities...',
      time: '2h ago',
      isPhishing: false,
      senderAvatar: '🔗',
      priority: 'normal',
    ),
    Email(
      id: '2',
      sender: 'team@github.com',
      subject: 'Security Alert: New Sign-in',
      preview:
          'We detected a new sign-in to your GitHub account from Chrome on Windows...',
      time: '4h ago',
      isPhishing: false,
      senderAvatar: '🐙',
      priority: 'normal',
    ),
    Email(
      id: '3',
      sender: 'security@paypaI.com',
      subject: '🚨 URGENT: Your Account Will Be Suspended',
      preview:
          'Your PayPal account has suspicious activity. Click here immediately to verify...',
      time: '1h ago',
      isPhishing: true,
      senderAvatar: '💳',
      priority: 'urgent',
      phishingType: 'Account Suspension Scam',
      phishingReasons: [
        'Suspicious sender email (paypaI.com with capital I instead of lowercase l)',
        'Creates false urgency with "URGENT" and suspension threats',
        'Uses fear tactics to pressure immediate action',
        'Generic greeting without your actual name',
        'Requests clicking suspicious links for verification',
      ],
    ),
    Email(
      id: '4',
      sender: 'no-reply@amazon-security.net',
      subject: 'Verify Your Amazon Account - Unusual Activity Detected',
      preview:
          'We have detected unusual activity on your account. Please verify your identity immediately...',
      time: '3h ago',
      isPhishing: true,
      senderAvatar: '📦',
      priority: 'high',
      phishingType: 'Account Verification Scam',
      phishingReasons: [
        'Fake domain (amazon-security.net instead of amazon.com)',
        'Vague "unusual activity" without specific details',
        'Pressure to "verify" account immediately',
        'No specific transaction or activity mentioned',
        'Generic security alert template',
      ],
    ),
    Email(
      id: '5',
      sender: 'admin@microsoft-support.org',
      subject: 'Your Microsoft Office License Has Expired',
      preview:
          'Renew your Office 365 subscription now to avoid service interruption. Act within 24 hours...',
      time: '5h ago',
      isPhishing: true,
      senderAvatar: '🏢',
      priority: 'normal',
      phishingType: 'License Renewal Scam',
      phishingReasons: [
        'Fake domain (microsoft-support.org instead of official Microsoft domains)',
        'False expiration claims to create urgency',
        'Requests payment or personal information',
        'Poor grammar and formatting inconsistencies may be present',
        'No reference to actual subscription details',
      ],
    ),
    Email(
      id: '6',
      sender: 'support@bankofamerica-secure.com',
      subject: 'Security Alert: Confirm Your Identity',
      preview:
          'Your account has been temporarily locked due to suspicious activity. Confirm your identity to unlock...',
      time: '6h ago',
      isPhishing: true,
      senderAvatar: '🏦',
      priority: 'urgent',
      phishingType: 'Banking Identity Theft',
      phishingReasons: [
        'Fake banking domain with added words like "secure" for legitimacy',
        'False account lockout to create panic',
        'Requests sensitive identity confirmation via a link',
        'No specific transaction details mentioned',
        'Urgent action required without proper bank protocols',
      ],
    ),
  ];

  @override
  void initState() {
    super.initState();
    _hackingController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    );
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    )..repeat(reverse: true);
  }

  @override
  void dispose() {
    _hackingController.dispose();
    _pulseController.dispose();
    hackingTimer?.cancel();
    super.dispose();
  }

  void startSimulation() {
    if (mounted) {
      setState(() {
        simulationStarted = true;
        deviceHacked = false;
        clickedEmails.clear();
        hackingSteps.clear();
        hackingProgress = 0;
      });
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text(
          '🛡 Phishing simulation started. Be careful which emails you click!',
        ),
        backgroundColor: Colors.blue[700],
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void onEmailClicked(Email email) {
    if (!simulationStarted || deviceHacked)
      return; // Prevent clicks if sim not started or already hacked

    if (mounted) {
      setState(() {
        clickedEmails.add(email);
      });
    }

    if (email.isPhishing) {
      simulateHacking(email);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('✅ Safe email opened - No threat detected'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  void simulateHacking(Email phishingEmail) {
    if (mounted) {
      setState(() {
        deviceHacked = true;
        hackingSteps = [
          'Malicious link clicked...',
          'Downloading payload...',
          'Bypassing security systems...',
          'Installing backdoor access...',
          'Accessing personal data...',
          'Stealing credentials...',
          'Device fully compromised! 🚨',
        ];
      });
    }

    _hackingController.forward();

    hackingTimer = Timer.periodic(const Duration(milliseconds: 800), (timer) {
      if (hackingProgress < hackingSteps.length) {
        if (mounted) {
          setState(() {
            hackingProgress++;
          });
        }
      } else {
        timer.cancel();
        Future.delayed(const Duration(seconds: 2), () {
          if (mounted) showPhishingAnalysis(phishingEmail);
        });
      }
    });
  }

  void showPhishingAnalysis(Email phishingEmail) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        // Inherits theme from MyApp
        title: Row(
          children: [
            const Icon(Icons.warning, color: Colors.red, size: 28),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                'Phishing Attack Analysis',
                style: TextStyle(
                  color: Colors.red[400],
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red[700]!.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Attack Type:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.grey[200],
                      ),
                    ),
                    Text(
                      phishingEmail.phishingType,
                      style: TextStyle(color: Colors.red[300]),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Target Email:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.grey[200],
                      ),
                    ),
                    Text(
                      phishingEmail.subject,
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Red Flags Identified:',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                  color: Colors.grey[100],
                ),
              ),
              const SizedBox(height: 8),
              ...phishingEmail.phishingReasons.map(
                (reason) => Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(
                        Icons.error_outline,
                        color: Colors.red[300],
                        size: 16,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          reason,
                          style: TextStyle(color: Colors.grey[300]),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue[700]!.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Prevention Measures:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.blue[300],
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '• Always verify sender email addresses carefully',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Check URLs before clicking - hover to preview',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Enable two-factor authentication on all accounts',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Keep software and antivirus updated',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Never provide sensitive info via email',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Contact companies directly to verify suspicious emails',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Report phishing attempts to authorities',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: Colors.orange[700]!.withOpacity(0.3),
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Immediate Actions if Compromised:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.orange[300],
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '• Change all passwords immediately',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Run full antivirus scan',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Check bank and credit card statements',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Enable account alerts and monitoring',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Consider credit freeze if personal data stolen',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                    Text(
                      '• Report to your IT department and authorities',
                      style: TextStyle(color: Colors.grey[300]),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              resetSimulation();
            },
            child: Text(
              'Try Again',
              style: TextStyle(color: Theme.of(context).colorScheme.secondary),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close dialog
              // Optionally, automatically reset or navigate back further
              // resetSimulation();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).colorScheme.primary,
            ),
            child: const Text('Continue Learning'),
          ),
        ],
      ),
    );
  }

  void resetSimulation() {
    if (mounted) {
      setState(() {
        simulationStarted = false;
        deviceHacked = false;
        clickedEmails.clear();
        hackingSteps.clear();
        hackingProgress = 0;
      });
    }
    _hackingController.reset();
    hackingTimer?.cancel();
  }

  void showResults() {
    int phishingClicked = clickedEmails.where((e) => e.isPhishing).length;
    int safeClicked = clickedEmails.where((e) => !e.isPhishing).length;
    int totalPhishing = emails.where((e) => e.isPhishing).length;

    String performanceMessage;
    Color performanceColor;

    if (phishingClicked == 0 && clickedEmails.isNotEmpty) {
      // ensure some interaction happened
      performanceMessage = '🛡 Excellent! You avoided all phishing attempts!';
      performanceColor = Colors.greenAccent.shade400;
    } else if (phishingClicked > 0 && phishingClicked <= 2) {
      performanceMessage =
          '⚠ Moderate performance. You fell for $phishingClicked phishing attempt(s).';
      performanceColor = Colors.orangeAccent.shade400;
    } else if (phishingClicked > 2) {
      performanceMessage =
          '🚨 High risk! You fell for $phishingClicked phishing attempt(s).';
      performanceColor = Colors.redAccent.shade400;
    } else {
      performanceMessage = 'No phishing emails clicked yet. Keep exploring!';
      performanceColor = Colors.blueAccent.shade200;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        // Inherits theme from MyApp
        title: Text(
          'Simulation Results',
          style: TextStyle(color: Colors.grey[100]),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: performanceColor.withOpacity(0.15),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: performanceColor.withOpacity(0.4)),
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Phishing emails clicked:',
                        style: TextStyle(color: Colors.grey[300]),
                      ),
                      Text(
                        '$phishingClicked/$totalPhishing',
                        style: TextStyle(
                          color: Colors.redAccent.shade100,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Safe emails clicked:',
                        style: TextStyle(color: Colors.grey[300]),
                      ),
                      Text(
                        '$safeClicked',
                        style: TextStyle(
                          color: Colors.greenAccent.shade100,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  Text(
                    performanceMessage,
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: performanceColor,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Security Score: ${totalPhishing > 0 ? ((totalPhishing - phishingClicked) / totalPhishing * 100).round() : 100}%',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.grey[100],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              resetSimulation();
            },
            child: Text(
              'Reset Simulation',
              style: TextStyle(color: Theme.of(context).colorScheme.secondary),
            ),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(),
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).colorScheme.primary,
            ),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Use the main app's theme by default, but allow some local overrides if needed
    final ThemeData currentTheme = Theme.of(context);
    final bool isDarkTheme = currentTheme.brightness == Brightness.dark;

    return Scaffold(
      backgroundColor: isDarkTheme ? Colors.grey[900] : Colors.grey[100],
      appBar: AppBar(
        title: Text(
          'Phishing Detection Sim',
          style: TextStyle(
            fontWeight: FontWeight.w600,
            color: isDarkTheme ? Colors.white70 : Colors.black87,
          ),
        ),
        backgroundColor: isDarkTheme ? Colors.grey[850] : Colors.white,
        foregroundColor: isDarkTheme ? Colors.white70 : Colors.black87,
        elevation: 0.5,
        centerTitle: false,
        iconTheme: IconThemeData(
          color: isDarkTheme ? Colors.white70 : Colors.black54,
        ),
        actions: [
          if (simulationStarted && clickedEmails.isNotEmpty)
            IconButton(
              onPressed: showResults,
              icon: const Icon(Icons.analytics_outlined),
              tooltip: 'View Results',
            ),
          IconButton(
            onPressed: () => showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: const Text('About This Simulation'),
                content: const Text(
                  'This is an educational phishing simulation designed to test your ability to identify malicious emails. '
                  'Click emails to see how phishing attacks work and learn to identify red flags. '
                  'This is part of a real-time cyber threat analysis and response system.',
                ),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: Text(
                      'Got it',
                      style: TextStyle(
                        color: Theme.of(context).colorScheme.secondary,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            icon: const Icon(Icons.info_outline),
          ),
        ],
      ),
      body: Column(
        children: [
          Container(
            margin: const EdgeInsets.all(16),
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  currentTheme.colorScheme.primary.withOpacity(0.8),
                  currentTheme.colorScheme.primary,
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: currentTheme.colorScheme.primary.withOpacity(0.3),
                  blurRadius: 8,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            child: Column(
              children: [
                Row(
                  children: [
                    const Icon(Icons.security, color: Colors.white, size: 24),
                    const SizedBox(width: 8),
                    const Expanded(
                      child: Text(
                        'Email Phishing Detection Module',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: simulationStarted ? null : startSimulation,
                        icon: Icon(
                          simulationStarted
                              ? Icons.hourglass_empty_outlined
                              : Icons.play_arrow_outlined,
                        ),
                        label: Text(
                          simulationStarted
                              ? 'Simulation Active'
                              : 'Start Security Test',
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: currentTheme.colorScheme.primary,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    ElevatedButton(
                      onPressed: resetSimulation,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white.withOpacity(0.2),
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.all(12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Icon(Icons.refresh_outlined),
                    ),
                  ],
                ),
              ],
            ),
          ),

          if (deviceHacked) ...[
            Container(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.red[800],
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.red.withOpacity(0.5),
                    blurRadius: 12,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      AnimatedBuilder(
                        animation: _pulseController,
                        builder: (context, child) {
                          return Icon(
                            Icons.warning_amber_rounded,
                            color: Colors.white.withOpacity(
                              0.7 + 0.3 * _pulseController.value,
                            ),
                            size: 24,
                          );
                        },
                      ),
                      const SizedBox(width: 8),
                      const Text(
                        'SYSTEM COMPROMISED - THREAT DETECTED',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  ...hackingSteps
                      .take(hackingProgress)
                      .map(
                        (step) => Padding(
                          padding: const EdgeInsets.only(bottom: 4),
                          child: Row(
                            children: [
                              const Icon(
                                Icons.chevron_right,
                                color: Colors.white70,
                                size: 16,
                              ),
                              const SizedBox(width: 4),
                              Text(
                                step,
                                style: const TextStyle(color: Colors.white70),
                              ),
                            ],
                          ),
                        ),
                      ),
                ],
              ),
            ),
          ],
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              itemCount: emails.length,
              itemBuilder: (context, index) {
                final email = emails[index];
                final isClicked = clickedEmails.contains(email);

                Color cardBgColor = isDarkTheme
                    ? Colors.grey[800]!
                    : Colors.white;
                Color senderColor = isDarkTheme
                    ? Colors.grey[400]!
                    : Colors.grey[700]!;
                Color subjectColor = isDarkTheme
                    ? Colors.grey[200]!
                    : Colors.black87;
                Color previewColor = isDarkTheme
                    ? Colors.grey[500]!
                    : Colors.grey[600]!;

                return Card(
                  margin: const EdgeInsets.only(bottom: 8),
                  color: cardBgColor, // Apply themed card color
                  child: InkWell(
                    onTap: () => onEmailClicked(email),
                    borderRadius: BorderRadius.circular(12),
                    child: Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        border: isClicked
                            ? Border.all(
                                color: email.isPhishing
                                    ? Colors.redAccent.shade200
                                    : Colors.greenAccent.shade400,
                                width: 2,
                              )
                            : Border.all(
                                color: isDarkTheme
                                    ? Colors.grey[700]!
                                    : Colors.grey[300]!,
                              ),
                      ),
                      child: Row(
                        children: [
                          Container(
                            width: 48,
                            height: 48,
                            decoration: BoxDecoration(
                              color: email.priority == 'urgent'
                                  ? Colors.red.withOpacity(
                                      isDarkTheme ? 0.3 : 0.15,
                                    )
                                  : email.priority == 'high'
                                  ? Colors.orange.withOpacity(
                                      isDarkTheme ? 0.3 : 0.15,
                                    )
                                  : currentTheme.colorScheme.primary
                                        .withOpacity(isDarkTheme ? 0.3 : 0.15),
                              borderRadius: BorderRadius.circular(24),
                            ),
                            child: Center(
                              child: Text(
                                email.senderAvatar,
                                style: TextStyle(
                                  fontSize: 20,
                                  color: isDarkTheme
                                      ? Colors.white70
                                      : Colors.black54,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    Expanded(
                                      child: Text(
                                        email.sender,
                                        style: TextStyle(
                                          fontWeight: FontWeight.w500,
                                          color: senderColor,
                                        ),
                                      ),
                                    ),
                                    Text(
                                      email.time,
                                      style: TextStyle(
                                        color: isDarkTheme
                                            ? Colors.grey[600]
                                            : Colors.grey[500],
                                        fontSize: 12,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  email.subject,
                                  style: TextStyle(
                                    fontWeight: FontWeight.w600,
                                    fontSize: 15,
                                    color: subjectColor,
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                const SizedBox(height: 2),
                                Text(
                                  email.preview,
                                  style: TextStyle(
                                    color: previewColor,
                                    fontSize: 13,
                                  ),
                                  maxLines: 2,
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ],
                            ),
                          ),
                          Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              if (email.priority == 'urgent')
                                Container(
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 6,
                                    vertical: 2,
                                  ),
                                  decoration: BoxDecoration(
                                    color: Colors.redAccent.shade400,
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  child: const Text(
                                    'URGENT',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 10,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              if (isClicked) ...[
                                SizedBox(
                                  height: email.priority == 'urgent' ? 4 : 0,
                                ),
                                Icon(
                                  email.isPhishing
                                      ? Icons.dangerous_outlined
                                      : Icons.verified_user_outlined,
                                  color: email.isPhishing
                                      ? Colors.redAccent.shade200
                                      : Colors.greenAccent.shade400,
                                  size: 20,
                                ),
                              ],
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
